<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Static Variables</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Static Variables" />
  <meta name="rh-index-keywords" content="Method Variables" />
  <meta name="search-keywords" content="Method Variables,methods,static,argument_count,method" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Static Variables</h1>
  <p>An interesting feature of <a href="../Script_Functions.htm">script functions</a> and <a href="../Method_Variables.htm">method variables</a> is that they can have <strong>static variables</strong>. A static variable is one that is defined the first time
    that the function is called and that will maintain its value from then onward. To create a static variable you need to define it using the <span class="inline">static</span> keyword, as shown in this simple example:</p>
  <p class="code">counter = function()<br/> {
    <br/>     static num = 0;<br/>     return num++;<br/> }
  </p>
  <p>In the above example, the variable <span class="inline">num</span> is a static variable, and so will be defined as <tt>0</tt> the first time the function is called, but every time the function is called after that, the variable initialization will be
    ignored. So, if you then call this function like this:</p>
  <p class="code">for (var i = 0; i &lt; 10; ++i;)<br/> {
    <br/>     show_debug_message(counter());<br/> }
  </p>
  <p>The output will be:</p>
  <p class="code">0<br/> 1
    <br/> 2
    <br/> 3
    <br/> 4
    <br/> 5
    <br/> 6
    <br/> 7
    <br/> 8
    <br/> 9
  </p>
  <p>If you didn&#39;t use the <span class="inline">static</span> keyword here then the output would simply be <tt>0</tt> for every iteration of the loop, since the variable <span class="inline">num</span> will be getting defined as <tt>0</tt> every time
    the function is called before being returned. Note that a static variable can only be changed inside the original function, and returning it will simply give you a copy of its value - essentially the shared static variable can only be changed by the
    function that contains it.</p>
  <p>A static variable is always initialized at the top of the function, so no matter where you define a static variable in the function, it will always be available to be read and changed throughout the function (even if it&#39;s used before being defined).
    See the following example:</p>
  <p class="code">function add_health()<br/> {
    <br/>     my_health++;<br/>     show_debug_message(my_health);<br/>     static my_health = 1;<br/> }
  </p>
  <p>Here the static variable &quot;<tt>my_health</tt>&quot; is being changed and printed to the compiler output <em>before</em> being initialized. While that looks wrong, it is perfectly fine because static variables are initialized <em>before </em>any
    function code is executed. Note that if there are multiple static variables in a function, the order in which they were defined will be kept when they are initialized at the top.</p>
  <p>You can also use the <span class="inline">static</span> keyword within a function to create a <strong>static function</strong>, which - like with variables - simply means that the function will only be defined once, which is the first time the function
    is called, for example:</p>
  <p class="code">function(_x, _y) Vector2 constructor<br/> {
    <br/>     x = _x;<br/>     y = _y;<br/>
    <br/>     static Add = function( _other )<br/>     {<br/>         x += _other.x;<br/>         y += _other.y;<br/>     }<br/> }
  </p>
  <p>In the above example, the constructor function <tt><span class="inline">Vector2</span></tt> can be used to create a struct, and the struct will have some variables, one of which is the method variable <tt><span class="inline">Add</span></tt>. Since
    this variable has been defined as static, the function it contains will only be initialized <em>once </em>the first time the <span class="inline">Vector2</span> function is called, and all further structs created with this constructor will reference
    the function <span class="inline">Add</span> that was created initially, instead of creating a new function for each struct (for more information on structs and the <span class="inline">constructor</span> keyword please see <a href="../Structs.htm">here</a>).</p>
  <p>When using inheritance with constructors, any static variables in the child constructor will only be initialized once the parent constructor has been executed, so the child constructor&#39;s static variables will not override the parent&#39;s static
    variables. See the following example:</p>
  <p class="code">function Parent() constructor<br/> {
    <br/>     show_debug_message(value);<br/>     static value = 10;<br/> }
    <br/>
    <br/> function Child() : Parent() constructor<br/> {
    <br/>     show_debug_message(value);<br/>     static value = 20;<br/> }
    <br/>
    <br/> var _child = new Child();</p>
  <p>Calling the <tt>Child()</tt> constructor prints this to the output log:</p>
  <p class="code">10<br/> 20
  </p>
  <p>The first value is from the parent constructor, and the second is from the child constructor. This shows that the child&#39;s static variable <tt>value</tt> was not initialized until the parent constructor was finished, and that in each constructor
    the static variable was initialized before the <tt>show_debug_message()</tt> call.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../GML_Overview.htm">GML Overview</a></div>
        <div style="float:right">Next: <a href="../Structs.htm">Structs</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->
</body>
</html>