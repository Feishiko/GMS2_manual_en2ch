<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>buffer_write</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for buffer_write" />
  <meta name="rh-index-keywords" content="buffer_write,buffer_u8,buffer_s8,buffer_u16,buffer_s16,buffer_u32,buffer_s32,buffer_u64,buffer_f16,buffer_f32,buffer_f64,buffer_bool,buffer_string,buffer_text" />
  <meta name="search-keywords" content="buffer_write,buffer_u8,buffer_s8,buffer_u16,buffer_s16,buffer_u32,buffer_s32,buffer_u64,buffer_f16,buffer_f32,buffer_f64,buffer_bool,buffer_string,buffer_text" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>buffer_write</h1>
  <p>This function can be used to write data to a previously created buffer. The data you write must be in agreement with the &quot;type&quot; argument of this function, meaning that you can&#39;t try to write a string as an unsigned 16bit integer, for example.
    The following constants can be used to define the data type:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constant</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>buffer_u8</td>
        <td>An unsigned, 8bit integer. This is a positive value from 0 to 255.</td>
      </tr>
      <tr>
        <td>buffer_s8</td>
        <td>A signed, 8bit integer. This can be a positive or negative value from -128 to 127 (0 is classed as positive).</td>
      </tr>
      <tr>
        <td>buffer_u16</td>
        <td>An unsigned, 16bit integer. This is a positive value from 0 - 65,535.</td>
      </tr>
      <tr>
        <td>buffer_s16</td>
        <td>A signed, 16bit integer. This can be a positive or negative value from -32,768 to 32,767 (0 is classed as positive).</td>
      </tr>
      <tr>
        <td>buffer_u32</td>
        <td>An unsigned, 32bit integer. This is a positive value from 0 to 4,294,967,295.</td>
      </tr>
      <tr>
        <td>buffer_s32</td>
        <td>A signed, 32bit integer. This can be a positive or negative value from -2,147,483,648 to 2,147,483,647 (0 is classed as positive).</td>
      </tr>
      <tr>
        <td>buffer_u64</td>
        <td>An unsigned 64bit integer.</td>
      </tr>
      <tr>
        <td>buffer_f16</td>
        <td>A 16bit float. This can be a positive or negative value within the same range as a 16 bit signed integer.</td>
      </tr>
      <tr>
        <td>buffer_f32</td>
        <td>A 32bit float. This can be a positive or negative value within the same range as a 32 bit signed integer.</td>
      </tr>
      <tr>
        <td>buffer_f64</td>
        <td>A 64bit float.</td>
      </tr>
      <tr>
        <td>buffer_bool</td>
        <td>A boolean value. Can only be either 1 or 0 (<tt>true</tt> or <tt>false</tt>)</td>
      </tr>
      <tr>
        <td>buffer_string</td>
        <td>A string of any size, finalized with a null terminating character.</td>
      </tr>
      <tr>
        <td>buffer_text</td>
        <td>A string of any size, without the final null terminating character.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>The function will return 0 if it succeeds or -1 if it fails.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">buffer_write(buffer, type, value)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>buffer</td>
        <td>The index of the buffer to write to.</td>
      </tr>
      <tr>
        <td>type</td>
        <td>The type of data that is to be written to the buffer (see the list of constants above).</td>
      </tr>
      <tr>
        <td>value</td>
        <td>The data to write.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code">0 if success, or -1 if it fails</p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br/> buffer_write(buff, buffer_s16, 0);<br/> buffer_write(buff, buffer_s16, x);<br/> buffer_write(buff, buffer_s16, y);</p>
  <p>The above code finds the start of the buffer with the id stored in the variable &quot;buff&quot; them writes a series of signed 16bit integer values to it.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Buffers.htm">Buffers</a></div>
        <div style="float:right">Next: <a href="buffer_fill.htm">buffer_fill</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
buffer_write
buffer_u8
buffer_s8
buffer_u16
buffer_s16
buffer_u32
buffer_s32
buffer_u64
buffer_f16
buffer_f32
buffer_f64
buffer_bool
buffer_string
buffer_text
-->
  <!-- TAGS
buffer_write
-->
</body>
</html>