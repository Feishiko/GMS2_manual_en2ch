<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>network_send_packet</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for network_send_packet" />
  <meta name="rh-index-keywords" content="network_send_packet" />
  <meta name="search-keywords" content="network_send_packet" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>network_send_packet</h1>
  <p>With this function you can send a data &quot;packet&quot; through the network. The function takes the <i>socket id</i> to connect through and then you must supply the <i>buffer id</i> which contains the data to be sent (for more information on buffers
    see <a href="../Buffers/Buffers.htm">Reference - Buffers</a>) and finally the size (in bytes) of the data packet. Packets sent with this function are formatted such that the GameMaker Studio 2 game receiving the data can &quot;split&quot; the
    packets correctly, and the function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the final size of the data being sent that is returned by this function will also include the
    GameMaker header information, which is an additional 12 bytes.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">network_send_packet(socket, buffer, size);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>socket</td>
        <td>The id of the socket to use.</td>
      </tr>
      <tr>
        <td>buffer</td>
        <td>The id of the buffer to get the data from.</td>
      </tr>
      <tr>
        <td>size</td>
        <td>The size (in bytes) of the data.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">buff = buffer_load(&quot;player_save.dat&quot;);<br/> network_send_packet(sock, buff, buffer_get_size(buff));</p>
  <p>The above information loads a previously saved buffer data into memory and returns the buffer id to be stored in the variable &quot;buff&quot;. This complete buffer is then send as a packet over the network using the socket identified by the variable
    &quot;sock&quot;.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Networking.htm">Networking</a></div>
        <div style="float:right">Next: <a href="network_send_raw.htm">network_send_raw</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
network_send_packet
-->
  <!-- TAGS
network_send_packet
-->
</body>
</html>