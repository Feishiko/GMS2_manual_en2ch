<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>array_sort</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function array_sort" />
  <meta name="rh-index-keywords" content="array_sort" />
  <meta name="search-keywords" content="array_sort" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span>array_sort</span></h1>
  <p>With this function you can sort an array in ascending order or descending order or using a custom function to define the sort order. The function requires you to provide the array to sort, and then either of the following:</p>
  <ul class="colour">
    <li>The constants <span class="inline">true</span> or <span class="inline">false</span> to indicate <span>ascending (<span class="inline">true</span>) or descending (<span class="inline">false</span>) sort order</span>
    </li>
    <li>A custom function to define the sort order</li>
  </ul>
  <p>If you use a custom function for sorting, it must take 2 arguments which will receive the values of the current element and the next element respectively. The function should return any of the following values to affect the sort order (where <tt>elm1</tt> is
    the current element and <tt>elm2</tt> is the next element):</p>
  <ul class="colour">
    <li><tt>0</tt>: if <tt>elm1</tt> and <tt>elm2</tt> are equal</li>
    <li><tt>&lt;0</tt> (negative number): if <tt>elm1</tt> goes before <tt>elm2</tt></li>
    <li><tt>&gt;0</tt> (positive number): if <tt>elm1</tt> goes after <tt>elm2</tt></li>
  </ul>
  <p>If the array contains a set of strings, then the strings will be sorted alphabetically based on the English alphabet when using the default ascending/descending sort type. All other data types will be sorted based on their numerical value, the exact
    values of which will depend on the data type itself (for example, an array of buffers would be sorted based on the numerical value of their memory addresses).</p>
  <p>Note that this function will modify the contents of the original array that was supplied. To create a sorted copy, use <tt><a href="array_copy.htm">array_copy()</a></tt> to duplicate the array first, and then pass that into this function.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">array_sort(variable, sorttype_or_function);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>variable</td>
        <td>The variable that holds the array.</td>
      </tr>
      <tr>
        <td><span>sorttype_or_function<span> </span></span>
        </td>
        <td>The sort type (<span><span class="inline">true</span> for ascending or <span class="inline">false</span> for descending) or a function reference to use for sorting.</span>
        </td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code">N/A</p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">var _a = [10, 9, 8, 7, 6, 5];<br/>
    <br/> array_sort(_a, function(elm1, elm2)<br/>     {<br/>     return elm1 - elm2;<br/>     });</p>
  <p>The above code uses a custom sorting function to sort the array in an ascending order. The sorting function takes the two array elements as <tt>elm1</tt> and <tt>elm2</tt> and performs a subtraction on them. If <tt>elm1</tt> is greater than <tt>elm2</tt>,
    the subtraction results in a positive number which pushes <tt>elm1</tt> to be after <tt>elm2</tt>, hence putting them in an ascending order.</p>
  <p>Here is an extended example:</p>
  <p class="code">var _xx, _yy, _a;<br/> for (var i = 0; i &lt; 10; i++)<br/>     {<br/>     _xx = irandom(room_width);<br/>     _yy = irandom(room_height);<br/>     _a[i] = instance_create_layer(_xx, _yy, layer, obj_Bullet);<br/>     }<br/>
    <br/> show_debug_message(_a);
    <br/>
    <br/> var _f = function(inst1, inst2)<br/>     {<br/>     return inst1.x - inst2.x;<br/>     }<br/>
    <br/> array_sort(_a, _f);<br/> show_debug_message(_a);
  </p>
  <p>The above code will create an array of 10 instances placed at random positions within the room. The debug message will show something like the following:</p>
  <p class="code">[ 100003,100004,100005,100006,100007,100008,100009,100010,100011,100012 ]</p>
  <p>The code then creates a method to be used in the <span class="inline">array_sort()</span> function that returns the difference between each of the X positions of the instances in the room. Then the <span class="inline">array_sort()</span> function is
    run using that method, sorting the instances by X from lowest to highest. The output for the array would then look something like this:</p>
  <p class="code">[ 100011,100004,100009,100006,100012,100008,100010,100005,100007,100003 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Variable_Functions.htm">Variable Functions</a></div>
        <div style="float:right">Next: <a href="array_length.htm">array_length</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
array_sort
-->
  <!-- TAGS
array_sort
-->
</body>
</html>