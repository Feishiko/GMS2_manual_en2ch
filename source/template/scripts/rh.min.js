(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var consts = void 0;
var _window = window,
    rh = _window.rh;

var cache = {};

rh.consts = consts = function consts(key, value) {
  if (arguments.length === 1) {
    if (rh._debug) {
      if (!(key in cache)) {
        rh._d('error', 'consts', key + ' is not available');
      }
    }
    return cache[key];
  } else if (key in cache) {
    if (rh._debug) {
      return rh._d('error', 'consts', key + ' is already registered');
    }
  } else {
    return cache[key] = value;
  }
};

// Temp keys
consts('KEY_TEMP_DATA', '.temp.data');
consts('KEY_SHOW_TOC_BACK_BUTTON', '.p.show_toc_back_button');
// iframe keys
consts('KEY_SHARED_INPUT', '._sharedkeys.input');
consts('KEY_SHARED_OUTPUT', '._sharedkeys.output');
consts('KEY_IFRAME_EVENTS', '.l.iframe_events');

// Screen specific
consts('KEY_SCREEN', '.l.screen');
consts('KEY_DEFAULT_SCREEN', '.l.default_screen');
consts('KEY_SCREEN_NAMES', '.l.screen_names');
consts('KEY_SCREEN_DESKTOP', consts('KEY_SCREEN') + '.desktop.attached');
consts('KEY_SCREEN_TABLET', consts('KEY_SCREEN') + '.tablet.attached');
consts('KEY_SCREEN_TABLET_PORTRAIT', consts('KEY_SCREEN') + '.tablet_portrait.attached');
consts('KEY_SCREEN_PHONE', consts('KEY_SCREEN') + '.phone.attached');
consts('KEY_SCREEN_IOS', consts('KEY_SCREEN') + '.ios.attached');
consts('KEY_SCREEN_IPAD', consts('KEY_SCREEN') + '.ipad.attached');
consts('KEY_SCREEN_PRINT', consts('KEY_SCREEN') + '.print.attached');
// Events
consts('KEY_IS_RESPONSIVE', '.e.isresponsive');
consts('EVT_ORIENTATION_CHANGE', '.e.orientationchange');
consts('EVT_HASH_CHANGE', '.e.hashchange');
consts('EVT_WIDGET_BEFORELOAD', '.e.widget_beforeload');
consts('EVT_WIDGET_LOADED', '.e.widget_loaded');
consts('EVT_BEFORE_UNLOAD', '.e.before_unload');
consts('EVT_UNLOAD', '.e.unload');
consts('EVT_MOUSEMOVE', '.e.mousemove');
consts('EVT_SWIPE_DIR', '.e.swipe_dir');
consts('EVT_FAST_CLICK', '.e.fast_click');
consts('EVT_CLICK_INSIDE_IFRAME', '.e.click_inside_iframe');
consts('EVT_SCROLL_INSIDE_IFRAME', '.e.scroll_inside_iframe');
consts('EVT_INSIDE_IFRAME_DOM_CONTENTLOADED', 'e.inside_iframe_dom_contentloaded');
consts('EVT_RESIZE', '.e.resize');
consts('RHMAPNO', 'rhmapno');
consts('RHWINDOW', 'rhwnd');
consts('RHCSHMODE', 'rhcsh');
consts('TOPIC_FILE', 'topic.htm');
consts('HOME_PAGE', 'index.htm');

},{}],2:[function(require,module,exports){
"use strict";

var _window = window,
    rh = _window.rh;
var _ = rh._;


rh.controller = _.cache(_.isFunction);

},{}],3:[function(require,module,exports){
'use strict';

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;
var model = rh.model;


var loadWidgets = function loadWidgets(parentNode, parent) {
  return _.each($.find(parentNode, '[data-rhwidget]'), function (node) {
    if ($.dataset(node, 'loaded')) {
      return;
    } //it can be empty string on old browser
    if (!$.isDescendent(parentNode, node)) {
      return;
    } //ignore nested widget data
    var config = $.dataset(node, 'config');
    config = config ? _.resolveNiceJSON(config) : {};
    return _.each(_.resolveWidgetArgs($.dataset(node, 'rhwidget')), function (wInfo) {
      var wName = wInfo.wName,
          wArg = wInfo.wArg,
          pipedArgs = wInfo.pipedArgs,
          rawArg = wInfo.rawArg;

      if (wName[0] === wName[0].toLowerCase()) {
        //data widget
        config.rawArg = rawArg;
      } else {
        if (pipedArgs.length > 0) {
          config.pipedArgs = pipedArgs;
        }
        if (wArg) {
          _.extend(config, wArg);
        }
      }
      config.node = node;
      var wclass = rh.widgets[wName];
      var widget = new wclass(config);
      return widget.init(parent);
    });
  });
};

//data-rhtags is synthatic suger(shortcut) for data-rhwidgets='ContentFilter' and
// data-config='{"id": "1"}'
var loadContentFilter = function loadContentFilter(parentNode) {
  return function () {
    var result = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Array.from($.find(parentNode, '[data-rhtags]'))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var node = _step.value;

        var widget;
        if (!$.isDescendent(parentNode, node)) {
          continue;
        } //ignore nested widget data
        var config = $.dataset(node, 'config');
        config = config ? _.resolveNiceJSON(config) : {};
        config.ids = $.dataset(node, 'rhtags').split(',');
        config.node = node;
        result.push(widget = new rh.widgets.ContentFilter(config));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  }();
};

var loadDataHandlers = function loadDataHandlers(parentNode, parent) {
  loadWidgets(parentNode, parent);
  return loadContentFilter(parentNode);
};

_.loadWidgets = loadWidgets;
_.loadContentFilter = loadContentFilter;
_.loadDataHandlers = loadDataHandlers;

},{}],4:[function(require,module,exports){
'use strict';

var _window = window,
    rh = _window.rh;
var _ = rh._;


rh._params = _.urlParams();
rh._debugFilter = _.toRegExp(rh._params.rh_debug);
rh._debug = false;

rh._testFilter = _.toRegExp(rh._params.rh_test);
rh._test = false;

rh._errorFilter = _.toRegExp(rh._params.rh_error);
rh._error = false;

rh._breakFilter = _.toRegExp(rh._params.rh_break);
rh._break = false;

var matchFilter = function matchFilter(messages, filter) {
  return messages.join(' ').match(filter);
};

rh._d = function () {
  var _window2 = window,
      console = _window2.console;

  if (rh._debug && console && _.isFunction(console.log)) {
    var fn = void 0;
    var args = [];var i = -1;
    while (++i < arguments.length) {
      args.push(arguments[i]);
    }
    if (['info', 'log', 'warn', 'debug', 'error'].indexOf(args[0]) > -1) {
      fn = console[args[0]];
      args = args.slice(1);
    } else {
      fn = console.debug;
    }

    var newArgs = ['[ ' + args[0] + ' ]:'].concat(args.slice(1));
    if (rh._debugFilter === '' || matchFilter(newArgs, rh._debugFilter)) {
      if (rh._error && matchFilter(newArgs, rh._errorFilter)) {
        return console.error.apply(console, newArgs);
      } else {
        return fn.apply(console, newArgs);
      }
    }
  }
};

},{}],5:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;

var Guard = function () {
  function Guard() {
    _classCallCheck(this, Guard);

    this.guard = this.guard.bind(this);
  }

  _createClass(Guard, [{
    key: "guard",
    value: function guard(fn, guardName) {
      if (this.guardedNames == null) {
        this.guardedNames = [];
      }
      if (this.guardedNames.indexOf(guardName) === -1) {
        this.guardedNames.push(guardName);
        fn.call(this);
        return this.guardedNames.splice(this.guardedNames.indexOf(guardName), 1);
      }
    }
  }]);

  return Guard;
}();

rh.Guard = Guard;
rh.guard = new Guard().guard;

},{}],6:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;


var defaultOpts = { async: true };

var formData = rh.formData = function (opts) {
  var form_data = new window.FormData();
  _.each(opts, function (value, key) {
    return form_data.append(key, value);
  });
  return form_data;
};

//private class of http api

var Response = function () {
  function Response(xhr, opts) {
    _classCallCheck(this, Response);

    this.onreadystatechange = this.onreadystatechange.bind(this);
    this.xhr = xhr;
    this.opts = opts;
    if (this.opts.success != null) {
      this.success(this.opts.success);
    }
    if (this.opts.error != null) {
      this.error(this.opts.error);
    }
    this.xhr.onreadystatechange = this.onreadystatechange;
  }

  _createClass(Response, [{
    key: 'onreadystatechange',
    value: function onreadystatechange() {
      var _this = this;

      if (this.xhr.readyState !== 4) {
        return;
      }

      var text = this.xhr.responseText;
      var status = this.xhr.status;

      var headers = function headers(name) {
        return _this.xhr.getResponseHeader(name);
      };

      if (this.isSuccess(status)) {
        if (this.successFn) {
          this.successFn(text, status, headers, this.opts);
        }
      } else {
        if (this.errorFn) {
          this.errorFn(text, status, headers, this.opts);
        }
      }

      if (this.finallyFn) {
        return this.finallyFn(text, status, headers, this.opts);
      }
    }
  }, {
    key: 'isSuccess',
    value: function isSuccess(status) {
      return status >= 200 && status < 300 || status === 304;
    }
  }, {
    key: 'success',
    value: function success(fn) {
      this.successFn = fn;
      return this;
    }
  }, {
    key: 'error',
    value: function error(fn) {
      this.errorFn = fn;
      return this;
    }
  }, {
    key: 'finally',
    value: function _finally(fn) {
      this.finallyFn = fn;
      return this;
    }
  }]);

  return Response;
}();

var createRequest = function createRequest(opts) {
  var XHR = window.XMLHttpRequest || window.ActiveXObject('Microsoft.XMLHTTP');
  var xhr = new XHR();
  var response = new Response(xhr, opts);
  return { xhr: xhr, response: response };
};

// http apis
var apiClient = rh.apiClient = function (opts) {
  opts = _.extend({}, defaultOpts, opts);

  var _createRequest = createRequest(opts),
      xhr = _createRequest.xhr,
      response = _createRequest.response;

  xhr.open(opts.method, opts.url, opts.async);

  if (opts['Content-type']) {
    xhr.setRequestHeader('Content-type', opts['Content-type']);
  }

  xhr.send(opts.data);
  return response;
};

apiClient.get = function (url, opts) {
  return apiClient(_.extend({ url: url, method: 'GET' }, opts));
};

apiClient.post = function (url, data, opts) {
  return apiClient(_.extend({ url: url, method: 'POST', data: data }, opts));
};

apiClient.put = function (url, data, opts) {
  return apiClient(_.extend({ url: url, method: 'PUT', data: data }, opts));
};

apiClient.jsonp = function (url, opts) {
  opts = _.extend({}, defaultOpts, opts);
  var node = $('script', 0) || document.head.children[0];
  var newNode = document.createElement('script');
  newNode.async = opts.async;
  newNode.src = url;
  return node.parentNode.insertBefore(newNode, node);
};

},{}],7:[function(require,module,exports){
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;
var consts = rh.consts;

var Iframe = function (_rh$Guard) {
  _inherits(Iframe, _rh$Guard);

  _createClass(Iframe, [{
    key: 'toString',
    value: function toString() {
      return 'Iframe';
    }
  }]);

  function Iframe() {
    _classCallCheck(this, Iframe);

    var _this = _possibleConstructorReturn(this, (Iframe.__proto__ || Object.getPrototypeOf(Iframe)).call(this));

    _this.unsubscribe = _this.unsubscribe.bind(_this);
    _this.linkedSubs = {};
    if (_.isIframe()) {
      rh.model.subscribe(consts('EVT_BEFORE_UNLOAD'), _this.unsubscribe);
      rh.model.subscribe(consts('EVT_UNLOAD'), _this.unsubscribe);
    }
    return _this;
  }

  _createClass(Iframe, [{
    key: 'unsubscribe',
    value: function unsubscribe() {
      if (this.parent) {
        var msg = { id: this.id };
        this.parent.postMessage({ rhmodel_unsubscribe: msg }, _.getOrigin(this.parent));
        return this.parent = undefined;
      }
    }
  }, {
    key: 'init',
    value: function init() {
      if (this.id == null) {
        this.id = _.uniqueId();
      }
      this.parent = window.parent;
      if (_.isIframe()) {
        var input = rh.model.get('_sharedkeys.input');
        if (input) {
          var inputKeys = _.map(input, function (item) {
            if (_.isString(item)) {
              return { key: item };
            } else {
              return item;
            }
          });
          var msg = { input: inputKeys, id: this.id };
          this.parent.postMessage({ rhmodel_subscribe: msg }, _.getOrigin(this.parent));
        }
        var outputKeys = rh.model.get('_sharedkeys.output');
        if (outputKeys) {
          return this.linkModel(this.parent, this.id, outputKeys);
        }
      }
    }
  }, {
    key: 'clean',
    value: function clean(id) {
      var subs = this.linkedSubs[id];
      if (subs) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Array.from(subs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var unsub = _step.value;
            unsub();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return delete this.linkedSubs[id];
      }
    }
  }, {
    key: 'linkModel',
    value: function linkModel(source, id, keys) {
      var _this2 = this;

      if (keys == null) {
        keys = [];
      }
      var subs = [];
      var callback = function callback(value, key) {
        return _this2.guard(function () {
          var msg = {};msg[key] = value;
          return source.postMessage({ rhmodel_publish: msg }, _.getOrigin(source));
        }, id);
      };
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Array.from(keys)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var key = _step2.value;

          key = key.trim();
          subs.push(rh.model.subscribe(key, callback));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.clean(id);
      return this.linkedSubs[id] = subs;
    }
  }, {
    key: 'publish',
    value: function publish(key, value, opts) {
      if (opts == null) {
        opts = {};
      }
      return this.guard(function () {
        return rh.model.publish(key, value, opts);
      });
    }
  }, {
    key: 'guard',
    value: function guard(fn, guardName) {
      if (guardName == null) {
        guardName = this.id;
      }
      return _get(Iframe.prototype.__proto__ || Object.getPrototypeOf(Iframe.prototype), 'guard', this).call(this, fn, guardName);
    }
  }]);

  return Iframe;
}(rh.Guard);

rh.iframe = new Iframe();

},{}],8:[function(require,module,exports){
'use strict';

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;
var consts = rh.consts;


var head = $('head', 0);
var style = document.createElement('style');
style.innerHTML = '.rh-hide:not(.rh-animate){display:none !important;}';
head.insertBefore(style, head.childNodes[0]);

_.addEventListener(document, 'DOMContentLoaded', _.one(function () {
  rh.model.publish(consts('EVT_WIDGET_BEFORELOAD'), true, { sync: true });

  _.loadWidgets(document);

  _.loadContentFilter(document);

  return rh.model.publish(consts('EVT_WIDGET_LOADED'), true, { sync: true });
}));

_.addEventListener(window, "resize", function () {
  rh.model.publish(consts('EVT_RESIZE'), true);
});

if (_.isIframe()) {
  _.addEventListener(window, 'beforeunload', function () {
    rh.model.publish(consts('EVT_BEFORE_UNLOAD'), true, { sync: true });
    return undefined;
  });

  _.addEventListener(window, 'unload', function (event) {
    rh.model.publish(consts('EVT_UNLOAD'), true, { sync: true });
    return undefined;
  });
}

},{}],9:[function(require,module,exports){
'use strict';

var _window = window,
    rh = _window.rh;
var _ = rh._;


_.addEventListener(window, 'message', function (e) {
  var config = void 0,
      key = void 0;
  if (!_.isSameOrigin(e.origin)) {
    return;
  }

  var data = e.data;

  if (!_.isObject(data)) {
    return;
  }

  if (data.rhmodel_publish) {
    config = data.rhmodel_publish;
    if (config) {
      for (key in config) {
        var value = config[key];rh.iframe.publish(key, value, { sync: true });
      }
    }
  }

  if (data.rhmodel_subscribe) {
    config = data.rhmodel_subscribe;
    var input = config.input || [];
    var topContainer = !rh.model.get('_sharedkeys.input');
    var keys = _.reduce(input, function (result, item) {
      if (topContainer || item.nested !== false) {
        result.push(item.key);
      }
      return result;
    }, []);
    if (keys != null ? keys.length : undefined) {
      rh.iframe.linkModel(e.source, config.id, keys);
    }
  }

  if (data.rhmodel_unsubscribe) {
    config = data.rhmodel_unsubscribe;
    return rh.iframe.clean(config.id);
  }
});

},{}],10:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var consts = rh.consts;

// ChildNode private class for Model

var ChildNode = function () {
  function ChildNode(subscribers, children) {
    _classCallCheck(this, ChildNode);

    if (subscribers == null) {
      subscribers = [];
    }
    this.subscribers = subscribers;
    if (children == null) {
      children = {};
    }
    this.children = children;
  }

  // TODO: add key.* support in get


  _createClass(ChildNode, [{
    key: 'getSubscribers',
    value: function getSubscribers(keys, path, value, subs) {
      if (keys.length > 1) {
        var child = void 0;
        subs.push({ fnsInfo: this.subscribers, key: path, value: value });
        var childKey = keys[1];
        if (child = this.children[childKey]) {
          var newPath = path + '.' + childKey;
          child.getSubscribers(keys.slice(1), newPath, value != null ? value[childKey] : undefined, subs);
        }
      } else if (keys.length > 0) {
        this._getAllChildSubscribers(path, value, subs);
      }
      return subs;
    }
  }, {
    key: 'addSubscribers',
    value: function addSubscribers(fn, keys, opts) {
      if (keys.length === 1) {
        return this.subscribers.push([fn, opts]);
      } else if (keys.length > 1) {
        var childKey = keys[1];
        if (this.children[childKey] == null) {
          this.children[childKey] = new ChildNode();
        }
        return this.children[childKey].addSubscribers(fn, keys.slice(1), opts);
      }
    }
  }, {
    key: 'removeSubscriber',
    value: function removeSubscriber(fn, keys) {
      if (keys.length === 1) {
        return this._deleteSubscriber(fn);
      } else if (keys.length > 1) {
        return this.children[keys[1]].removeSubscriber(fn, keys.slice(1));
      }
    }
  }, {
    key: '_deleteSubscriber',
    value: function _deleteSubscriber(fn) {
      var index = _.findIndex(this.subscribers, function (item) {
        return item[0] === fn;
      });
      if (index != null && index !== -1) {
        return this.subscribers.splice(index, 1);
      } else if (rh._debug) {
        return rh._d('error', '_unsubscribe', this + '.{key} is not subscribed with ' + fn);
      }
    }
  }, {
    key: '_getAllChildSubscribers',
    value: function _getAllChildSubscribers(path, value, subs) {
      subs.push({ fnsInfo: this.subscribers, key: path, value: value });
      if (this.children) {
        if (value == null) {
          value = {};
        }
        for (var key in this.children) {
          var child = this.children[key];
          child._getAllChildSubscribers(path + '.' + key, value[key], subs);
        }
      }
      return subs;
    }
  }]);

  return ChildNode;
}();

//RootNode prive class for Model


var RootNode = function (_ChildNode) {
  _inherits(RootNode, _ChildNode);

  function RootNode(subscribers, children, data) {
    var _this;

    _classCallCheck(this, RootNode);

    var _this = _possibleConstructorReturn(this, (RootNode.__proto__ || Object.getPrototypeOf(RootNode)).call(this));

    _this.subscribers = subscribers;
    _this.children = children;
    if (data == null) {
      data = {};
    }
    _this.data = data;
    return _this = _possibleConstructorReturn(this, (RootNode.__proto__ || Object.getPrototypeOf(RootNode)).call(this, _this.subscribers, _this.childs));
  }

  _createClass(RootNode, [{
    key: 'getSubscribers',
    value: function getSubscribers(keys) {
      var childKey = keys[0];
      var child = this.children[childKey];
      if (child) {
        return child.getSubscribers(keys, '' + keys[0], this.data[keys[0]], []);
      } else {
        return [];
      }
    }
  }, {
    key: 'addSubscribers',
    value: function addSubscribers(fn, keys, opts) {
      var childKey = keys[0];
      if (this.children[childKey] == null) {
        this.children[childKey] = new ChildNode();
      }
      return this.children[childKey].addSubscribers(fn, keys, opts);
    }
  }, {
    key: 'removeSubscriber',
    value: function removeSubscriber(fn, keys) {
      var childKey = keys[0];
      return this.children[childKey] != null ? this.children[childKey].removeSubscriber(fn, keys) : undefined;
    }
  }, {
    key: 'getData',
    value: function getData(keys) {
      var value = void 0;
      var data = this.data;

      for (var index = 0; index < keys.length; index++) {
        var key = keys[index];
        if (_.isDefined(data)) {
          if (index === keys.length - 1) {
            value = data[key];
          } else {
            data = data[key];
          }
        } else {
          break;
        }
      }
      return value;
    }
  }, {
    key: 'setData',
    value: function setData(keys, value) {
      //a.b a.*
      var data = this.data;

      for (var index = 0; index < keys.length; index++) {
        var key = keys[index];
        if (index === keys.length - 1) {
          data[key] = value;
        } else {
          if (!_.isDefined(data[key])) {
            data[key] = {};
          }
          data = data[key];
        }
      }
    }
  }]);

  return RootNode;
}(ChildNode);

// Model class to read write local data using publish subscribe pattern


var Model = function () {
  var _count = undefined;
  Model = function () {
    _createClass(Model, [{
      key: 'toString',
      value: function toString() {
        return 'Model_' + this._count;
      }
    }], [{
      key: 'initClass',
      value: function initClass() {

        // private static variable
        _count = 0;
      }
    }]);

    function Model() {
      _classCallCheck(this, Model);

      this._rootNode = new RootNode();

      this._count = _count;
      _count += 1;
    }

    _createClass(Model, [{
      key: 'get',
      value: function get(key) {
        var value = void 0;
        if (this._isForGlobal(key)) {
          return rh.model.get(key);
        }

        if (_.isString(key)) {
          value = this._rootNode.getData(this._getKeys(key));
        } else {
          rh._d('error', 'Get', this + '.' + key + ' is not a string');
        }

        if (rh._debug) {
          rh._d('log', 'Get', this + '.' + key + ': ' + JSON.stringify(value));
        }

        return value;
      }
    }, {
      key: 'cget',
      value: function cget(key) {
        return this.get(consts(key));
      }

      // TODO: add options to detect change then only trigger the event

    }, {
      key: 'publish',
      value: function publish(key, value, opts) {
        var _this2 = this;

        if (opts == null) {
          opts = {};
        }
        if (this._isForGlobal(key)) {
          return rh.model.publish(key, value, opts);
        }
        if (rh._debug) {
          rh._d('log', 'Publish', this + '.' + key + ': ' + JSON.stringify(value));
        }
        if (_.isString(key)) {
          this._rootNode.setData(this._getKeys(key), value);
          var subs = this._rootNode.getSubscribers(this._getKeys(key));
          var keyLength = key[0] === '.' ? key.length - 1 : key.length;
          var filteredSubs = _.map(subs, function (sub) {
            var fnsInfo = _.filter(sub.fnsInfo, function (fnInfo) {
              return _.isDefined(fnInfo[0]) && (fnInfo[1].partial !== false || sub.key.length >= keyLength);
            });
            return {
              key: sub.key,
              value: sub.value,
              fns: _.map(fnsInfo, function (fnInfo) {
                return fnInfo[0];
              })
            };
          });

          _.each(filteredSubs, function (sub) {
            return _.each(sub.fns, function (fn) {
              if (rh._debug) {
                rh._d('log', 'Publish call', _this2 + '.' + sub.key + ': ' + JSON.stringify(sub.value));
              }
              var unsub = function unsub() {
                return _this2._unsubscribe(sub.key, fn);
              };
              if (opts.sync) {
                return fn(sub.value, sub.key, unsub);
              } else {
                return rh._.defer(fn, sub.value, sub.key, unsub);
              }
            });
          });
        } else {
          rh._d('error', 'Publish', this + '.' + key + ' is not a string');
        }
      }
    }, {
      key: 'cpublish',
      value: function cpublish(key, value, opts) {
        return this.publish(consts(key), value, opts);
      }
    }, {
      key: 'isSubscribed',
      value: function isSubscribed(key) {
        var found = void 0;
        if (this._isForGlobal(key)) {
          return rh.model.isSubscribed(key);
        }
        if (key[0] === '.') {
          key = key.substring(1);
        }
        var subs = this._rootNode.getSubscribers(this._getKeys(key));
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Array.from(subs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var sub = _step.value;
            if (sub.key === key) {
              found = true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return found === true;
      }
    }, {
      key: 'cisSubscribed',
      value: function cisSubscribed(key) {
        return this.isSubscribed(consts(key));
      }
    }, {
      key: 'subscribeOnce',
      value: function subscribeOnce(key, fn, opts) {
        var _this3 = this;

        if (opts == null) {
          opts = {};
        }
        var keys = _.isString(key) ? [key] : key;
        return this._subscribe(keys.splice(0, 1)[0], function (value, key, unsub) {
          if (keys.length === 0) {
            fn(value, key);
          } else {
            _this3.subscribeOnce(keys, fn, opts);
          }
          return unsub();
        }, opts);
      }
    }, {
      key: 'csubscribeOnce',
      value: function csubscribeOnce(key, fn, opts) {
        return this.subscribeOnce(consts(key), fn, opts);
      }
    }, {
      key: 'subscribe',
      value: function subscribe(key, fn, opts) {
        var _this4 = this;

        if (opts == null) {
          opts = {};
        }
        if (_.isString(key)) {
          return this._subscribe(key, fn, opts);
        } else {
          var unsubs = _.map(key, function (item) {
            return _this4._subscribe(item, fn, opts);
          });
          return function () {
            return _.each(unsubs, function (unsub) {
              return unsub();
            });
          };
        }
      }
    }, {
      key: 'csubscribe',
      value: function csubscribe(key, fn, opts) {
        return this.subscribe(consts(key), fn, opts);
      }
    }, {
      key: '_subscribe',
      value: function _subscribe(key, fn, opts) {
        var _this5 = this;

        if (opts == null) {
          opts = {};
        }
        if (this._isForGlobal(key)) {
          return rh.model.subscribe(key, fn, opts);
        }
        if (rh._debug) {
          rh._d('log', 'Subscribe', this + '.' + key);
        }

        this._rootNode.addSubscribers(fn, this._getKeys(key), opts);
        var value = this._rootNode.getData(this._getKeys(key));
        var unsub = function unsub() {
          return _this5._unsubscribe(key, fn);
        };
        if (opts.forceInit || value != null && !opts.initDone) {
          fn(value, key, unsub);
        }
        return unsub;
      }
    }, {
      key: '_unsubscribe',
      value: function _unsubscribe(key, fn) {
        if (this._isForGlobal(key)) {
          return rh.model._unsubscribe(key);
        }
        if (rh._debug) {
          rh._d('log', '_Unsubscribe', this + '.' + key);
        }
        return this._rootNode.removeSubscriber(fn, this._getKeys(key));
      }
    }, {
      key: 'isGlobal',
      value: function isGlobal() {
        return this === rh.model;
      }
    }, {
      key: 'isGlobalKey',
      value: function isGlobalKey(key) {
        return key && key[0] === '.';
      }
    }, {
      key: '_isForGlobal',
      value: function _isForGlobal(key) {
        return !this.isGlobal() && this.isGlobalKey(key);
      }
    }, {
      key: '_getKeys',
      value: function _getKeys(fullKey) {
        var keys = fullKey.split('.');
        if (keys[0] === '') {
          keys = keys.slice(1);
        } //strip first global key .
        if (rh._debug && keys.length === 0) {
          rh._d('error', 'Model', this + '.' + fullKey + ' is invalid');
        }
        return keys;
      }
    }]);

    return Model;
  }();
  Model.initClass();
  return Model;
}();

//global object
rh.Model = Model;
rh.model = new Model();
rh.model.toString = function () {
  return 'GlobalModel';
};

},{}],11:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var $ = rh.$;
var _ = rh._;

var NodeHolder = function () {
  function NodeHolder(nodes) {
    _classCallCheck(this, NodeHolder);

    this.nodes = nodes;
  }

  _createClass(NodeHolder, [{
    key: 'isVisible',
    value: function isVisible(node) {
      if (node == null) {
        node = this.nodes[0];
      }
      return !$.hasClass(node, 'rh-hide');
    }
  }, {
    key: 'show',
    value: function show() {
      return _.each(this.nodes, function (node) {
        if (!this.isVisible(node)) {
          $.removeClass(node, 'rh-hide');
          return node.hidden = false;
        }
      }, this);
    }
  }, {
    key: 'hide',
    value: function hide() {
      return _.each(this.nodes, function (node) {
        if (this.isVisible(node)) {
          $.addClass(node, 'rh-hide');
          return node.hidden = true;
        }
      }, this);
    }
  }, {
    key: 'accessible',
    value: function accessible(flag) {
      return _.each(this.nodes, function (node) {
        return node.hidden = flag;
      });
    }
  }, {
    key: 'updateClass',
    value: function updateClass(newClasses) {
      if (this.oldClasses == null) {
        this.oldClasses = [];
      }
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Array.from(this.nodes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var node = _step.value;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = Array.from(this.oldClasses)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var className = _step2.value;
              $.removeClass(node, className);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = Array.from(newClasses)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              className = _step3.value;

              if (className.length > 0) {
                $.addClass(node, className);
                this.oldClasses.push(className);
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'updateNodes',
    value: function updateNodes(newNodes) {
      var firstNode = this.nodes[0];
      var parentNode = firstNode.parentNode;
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = Array.from(newNodes)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var node = _step4.value;
          parentNode.insertBefore(node, firstNode);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = Array.from(this.nodes)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          node = _step5.value;
          parentNode.removeChild(node);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return this.nodes = newNodes;
    }
  }]);

  return NodeHolder;
}();

rh.NodeHolder = NodeHolder;

},{}],12:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;

var Plugin = function () {
  function Plugin() {
    _classCallCheck(this, Plugin);
  }

  _createClass(Plugin, [{
    key: 'attachOwner',
    value: function attachOwner(obj) {
      if (this._ownerFns == null) {
        this._ownerFns = {};
      }
      if (this.hasOwner()) {
        this.detach(this.owner);
      }
      this.owner = obj;
      if (this._overrideNames) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Array.from(this._overrideNames)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var fnName = _step.value;
            this._overrideOwnerFn(fnName);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      return this.ownerIsChanged();
    }
  }, {
    key: 'detachOwner',
    value: function detachOwner() {
      if (this.hasOwner()) {
        if (this._ownerFns) {
          for (var fnName in this._ownerFns) {
            this._restoreOwnerFn(fnName);
          }
        }
        this.owner = null;
        this._ownerFns = {};
        return this.ownerIsChanged();
      }
    }

    // plugin should override this method to get the notification of owoner change

  }, {
    key: 'ownerIsChanged',
    value: function ownerIsChanged() {}
  }, {
    key: 'hasOwner',
    value: function hasOwner() {
      return this.owner != null;
    }
  }, {
    key: 'addOverrides',
    value: function addOverrides(fnNames) {
      var _this = this;

      if (this._overrideNames == null) {
        this._overrideNames = [];
      }
      return function () {
        var result = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = Array.from(fnNames)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var fnName = _step2.value;

            _this._overrideNames.push(fnName);
            result.push(_this._overrideOwnerFn(fnName));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return result;
      }();
    }
  }, {
    key: 'removeOverrides',
    value: function removeOverrides(fnNames) {
      var _this2 = this;

      return function () {
        var result = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = Array.from(fnNames)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var fnName = _step3.value;

            _this2._restoreOwnerFn(fnName);
            var index = _this2._overrideNames.indexOf(fnName);
            if (index > -1) {
              result.push(_this2._overrideNames.splice(index, 1));
            } else {
              result.push(undefined);
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return result;
      }();
    }
  }, {
    key: '_overrideOwnerFn',
    value: function _overrideOwnerFn(fnName) {
      if (this.hasOwner()) {
        var ownerFn = this.owner[fnName];
        this._ownerFns[fnName] = ownerFn;
        return this.owner[fnName] = function () {
          var _this3 = this;

          var args = [];var i = -1;
          while (++i < arguments.length) {
            args.push(arguments[i]);
          }
          var bindedFn = function bindedFn(newArgs) {
            return __guardMethod__(ownerFn, 'apply', function (o) {
              return o.apply(_this3.owner, newArgs);
            });
          };
          return this[fnName](bindedFn, args);
        }.bind(this);
      }
    }
  }, {
    key: '_restoreOwnerFn',
    value: function _restoreOwnerFn(fnName) {
      if (this.hasOwner()) {
        this.owner[fnName] = this._ownerFns[fnName];
        return delete this._ownerFns[fnName];
      }
    }
  }]);

  return Plugin;
}();

rh.Plugin = Plugin;

function __guardMethod__(obj, methodName, transform) {
  if (typeof obj !== 'undefined' && obj !== null && typeof obj[methodName] === 'function') {
    return transform(obj, methodName);
  } else {
    return undefined;
  }
}

},{}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _window = window,
    rh = _window.rh;
var _ = rh._;


var $ = rh.$ = rh.query = function (selector, index) {
  if (index != null && index === 0) {
    return document.querySelector(selector);
  } else {
    var nodeList = document.querySelectorAll(selector);
    if (index != null && index < nodeList.length) {
      return nodeList[index];
    } else {
      return nodeList;
    }
  }
};

//arguments
// (parent, selector) ->
// or (selector) ->
$.find = function () {
  var parent = void 0,
      selector = void 0;
  if (arguments.length > 1) {
    parent = arguments[0];
    selector = arguments[1];
  } else {
    parent = document;
    selector = arguments[0];
  }
  return parent.querySelectorAll(selector);
};

$.traverseNode = function (node, preChild, postChild, onChild, context) {
  if (context == null) {
    context = window;
  }
  if (preChild && preChild.call(context, node)) {
    $.eachChildNode(node, function (child) {
      if (!onChild || onChild.call(context, child)) {
        return $.traverseNode(child, preChild, postChild, onChild, context);
      }
    });
    if (postChild) {
      postChild.call(context, node);
    }
  }
  return node;
};

$.eachChildNode = function (parent, fn, context) {
  if (context == null) {
    context = window;
  }
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Array.from(parent.children)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var child = _step.value;
      fn.call(context, child);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

$.eachChild = function (parent, selector, fn, context) {
  if (context == null) {
    context = window;
  }
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = Array.from(this.find(parent, selector))[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var node = _step2.value;

      fn.call(context, node);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
};

$.eachDataNode = function (parent, dataAttr, fn, context) {
  if (context == null) {
    context = window;
  }
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = Array.from(this.find(parent, '[data-' + dataAttr + ']'))[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var node = _step3.value;

      fn.call(context, node, $.dataset(node, dataAttr));
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
};

$.eachAttributes = function (node, fn, context) {
  var infos = Array.from(node.attributes).map(function (attr) {
    return [attr.specified, attr.name, attr.value];
  });
  var i = -1;
  while (++i < infos.length) {
    //here length can be increased in between
    var info = infos[i];
    if (info[0] !== false) {
      fn.call(context || window, info[1], info[2], infos);
    }
  }
};

$.getAttribute = function (node, attrName) {
  if (node.getAttribute != null) {
    return node.getAttribute(attrName);
  }
};

$.setAttribute = function (node, attrName, value) {
  if (node.setAttribute != null) {
    return node.setAttribute(attrName, value);
  }
};

$.removeAttribute = function (node, attrName) {
  if (node.removeAttribute != null) {
    return node.removeAttribute(attrName);
  }
};

$.hasAttribute = function (node, attrName) {
  if (node.hasAttribute != null) {
    return node.hasAttribute(attrName);
  } else {
    return false;
  }
};

$.dataset = function (node, attrName, value) {
  if (arguments.length === 3) {
    if (value !== null) {
      return $.setAttribute(node, 'data-' + attrName, value);
    } else {
      return $.removeAttribute(node, 'data-' + attrName);
    }
  } else {
    return $.getAttribute(node, 'data-' + attrName);
  }
};

$.isDescendent = function (parent, child) {
  var node = child.parentNode;
  while (true) {
    if (!node || node === parent) {
      break;
    }
    node = node.parentNode;
  }
  return node === parent;
};

$.addClass = function (node, className) {
  if (node.classList != null) {
    return node.classList.add(className);
  } else {
    return node.className = node.className + ' ' + className;
  }
};

$.addStyle = function (node, attribute, value) {
  if (node && node.style) {
    node.style[attribute] = value;
  }
};

$.removeClass = function (node, className) {
  if (node.classList != null) {
    return node.classList.remove(className);
  } else {
    return node.className = node.className.replace(className, '');
  }
};

$.hasClass = function (node, className) {
  if (node.classList != null) {
    return node.classList.contains(className);
  } else if (node.className) {
    return node.className.match(new RegExp(className + '($| )')) !== null;
  }
};

$.toggleClass = function (node, className) {
  if ($.hasClass(node, className)) {
    return $.removeClass(node, className);
  } else {
    return $.addClass(node, className);
  }
};

$.computedStyle = function (node) {
  return node.currentStyle || window.getComputedStyle(node, null);
};

$.isElementNode = function (node) {
  return node && node.nodeType === Node.ELEMENT_NODE;
};

$.isVisibleNode = function (node) {
  var computedStyle = $.computedStyle(node);
  return 'none' !== computedStyle['display'] && !_.isZeroCSSValue(computedStyle['opacity']) && !_.isZeroCSSValue(computedStyle['max-height']);
};

$.textContent = function (node, content) {
  if (arguments.length === 2) {
    if (node.textContent != null) {
      return node.textContent = content;
    } else {
      return node.innerText = content;
    }
  } else {
    return node.textContent || node.innerText;
  }
};

$.innerHTML = function (node, content) {
  if (arguments.length === 2) {
    return node.innerHTML = content;
  } else {
    return node.innerHTML;
  }
};

$.css = function (node, styleName, value) {
  if (arguments.length === 3) {
    return node.style[styleName] = value;
  } else {
    return node.style[styleName];
  }
};

$.nodeName = function (node) {
  return node.nodeName;
};

$.pageHeight = function () {
  var height = void 0;
  var de = document.documentElement;
  if (de) {
    height = de.scrollHeight || de.clientHeight || de.offsetHeight;
  }
  if (!height) {
    height = window.innerHeight;
  }
  var _document = document,
      body = _document.body;

  var bodyHeight = body.scrollHeight || body.clientHeight || body.offsetHeight;
  height = Math.max(height, bodyHeight);
  return height + 'px';
};

$.pageWidth = function () {
  var width = void 0;
  var de = document.documentElement;
  if (de) {
    width = de.scrollWidth || de.clientWidth || de.offsetWidth;
  }
  if (!width) {
    width = window.innerWidth;
  }
  var _document2 = document,
      body = _document2.body;

  var bodyWidth = body.scrollWidth || body.clientWidth || body.offsetWidth;
  width = Math.max(width, bodyWidth);
  return width + 'px';
};

$.createElement = function (tag, innerHtml) {
  var tagNode = document.createElement(tag);
  tagNode.innerHTML = innerHtml;
  return tagNode;
};

exports.default = $;

},{}],14:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var consts = rh.consts;
var model = rh.model;

var Responsive = function () {
  _createClass(Responsive, [{
    key: 'toString',
    value: function toString() {
      return 'Responsive';
    }
  }]);

  function Responsive() {
    var _this = this;

    _classCallCheck(this, Responsive);

    this.subs = [];
    model.subscribe(consts('EVT_ORIENTATION_CHANGE'), function () {
      return _.each(_this.subs, function (sub) {
        return sub.eventHandler(sub.mql);
      });
    });

    if (rh._debug && !this.isSupported()) {
      rh._d('error', 'Browser Issue', 'matchMedia is not supported.');
    }
  }

  _createClass(Responsive, [{
    key: 'isSupported',
    value: function isSupported() {
      return window.matchMedia != null;
    }
  }, {
    key: 'attach',
    value: function attach(media_query, onFn, offFn) {
      if (this.isSupported) {
        var mql = window.matchMedia(media_query);
        var eventHandler = function eventHandler(mql) {
          if (mql.matches) {
            return onFn();
          } else {
            return offFn();
          }
        };
        eventHandler(mql);
        mql.addListener(eventHandler);
        return this.subs.push({ mql: mql, on: onFn, off: offFn, eventHandler: eventHandler });
      }
    }
  }, {
    key: 'detach',
    value: function detach(media_query, onFn, offFn) {
      for (var index = 0; index < this.subs.length; index++) {
        var sub = this.subs[index];
        if (sub.mql.media === media_query && sub.on === onFn && sub.off === offFn) {
          sub.mql.removeListener(sub.eventHandler);
          this.subs.splice(index);
          break;
        }
      }
    }
  }]);

  return Responsive;
}();

rh.responsive = new Responsive();

},{}],15:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;
var consts = rh.consts;
var model = rh.model;
var apiClient = rh.apiClient;

var formdata = rh.formData;

var RoboHelpServer = function () {
  _createClass(RoboHelpServer, [{
    key: "toString",
    value: function toString() {
      return 'RoboHelpServer';
    }
  }]);

  function RoboHelpServer() {
    _classCallCheck(this, RoboHelpServer);
  }

  _createClass(RoboHelpServer, [{
    key: "setResultsStringHTML",
    value: function setResultsStringHTML(results_no, searchStr) {
      var msg = gResultsFoundString;
      msg = msg.replace("%1", results_no);
      msg = msg.replace("%2", "\'" + searchStr + "\'");
      this.displayMsg(msg);
    }
  }, {
    key: "publishTopicUrls",
    value: function publishTopicUrls(topics, syns, searchText) {
      var id = void 0;
      var resultsParams = '?' + _.mapToEncodedString(_.extend({ rhhlterm: searchText }, { rhsyns: syns }));
      _.each(topics, function (topic) {
        id = topic.nTopicId + "_" + topic.nIndex;
        rh.model.publish(".p.searchsummary" + id, topic.strSummary);
        rh.model.publish(".p.searchurl" + id, "" + topic.strUrl + resultsParams);
        topic.strUrl = ".p.searchurl" + id;
        topic.strSummary = ".p.searchsummary" + id;
      });
    }
  }, {
    key: "displayMsg",
    value: function displayMsg(msg) {
      var spanNode = document.getElementById(gSearchMsgId);
      if (spanNode != null && spanNode != 'undefined') spanNode.innerHTML = msg;
    }
  }, {
    key: "area",
    value: function area() {
      return _.urlParam('area', _.extractParamString());
    }
  }, {
    key: "type",
    value: function type() {
      return _.urlParam('type', _.extractParamString());
    }
  }, {
    key: "project",
    value: function project() {
      return _.urlParam('project', _.extractParamString());
    }
  }, {
    key: "logTopicView",
    value: function logTopicView(topic) {
      var _this = this;

      return model.subscribe(consts('EVT_PROJECT_LOADED'), function () {
        var baseUrl = model.get(consts('KEY_PUBLISH_BASE_URL'));
        var parentPath = _.parentPath(_.filePath(_.getRootUrl()));
        var tpcUrl = _.isRelativeUrl(topic) ? parentPath + topic : topic;
        if (baseUrl && !_.isEmptyString(baseUrl)) {
          var hashString = _.mapToEncodedString(_.extend(consts('RHS_LOG_TOPIC_VIEW'), { area: _this.area(), tpc: _.filePath(tpcUrl) }));
          return apiClient.get(baseUrl + "?" + hashString);
        }
      });
    }
  }, {
    key: "preSearch",
    value: function preSearch() {
      var hashString = void 0;
      var searchText = model.get(consts('KEY_SEARCH_TERM'));
      if (searchText && !_.isEmptyString(searchText)) {
        hashString = _.mapToEncodedString(_.extend(consts('RHS_DO_SEARCH'), _.addPathNameKey({
          area: this.area(), type: this.type(), project: this.project(), quesn: searchText,
          oldquesn: '', quesnsyn: ''
        })));

        model.publish(consts('KEY_SEARCHED_TERM'), searchText);
        model.publish(consts('EVT_SEARCH_IN_PROGRESS'), true);
        model.publish(consts('KEY_SEARCH_PROGRESS'), 0);
      }

      return { searchText: searchText, hashString: hashString };
    }
  }, {
    key: "postSearch",
    value: function postSearch(searchText, resultsText) {
      var searchResults = JSON.parse(resultsText);
      if (searchResults && searchResults.clientIndex) {
        var hashString = _.mapToEncodedString(_.addPathNameKey({ area: this.area(), type: this.type(),
          project: this.project(), quesn: searchText, cmd: 'clientindex' }));
        model.subscribeOnce(consts('KEY_SEARCH_RESULTS'), function (data) {
          var baseUrl = model.get(consts('KEY_PUBLISH_BASE_URL'));
          return apiClient.post(baseUrl + "?" + hashString, JSON.stringify(data), { 'Content-type': 'application/json' }).error(function () {
            var result = void 0;
            return result = false;
          }).success(function () {
            var result = void 0;
            return result = true;
          });
        }, { initDone: true });
      }
      model.publish(consts('EVT_SEARCH_IN_PROGRESS'), false);
      model.publish(consts('KEY_SEARCH_PROGRESS'), null);

      if (searchResults) {
        var searchTopics = searchResults.topics;
        if (searchTopics && searchTopics.length > 0) {
          this.publishTopicUrls(searchTopics, searchResults.syns, searchText);
          this.setResultsStringHTML(searchTopics.length, window._textToHtml_nonbsp(searchText));
        }

        model.publish(consts('KEY_SEARCH_RESULTS'), searchTopics);
      }

      if (!searchResults || !(searchResults.topics != null ? searchResults.topics.length : undefined)) {
        return this.displayMsg(window.gsNoTopics);
      }
    }
  }, {
    key: "doSearch",
    value: function doSearch() {
      var _this2 = this;

      var result = model.get(consts('KEY_PUBLISH_MODE'));
      var baseUrl = model.get(consts('KEY_PUBLISH_BASE_URL'));
      if (baseUrl && !_.isEmptyString(baseUrl)) {
        var _preSearch = this.preSearch(),
            searchText = _preSearch.searchText,
            hashString = _preSearch.hashString;

        apiClient.get(baseUrl + "?" + hashString).error(function () {
          return result = false;
        }).success(function (resultsText) {
          _this2.postSearch(searchText, resultsText);
          return result = true;
        });
      }
      return result;
    }
  }]);

  return RoboHelpServer;
}();

rh.rhs = new RoboHelpServer();

},{}],16:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var consts = rh.consts;
var model = rh.model;


var defaultScreens = {
  desktop: {
    media_query: 'screen and (min-width: 1296px)'
  },
  tablet: {
    media_query: 'screen and (min-width: 942px) and (max-width: 1295px)'
  },
  phone: {
    media_query: 'screen and (max-width: 941px)'
  },
  ios: {
    user_agent: /(iPad|iPhone|iPod)/g
  },
  ipad: {
    user_agent: /(iPad)/g
  },
  print: {
    media_query: 'print'
  }
};

var Screen = function () {
  _createClass(Screen, [{
    key: 'attachedKey',
    value: function attachedKey(name) {
      return consts('KEY_SCREEN') + '.' + name + '.attached';
    }
  }]);

  function Screen() {
    _classCallCheck(this, Screen);

    this.subscribeScreen = this.subscribeScreen.bind(this);
    this.onScreen = this.onScreen.bind(this);
    this.offScreen = this.offScreen.bind(this);
    var data = _.extend({}, defaultScreens, model.get(consts('KEY_SCREEN')));
    if (data) {
      _.each(data, this.subscribeScreen);
    }
  }

  _createClass(Screen, [{
    key: 'subscribeScreen',
    value: function subscribeScreen(info, name) {
      var _this = this;

      if (info.user_agent && !window.navigator.userAgent.match(_.toRegExp(info.user_agent))) {
        return this.offScreen(name);
      } else if (info.media_query) {
        if (!model.get(consts('KEY_IS_RESPONSIVE'))) {
          return this.onScreen('desktop');
        } else if (rh.responsive.isSupported()) {
          return rh.responsive.attach(info.media_query, function () {
            return _this.onScreen(name);
          }, function () {
            return _this.offScreen(name);
          });
        } else if (name === model.get(consts('KEY_DEFAULT_SCREEN'))) {
          return this.onScreen(name);
        } else {
          return this.offScreen(name);
        }
      } else {
        return this.onScreen(name);
      }
    }
  }, {
    key: 'onScreen',
    value: function onScreen(name) {
      var key = this.attachedKey(name);
      return model.publish(key, true);
    }
  }, {
    key: 'offScreen',
    value: function offScreen(name) {
      var key = this.attachedKey(name);
      if (false !== model.get(key)) {
        return model.publish(key, false);
      }
    }
  }]);

  return Screen;
}();

model.subscribe(consts('EVT_WIDGET_BEFORELOAD'), function () {
  var screen = null;
  return function () {
    return screen != null ? screen : screen = new Screen();
  };
}());

model.publish(consts('KEY_SCREEN_NAMES'), ['desktop', 'tablet', 'phone']);
model.publish(consts('KEY_SCREEN'), defaultScreens);
model.publish(consts('KEY_DEFAULT_SCREEN'), 'phone');

},{}],17:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;

// Storage class to persist key value pairs to localDB/cookies

var Storage = function () {
  function Storage() {
    _classCallCheck(this, Storage);
  }

  _createClass(Storage, [{
    key: 'toString',
    value: function toString() {
      return 'Storage';
    }
  }, {
    key: 'init',
    value: function init(namespace) {
      if (this.namespace) {
        if (rh._debug && this.namespace !== namespace) {
          return rh._d('error', 'Storage', 'Namespace cann\'t be changed');
        }
      } else {
        var jsonString = void 0;
        this.namespace = namespace;
        if (_.canUseLocalDB()) {
          jsonString = localStorage.getItem(this.namespace);
        } else {
          var rawData = _.explodeAndMap(document.cookie, ';', '=');
          if (rawData[this.namespace]) {
            jsonString = unescape(rawData[this.namespace]);
          }
        }
        return this.storageMap = jsonString ? JSON.parse(jsonString) : {};
      }
    }
  }, {
    key: 'isValid',
    value: function isValid() {
      if (rh._debug && !this.storageMap) {
        rh._d('error', 'Storage', 'Namespace is not set yet.');
      }
      return this.storageMap != null;
    }
  }, {
    key: 'persist',
    value: function persist(key, value) {
      if (this.isValid()) {
        this.storageMap[key] = value;
        return this.dump();
      }
    }
  }, {
    key: 'fetch',
    value: function fetch(key) {
      if (this.isValid()) {
        return this.storageMap[key];
      }
    }
  }, {
    key: 'dump',
    value: function dump() {
      if (this.isValid()) {
        if (_.canUseLocalDB()) {
          return localStorage.setItem(this.namespace, JSON.stringify(this.storageMap));
        } else {
          return document.cookie = this.namespace + '=' + escape(JSON.stringify(this.storageMap));
        }
      }
    }
  }]);

  return Storage;
}();

rh.Storage = Storage;
rh.storage = new Storage();

},{}],18:[function(require,module,exports){
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;
var consts = rh.consts;

//Widget class for any custom behavior on dom node

var Widget = function () {
  var _count = undefined;
  Widget = function (_rh$Guard) {
    _inherits(Widget, _rh$Guard);

    _createClass(Widget, [{
      key: 'toString',
      value: function toString() {
        return this.constructor.name + '_' + this._count;
      }
    }, {
      key: 'mapDataAttrMethods',
      value: function mapDataAttrMethods(attrs) {
        return _.reduce(attrs, function (map, value) {
          map['data-' + value] = 'data_' + value;
          return map;
        }, {});
      }
    }], [{
      key: 'initClass',
      value: function initClass() {

        //private static variable
        _count = 0;

        this.prototype.dataAttrs = ['repeat', 'init', 'stext', 'shtml', 'controller', 'class', 'animate', 'css', 'attr', 'value', 'checked', 'html', 'text', 'if', 'hidden', 'keydown', 'keyup', 'scroll', 'change', 'toggle', 'toggleclass', 'method', 'trigger', 'click', 'load', 'mouseover', 'mouseout', 'focus', 'blur', 'swipeleft', 'swiperight', 'swipeup', 'swipedown', 'screenvar'];

        this.prototype.dataAttrMethods = function () {
          return Widget.prototype.mapDataAttrMethods(Widget.prototype.dataAttrs);
        }();

        //all list/data-reapeat items data-i attribute are support
        //this is the list of special list item attribute.
        //That means attributes like data-ihref, data-iid etc will
        // be supported without listing here.
        this.prototype.dataIAttrs = ['itext', 'ihtml', 'iclass', 'irepeat'];
        this.prototype.dataIAttrMethods = function () {
          return Widget.prototype.mapDataAttrMethods(Widget.prototype.dataIAttrs);
        }();

        this.prototype.supportedArgs = ['node', 'model', 'key', 'user_vars', 'templateExpr', 'include'];

        this.prototype.resolveEventRawExpr = _.memoize(function (rawExpr) {
          var _$resolveExprOptions = _.resolveExprOptions(rawExpr),
              expr = _$resolveExprOptions.expr,
              opts = _$resolveExprOptions.opts;

          expr = this.patchRawExpr(expr, opts);
          var exprFn = this._function('event, node', expr);
          var callback = _.safeExec(exprFn);
          callback = _.applyCallbackOptions(callback, opts);
          return { callback: callback, opts: opts };
        });

        this.prototype.resolveRawExprWithValue = _.memoize(function (rawExpr) {
          var keys = [];

          var _$resolveExprOptions2 = _.resolveExprOptions(rawExpr),
              expr = _$resolveExprOptions2.expr,
              opts = _$resolveExprOptions2.opts;

          expr = this.patchRawExpr(expr, opts);
          var exprFn = this._evalFunction('', expr, keys);
          var callback = _.safeExec(exprFn);
          callback = _.applyCallbackOptions(callback, opts);
          return { callback: callback, keys: keys, opts: opts };
        });

        //######### Heleper function to create functions in widget #################
        this.prototype.resolveExpression = _.memoize(function (expr) {
          var keys = [];
          return {
            expr: _.resolveModelKeys(_.resolveNamedVar(expr), keys),
            keys: keys
          };
        });

        this.prototype._safeFunction = _.memoize(function (arg, expr) {
          var fn = void 0;
          try {
            fn = new Function(arg, expr);
          } catch (error) {
            fn = function fn() {};
            if (rh._debug) {
              rh._d('error', 'Expression: ' + expr, error.message);
            }
          }
          return fn;
        });

        this.prototype._eventCallBackData = {};

        this.prototype.resolveAttr = function () {
          var cache = {};
          return function (attrsData) {
            var props = cache[attrsData];
            if (props == null) {
              props = _.resolveAttr(attrsData);
              cache[attrsData] = props;
            }
            return props;
          };
        }();

        /*
         * Toggle model variable on click
         * Example: data-toggle='showhide'
         *          data-toggle='showLeftBar:true'
         *          data-toggle='showLeftBar:true;showRightBar:false'
         */
        this.prototype._toggleData = {};

        /*
         * Example: data-load='test.js'
         *          data-load='test.js:key'
         */
        this.prototype._loadData = {};
      }
    }]);

    function Widget(opts) {
      _classCallCheck(this, Widget);

      var _this = _possibleConstructorReturn(this, (Widget.__proto__ || Object.getPrototypeOf(Widget)).call(this));

      _this.reRender = _this.reRender.bind(_this);
      _count += 1;
      _this._count = _count;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Array.from(_this.supportedArgs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;
          if (opts[key]) {
            _this[key] = opts[key];
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (_this.templateExpr || _this.include) {
        _this.useTemplate = true;
      }
      _this.parseOpts(opts);
      if (!_this.node) {
        rh._d('error', 'constructor', _this + ' does not have a node');
      }
      return _this;
    }

    _createClass(Widget, [{
      key: 'destruct',
      value: function destruct() {
        this.resetContent();
        if (this._subscriptions) {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = Array.from(this._subscriptions)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var unsub = _step2.value;
              unsub();
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
        this._subscriptions = [];
        delete this.model;
        return delete this.controllers;
      }
    }, {
      key: 'parseOpts',
      value: function parseOpts(opts) {
        this.opts = opts;
        if (opts.arg) {
          this.key = opts.arg;
        }
        return this.parsePipedArg();
      }
    }, {
      key: 'parsePipedArg',
      value: function parsePipedArg() {
        var args = this.opts.pipedArgs;
        if (args != null ? args.shift : undefined) {
          //first piped argument is default Model
          return this.modelArgs = _.resolveNiceJSON(args.shift());
        }
      }
    }, {
      key: 'get',
      value: function get(key) {
        if (this.model == null) {
          this.model = new rh.Model();
        }
        return this.model.get(key);
      }
    }, {
      key: 'publish',
      value: function publish(key, value, opts) {
        if (this.model == null) {
          this.model = new rh.Model();
        }
        return this.model.publish(key, value, opts);
      }
    }, {
      key: 'subscribe',
      value: function subscribe(key, fn, opts) {
        if (key == null) {
          return;
        }
        if (this.model == null) {
          this.model = new rh.Model();
        }
        var unsub = this.model.subscribe(key, fn, opts);
        if (this.model.isGlobal() || this.model.isGlobal(key)) {
          unsub = this.storeSubscribe(unsub);
        }
        return unsub;
      }
    }, {
      key: 'subscribeOnly',
      value: function subscribeOnly(key, fn, opts) {
        if (opts == null) {
          opts = {};
        }
        opts['initDone'] = true;
        return this.subscribe(key, fn, opts);
      }
    }, {
      key: 'storeSubscribe',
      value: function storeSubscribe(unsub) {
        var _this2 = this;

        if (this._subscriptions == null) {
          this._subscriptions = [];
        }
        var newUnsub = function newUnsub() {
          var index = _this2._subscriptions.indexOf(newUnsub);
          if (index != null && index !== -1) {
            _this2._subscriptions.splice(index, 1);
          }
          return unsub();
        };
        this._subscriptions.push(newUnsub);
        return newUnsub;
      }

      /*
       * data-if="@sidebar_open | screen: desktop"
       * data-if="@screen.desktop.attached === true && @sidebar_open"
       */

    }, {
      key: 'patchScreenOptions',
      value: function patchScreenOptions(expr, screen) {
        var names = _.isString(screen) ? [screen] : screen;
        var screenExpr = _.map(names, function (name) {
          return '@' + consts('KEY_SCREEN') + '.' + name + '.attached';
        }).join(' || ');
        if (screenExpr) {
          return screenExpr + ' ? (' + expr + ') : null';
        } else {
          return expr;
        }
      }
    }, {
      key: 'patchDirOptions',
      value: function patchDirOptions(expr, dir) {
        return '@' + consts('KEY_DIR') + ' == \'' + dir + '\' ? (' + expr + ') : null';
      }
    }, {
      key: 'patchRawExprOptions',
      value: function patchRawExprOptions(expr, opts) {
        if (opts.screen) {
          expr = this.patchScreenOptions(expr, opts.screen);
        }
        if (opts.dir != null) {
          expr = this.patchDirOptions(expr, opts.dir);
        }
        return expr;
      }
    }, {
      key: 'patchRawExpr',
      value: function patchRawExpr(expr, opts) {
        if (expr && _.isValidModelKey(expr)) {
          expr = '@' + expr;
        }
        if (opts) {
          expr = this.patchRawExprOptions(expr, opts);
        }
        return expr;
      }
    }, {
      key: 'subscribeExpr',
      value: function subscribeExpr(rawExpr, fn, subs, opts) {
        var _this3 = this;

        if (rawExpr == null) {
          return;
        }

        var _resolveRawExprWithVa = this.resolveRawExprWithValue(rawExpr),
            callback = _resolveRawExprWithVa.callback,
            keys = _resolveRawExprWithVa.keys,
            expOpts = _resolveRawExprWithVa.expOpts;

        var subsFn = function subsFn() {
          return fn.call(_this3, callback.call(_this3), expOpts);
        };

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = Array.from(keys)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var key = _step3.value;

            var unsub = this.subscribeOnly(key, subsFn, opts);
            if (subs) {
              subs.push(unsub);
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return subsFn();
      }
    }, {
      key: 'resetContent',
      value: function resetContent() {
        if (this.children) {
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = Array.from(this.children)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var child = _step4.value;
              child.destruct();
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
        }
        if (this.htmlSubs) {
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = Array.from(this.htmlSubs)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var unsub = _step5.value;
              unsub();
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5.return) {
                _iterator5.return();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }
        }
        this.children = [];
        return this.htmlSubs = [];
      }
    }, {
      key: 'addChild',
      value: function addChild(child) {
        if (this.children == null) {
          this.children = [];
        }
        return this.children.push(child);
      }
    }, {
      key: 'linkModel',
      value: function linkModel(fromModel, fromKey, toModel, toKey, opts) {
        var _this4 = this;

        if (opts == null) {
          opts = {};
        }
        var partial = opts.partial != null ? opts.partial : false;
        return this.storeSubscribe(fromModel.subscribe(fromKey, function (value) {
          return _this4.guard(function () {
            return toModel.publish(toKey, value, { sync: true });
          }, _this4.toString());
        }, { partial: partial }));
      }
    }, {
      key: 'init',
      value: function init(parent) {
        var initExpr = void 0;
        if (this.initDone) {
          return;
        }
        this.initDone = true;
        this.initParent(parent);
        this.initModel();

        if (initExpr = $.dataset(this.node, 'init')) {
          this.data_init(this.node, initExpr);
          $.dataset(this.node, 'init', null);
        }

        this.render();
        return this.subscribeOnly(this.opts.renderkey, this.reRender, { partial: false });
      }
    }, {
      key: 'initParent',
      value: function initParent(parent) {
        if (parent) {
          parent.addChild(this);
        }
        var parentModel = (parent != null ? parent.model : undefined) || rh.model;
        var input = __guard__($.dataset(this.node, 'input'), function (x) {
          return x.trim();
        });
        var output = __guard__($.dataset(this.node, 'output'), function (x1) {
          return x1.trim();
        });

        if (input === '.' || output === '.') {
          return this.model = parentModel;
        } else {
          var keys = void 0,
              opts = void 0;
          if (input || output || this.key) {
            if (this.model == null) {
              this.model = new rh.Model();
            }
          }
          if (input) {
            var _$resolveInputKeys = _.resolveInputKeys(input);

            keys = _$resolveInputKeys.keys;
            opts = _$resolveInputKeys.opts;

            _.each(keys, function (parentKey, key) {
              if (parentKey == null) {
                parentKey = key;
              }
              return this.linkModel(parentModel, parentKey, this.model, key, opts);
            }, this);
          }
          if (output) {
            var _$resolveInputKeys2 = _.resolveInputKeys(output);

            keys = _$resolveInputKeys2.keys;
            opts = _$resolveInputKeys2.opts;

            return _.each(keys, function (parentKey, key) {
              if (parentKey == null) {
                parentKey = key;
              }
              return this.linkModel(this.model, key, parentModel, parentKey, opts);
            }, this);
          }
        }
      }
    }, {
      key: 'initModel',
      value: function initModel() {
        if (this.modelArgs) {
          _.each(this.modelArgs, function (value, key) {
            return this.publish(key, value);
          }, this);
          return delete this.modelArgs;
        }
      }
    }, {
      key: 'initUI',
      value: function initUI() {
        if (rh._debug) {
          var loadedWidgets = $.dataset(this.node, 'loaded');
          if (loadedWidgets) {
            loadedWidgets = loadedWidgets + ';' + this;
          }
          $.dataset(this.node, 'loaded', loadedWidgets || this);
        } else {
          $.dataset(this.node, 'loaded', true);
        }

        if (this.templateExpr) {
          this.subscribeTemplateExpr();
        }
        if (this.include) {
          this.subscribeIncludePath();
        }
        if (this.tplNode == null) {
          this.tplNode = this.node;
        }
        return this.resetContent();
      }
    }, {
      key: 'subscribeTemplateExpr',
      value: function subscribeTemplateExpr() {
        var constructing = true;
        this.subscribeExpr(this.templateExpr, function (template) {
          this.tplNode = $.createElement('div', template).firstChild;
          if (!constructing) {
            return this.reRender(true);
          }
        });
        constructing = false;
        return this.templateExpr = undefined;
      }
    }, {
      key: 'subscribeIncludePath',
      value: function subscribeIncludePath() {
        var _this5 = this;

        _.require(this.include, function (template) {
          return _this5.setTemplate(template);
        });
        return this.include = undefined;
      }
    }, {
      key: 'setTemplate',
      value: function setTemplate(template) {
        this.useTemplate = true;
        this.tplNode = $.createElement('div', template).firstChild;
        return this.reRender(true);
      }
    }, {
      key: 'reRender',
      value: function reRender(render) {
        if (render != null && this.tplNode) {
          return this.render();
        }
      }
    }, {
      key: 'preRender',
      value: function preRender() {
        var oldNode = void 0;
        if (this.useTemplate) {
          oldNode = this.node;
          this.node = this.tplNode.cloneNode(true);
        }
        return oldNode;
      }
    }, {
      key: 'postRender',
      value: function postRender(oldNode) {
        if (oldNode && oldNode.parentNode) {
          return oldNode.parentNode.replaceChild(this.node, oldNode);
        }
      }
    }, {
      key: 'alterNodeContent',
      value: function alterNodeContent() {}
    }, {
      key: 'render',
      value: function render() {
        if (rh._test) {
          rh.model.publish('test.' + this + '.render.begin', _.time());
        }
        this.initUI();
        var oldNode = this.preRender();
        this.nodeHolder = new rh.NodeHolder([this.node]);
        this.alterNodeContent();
        this.resolveDataAttrs(this.node);
        _.loadDataHandlers(this.node, this);
        this.postRender(oldNode);
        if (rh._test) {
          return rh.model.publish('test.' + this + '.render.end', _.time());
        }
      }
    }, {
      key: 'isVisible',
      value: function isVisible() {
        return this.nodeHolder.isVisible();
      }
    }, {
      key: 'show',
      value: function show() {
        return this.nodeHolder.show();
      }
    }, {
      key: 'hide',
      value: function hide() {
        return this.nodeHolder.hide();
      }
    }, {
      key: 'toggle',
      value: function toggle() {
        if (this.isVisible()) {
          return this.hide();
        } else {
          return this.show();
        }
      }
    }, {
      key: 'isWidgetNode',
      value: function isWidgetNode(node) {
        return $.dataset(node, 'rhwidget');
      }
    }, {
      key: 'isDescendent',
      value: function isDescendent(node) {
        var nestedWidget = void 0;
        var child = node;
        while (true) {
          var parent = child.parentNode;
          if (!parent) {
            break;
          }
          if (this.isWidgetNode(child)) {
            nestedWidget = parent;
            break;
          }
          if (this.node === parent) {
            break;
          }
          child = parent;
        }
        return nestedWidget != null;
      }
    }, {
      key: 'eachChild',
      value: function eachChild(selector, fn) {
        return $.eachChild(this.node, selector, function (node) {
          if (!this.isDescendent(node)) {
            return fn.call(this, node);
          }
        }, this);
      }
    }, {
      key: 'eachDataNode',
      value: function eachDataNode(dataAttr, fn) {
        return $.eachDataNode(this.node, dataAttr, function (node, value) {
          if (!this.isDescendent(node)) {
            return fn.call(this, node, value);
          }
        }, this);
      }
    }, {
      key: 'traverseNode',
      value: function traverseNode(node, pre, post) {
        return $.traverseNode(node, pre, post, function (child) {
          return !this.isDescendent(child);
        }, this);
      }
    }, {
      key: 'resolveDataAttrs',
      value: function resolveDataAttrs(pnode) {
        return this.traverseNode(pnode, function (node) {
          var repeatVal = void 0;
          if (_.isString(repeatVal = $.dataset(node, 'repeat'))) {
            this.data_repeat(node, repeatVal);
            return false;
          } else {
            $.eachAttributes(node, function (name, value) {
              var fnName = this.dataAttrMethods[name];
              if (fnName && value) {
                return this[fnName].call(this, node, value);
              }
            }, this);
            return true;
          }
        });
      }
    }, {
      key: 'resolveRepeatExpr',
      value: function resolveRepeatExpr(rawExpr) {
        var values = _.resolvePipedExpression(rawExpr);
        var opts = values[1] && _.resolveNiceJSON(values[1]);
        var data = _.resolveLoopExpr(values[0]);
        if (opts != null ? opts.filter : undefined) {
          data['filter'] = this._evalFunction('item, index', opts.filter);
        }
        data['step'] = (opts != null ? opts.step : undefined) || 1;
        return data;
      }

      /*
       * varName: Ex: #{@data.title} means item.data.title
       */

    }, {
      key: 'resolveRepeatVar',
      value: function resolveRepeatVar(expr, item, index, cache, node) {
        var _this6 = this;

        return cache[expr] = cache[expr] || function () {
          switch (expr) {
            case '@index':
              return index;
            case '@size':
              return item.length;
            case 'this':
              return item;
            default:
              if (_.isValidModelKey(expr)) {
                return _.get(item, expr);
              } else {
                return _this6.subscribeIDataExpr(node, expr, item, index);
              }
          }
        }();
      }
    }, {
      key: 'resolveEnclosedVar',
      value: function resolveEnclosedVar(value, item, index, itemCache, node) {
        return _.resolveEnclosedVar(value, function (varName) {
          return this.resolveRepeatVar(varName, item, index, itemCache, node);
        }, this);
      }
    }, {
      key: 'updateEncloseVar',
      value: function updateEncloseVar(name, value, item, index, itemCache, node) {
        var newValue = this.resolveEnclosedVar(value, item, index, itemCache, node);
        if (newValue === '') {
          $.removeAttribute(node, name);
        } else if (newValue !== value) {
          $.setAttribute(node, name, newValue);
        }
        return newValue;
      }
    }, {
      key: 'updateWidgetEncloseVar',
      value: function updateWidgetEncloseVar(item, index, itemCache, node) {
        return _.each(['rhwidget', 'input', 'output', 'init'], function (name) {
          var value = void 0;
          if (value = $.dataset(node, name)) {
            return this.updateEncloseVar('data-' + name, value, item, index, itemCache, node);
          }
        }, this);
      }
    }, {
      key: 'isRepeat',
      value: function isRepeat(node) {
        return $.dataset(node, 'repeat') || $.dataset(node, 'irepeat');
      }
    }, {
      key: 'resolveNestedRepeat',
      value: function resolveNestedRepeat(node, item, index, itemCache) {
        return _.each(['repeat', 'irepeat'], function (name) {
          var value = void 0;
          if (value = $.dataset(node, name)) {
            value = this.updateEncloseVar('data-' + name, value, item, index, itemCache, node);
            if (value !== '') {
              return typeof this['data_' + name] === 'function' ? this['data_' + name](node, value, item, index) : undefined;
            }
          }
        }, this);
      }
    }, {
      key: 'resolveItemIndex',
      value: function resolveItemIndex(pnode, item, index) {
        var _this7 = this;

        if (!pnode.children) {
          return;
        }
        var itemCache = {};
        return $.traverseNode(pnode, function (node) {
          if (node !== pnode && $.dataset(node, 'rhwidget')) {
            _this7.updateWidgetEncloseVar(item, index, itemCache, node);
            return false;
          }

          if (_this7.isRepeat(node)) {
            _this7.resolveNestedRepeat(node, item, index, itemCache);
            return false;
          }

          $.eachAttributes(node, function (name, value, attrsInfo) {
            if (_.isString(value)) {
              var fnName = void 0;
              if (0 === name.search('data-')) {
                value = this.updateEncloseVar(name, value, item, index, itemCache, node);
              }
              if (value === '') {
                return;
              }

              if (fnName = this.dataIAttrMethods[name]) {
                if (this[fnName].call(this, node, value, item, index, attrsInfo)) {
                  return $.removeAttribute(node, name);
                }
              } else if (0 === name.search('data-i-')) {
                this.data_iHandler(node, value, item, index, name.substring(7));
                return $.removeAttribute(node, name);
              }
            }
          }, _this7);
          return true;
        });
      }
    }, {
      key: 'guard',
      value: function guard(fn, guardName) {
        if (guardName == null) {
          guardName = 'ui';
        }
        return _get(Widget.prototype.__proto__ || Object.getPrototypeOf(Widget.prototype), 'guard', this).call(this, fn, guardName);
      }
    }, {
      key: 'data_repeat',
      value: function data_repeat(node, rawExpr) {
        var _this8 = this;

        $.dataset(node, 'repeat', null);
        node.removeAttribute('data-repeat');
        var opts = this.resolveRepeatExpr(rawExpr);

        var nodeHolder = new rh.NodeHolder([node]);
        this.subscribeDataExpr(opts.expr, function (result) {
          //TODO usub old subs using stack of html subs
          return _this8._repeatNodes(nodeHolder, result, opts, node);
        }, { partial: false });
        return true;
      }

      //if statement for data-repeat like structure

    }, {
      key: 'resolve_rif',
      value: function resolve_rif(node, item, index) {
        var callback = void 0,
            cloneNode = void 0,
            rawExpr = void 0;
        if (rawExpr = $.dataset(node, 'rif')) {
          callback = this._evalFunction('item, index', rawExpr);
        }

        if (!callback || callback.call(this, item, index)) {
          cloneNode = node.cloneNode(false);
          $.dataset(cloneNode, 'rif', null);
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = Array.from(node.childNodes)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var child = _step6.value;

              var cloneChild = this.resolve_rif(child, item, index);
              if (cloneChild) {
                cloneNode.appendChild(cloneChild);
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        }
        return cloneNode;
      }
    }, {
      key: '_function',
      value: function _function(arg, expr, keys) {
        var data = this.resolveExpression(expr);
        if (keys) {
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = Array.from(data.keys)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var key = _step7.value;
              keys.push(key);
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7.return) {
                _iterator7.return();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }
        }
        return this._safeFunction(arg, data.expr);
      }
    }, {
      key: '_evalFunction',
      value: function _evalFunction(arg, expr, keys) {
        return this._function(arg, 'return ' + expr + ';', keys);
      }

      //########## list or repeat items data attributes handling ############

    }, {
      key: '_setLoopVar',
      value: function _setLoopVar(opts, item, index) {
        var oldValue = {};
        if (opts.item) {
          oldValue['item'] = this.user_vars[opts.item];
          this.user_vars[opts.item] = item;
        }
        if (opts.index) {
          oldValue['index'] = this.user_vars[opts.index];
          this.user_vars[opts.index] = index;
        }
        return oldValue;
      }
    }, {
      key: '_repeatNodes',
      value: function _repeatNodes(nodeHolder, result, opts, tmplNode) {
        var cloneNode = void 0;
        if (result == null) {
          result = [];
        }
        if (this.user_vars == null) {
          this.user_vars = {};
        }
        var newNodes = [];
        var filter = opts.filter,
            step = opts.step;

        for (var step1 = step, asc = step1 > 0, index = asc ? 0 : result.length - 1; asc ? index < result.length : index >= 0; index += step1) {
          var item = result[index];
          var oldValue = this._setLoopVar(opts, item, index);
          if (!filter || filter.call(this, item, index)) {
            if (cloneNode = this.resolve_rif(tmplNode, item, index)) {
              newNodes.push(cloneNode);
              this.resolveItemIndex(cloneNode, item, index);
              this.resolveDataAttrs(cloneNode);
            }
          }
          this._setLoopVar(opts, oldValue.item, oldValue.index);
        }

        if (newNodes.length === 0) {
          var tempNode = tmplNode.cloneNode(false);
          $.addClass(tempNode, 'rh-hide');
          newNodes.push(tempNode);
        }

        return nodeHolder.updateNodes(newNodes);
      }
    }, {
      key: 'data_irepeat',
      value: function data_irepeat(node, rawExpr, item, index, attrsInfo) {
        $.dataset(node, 'irepeat', null);
        var opts = this.resolveRepeatExpr(rawExpr);
        var nodeHolder = new rh.NodeHolder([node]);
        var result = this.subscribeIDataExpr(node, opts.expr, item, index);
        this._repeatNodes(nodeHolder, result, opts, node);
        return true;
      }

      /*
       * helper method for r(repeat) attributes
       */

    }, {
      key: 'subscribeIDataExpr',
      value: function subscribeIDataExpr(node, rawExpr, item, index, attrsInfo) {
        var exprFn = this._evalFunction('item, index, node', rawExpr);
        try {
          return exprFn.call(this, item, index, node);
        } catch (error) {
          if (rh._debug) {
            return rh._d('error', 'iExpression: ' + rawExpr, error.message);
          }
        }
      }

      /*
       * get the key value and fills its value as text content
       * Example: <a data-itext="item.title">temp value</a>
       *          <div data-itext="@key">temp value</div>
       */

    }, {
      key: 'data_itext',
      value: function data_itext(node, rawExpr, item, index, attrsInfo) {
        $.textContent(node, this.subscribeIDataExpr(node, rawExpr, item, index));
        return true;
      }

      /*
       * get the key value and fills its value as HTML content
       * Example: <a data-ihtml="item.data">temp value</a>
       *          <div data-ihtml="@key">temp value</div>
       */

    }, {
      key: 'data_ihtml',
      value: function data_ihtml(node, rawExpr, item, index, attrsInfo) {
        node.innerHTML = this.subscribeIDataExpr(node, rawExpr, item, index);
        return true;
      }

      /*
       * get the key value and fills its value as text content
       * Example: <a data-iclass="item.data?'enabled':'disabled'">temp value</a>
       *          <div data-iclass="@key">temp value</div>
       */

    }, {
      key: 'data_iclass',
      value: function data_iclass(node, rawExpr, item, index, attrsInfo) {
        var className = this.subscribeIDataExpr(node, rawExpr, item, index);
        if (className) {
          $.addClass(node, className);
        }
        return true;
      }

      /*
       * get the key value and fills its value as text content
       * Example: <a data-ihref="item.url">temp value</a>
       *          <div data-iid="item.id">temp value</div>
       */

    }, {
      key: 'data_iHandler',
      value: function data_iHandler(node, rawExpr, item, index, attrName) {
        var attrValue = this.subscribeIDataExpr(node, rawExpr, item, index);
        if (attrValue) {
          $.setAttribute(node, attrName, attrValue);
        }
        return true;
      }

      //################ Static data attributes handling ##########################
      /* get the key value at the time of rendering
       * and fills its value as html content
       * Example: <a data-shtml="key">temp value</a>
       *          <div data-shtml="key">temp value</div>
       */

    }, {
      key: 'data_shtml',
      value: function data_shtml(node, key) {
        $.removeAttribute(node, 'data-shtml');
        return node.innerHTML = this.get(key);
      }

      /*
       * get the key value and fills its value as text content
       * Example: <a data-stext="key">temp value</a>
       *          <div data-stext="key">temp value</div>
       */

    }, {
      key: 'data_stext',
      value: function data_stext(node, key) {
        $.removeAttribute(node, 'data-stext');
        return $.textContent(node, this.get(key) || '');
      }

      //################ Generic data attributes handling ##########################
      /*
       * evaluates expression value to init
       * Example: data-init="@key(true)"
       *          data-init="rh._.loadScript('p.toc')"
       */

    }, {
      key: 'data_init',
      value: function data_init(node, rawExpr) {
        var resolvedData = _.resolveExprOptions(rawExpr);
        var callback = this._function('node', resolvedData.expr);
        callback = _.applyCallbackOptions(callback, resolvedData.opts);
        return callback.call(this, node);
      }

      /*
       * helper method for data methods having expression like data-if
       */

    }, {
      key: 'subscribeDataExpr',
      value: function subscribeDataExpr(rawExpr, handler, opts) {
        return this.subscribeExpr(rawExpr, handler, this.htmlSubs, opts);
      }
    }, {
      key: '_data_event_callback',
      value: function _data_event_callback(rawExpr) {
        var data = Widget.prototype._eventCallBackData[rawExpr];
        if (data == null) {
          data = {};
          var value = _.resolvePipedExpression(rawExpr);
          data.callback = this._function('event, node', value[0]);
          if (value[1]) {
            data.opts = _.resolveNiceJSON(value[1]);
          }
          Widget.prototype._eventCallBackData[rawExpr] = data;
        }
        return data;
      }

      /*
       * subscribes to keys and evaluates expression value to show or hide
       * Example: data-if="@key"
       *          data-if="!@key&&@key2"
       *          data-if='this.get("key", "value")'
       *          data-if="@key==value"
       *          data-if="@key!==value"
       */

    }, {
      key: 'data_if',
      value: function data_if(node, rawExpr) {
        var nodeHolder = new rh.NodeHolder([node]);
        return this.subscribeDataExpr(rawExpr, function (result) {
          if (result) {
            return nodeHolder.show();
          } else {
            return nodeHolder.hide();
          }
        });
      }
    }, {
      key: 'data_hidden',
      value: function data_hidden(node, rawExpr) {
        var nodeHolder = new rh.NodeHolder([node]);
        return this.subscribeDataExpr(rawExpr, function (result) {
          return nodeHolder.accessible(!result);
        });
      }

      /*
       * subscribes to a key and fills its value as html content
       * Example: <a data-html="@key">temp value</a>
       *          <div data-html="@key['url']">temp value</div>
       */

    }, {
      key: 'data_html',
      value: function data_html(node, rawExpr) {
        return this.subscribeDataExpr(rawExpr, function (result) {
          var _this9 = this;

          if (result == null) {
            result = '';
          }
          node.innerHTML = result;
          //TODO unsub old subscribes
          return $.eachChildNode(node, function (child) {
            return _this9.resolveDataAttrs(child);
          });
        });
      }

      /*
       * subscribes to a key and fills its value as text content
       * Example: <a data-text="@key">temp value</a>
       *          <div data-text="@key['title']">temp value</div>
       */

    }, {
      key: 'data_text',
      value: function data_text(node, rawExpr) {
        return this.subscribeDataExpr(rawExpr, function (result) {
          if (result == null) {
            result = '';
          }
          return $.textContent(node, result);
        });
      }
      /*
       * provide expression to update the class attribute
       * Example: data-class="selected: #{@index} == @.dataidx"
       * data-class="selected: @key1; bold: @key2"
       */

    }, {
      key: 'data_class',
      value: function data_class(node, attrsData) {
        return _.each(this.resolveAttr(attrsData), function (rawExpr, className) {
          var nodeHolder = new rh.NodeHolder([node]);
          return this.subscribeDataExpr(rawExpr, function (result) {
            var addRemoveClass = result ? [className] : [];
            return nodeHolder.updateClass(addRemoveClass);
          });
        }, this);
      }

      /*
       * To update any html tag attribute.
       * Example: <a data-attr="href:link_key">Google</a>
       *          <button data-attr="disabled:key">temp value</button>
       */

    }, {
      key: 'data_attr',
      value: function data_attr(node, attrsData) {
        return _.each(this.resolveAttr(attrsData), function (rawExpr, attr_name) {
          return this.subscribeDataExpr(rawExpr, function (result) {
            if (result != null) {
              return $.setAttribute(node, attr_name, result);
            } else if ($.hasAttribute(node, attr_name)) {
              return $.removeAttribute(node, attr_name);
            }
          });
        }, this);
      }

      /*
       * To update style attribute of HTML node.
       * Example:
       * <span style="visible: true;" data-css="visible: @key"> some text </span>
       * <li style="color: blue; display: block;" data-css="color:
       * @.selected_color; display: @.dataidx > 10 ? 'none' : 'block'"></li>
       */

    }, {
      key: 'data_css',
      value: function data_css(node, attrsData) {
        return _.each(this.resolveAttr(attrsData), function (rawExpr, styleName) {
          return this.subscribeDataExpr(rawExpr, function () {
            var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            return (// null to force set css
              $.css(node, styleName, result)
            );
          });
        }, this);
      }

      /*
       * works like data-if but sets the states checked
       * Example:
       * <input type="radio" name="group1" value="Print" data-checked="key" />
       * <input type="radio" name="group1" value="Online" data-checked="key" />
       */

    }, {
      key: 'data_checked',
      value: function data_checked(node, key) {
        var _this10 = this;

        if (_.isValidModelConstKey(key)) {
          key = consts(key);
        }
        var type = node.getAttribute('type');
        if (type === 'checkbox' || type === 'radio') {
          var nodeValue = void 0;
          if ($.getAttribute(node, 'checked')) {
            this.guard(function () {
              return this.publish(key, node.getAttribute('value', { sync: true }));
            });
          }

          node.onclick = function () {
            nodeValue = node.getAttribute('value');
            var value = nodeValue === null ? node.checked : node.checked ? nodeValue : undefined;
            return _this10.guard(function () {
              return this.publish(key, value, { sync: true });
            });
          };
          return this.htmlSubs.push(this.subscribe(key, function (value) {
            nodeValue = node.getAttribute('value');
            if (nodeValue != null) {
              return node.checked = value === nodeValue;
            } else {
              return node.checked = value === true;
            }
          }));
        }
      }

      /*
       * subscribes to a key and fills its value as html content
       * Example:
       * <input type="text" data-value="key" />
       * <input type="text" value="Online" data-value="key" />
       */

    }, {
      key: 'data_value',
      value: function data_value(node, key) {
        var _this11 = this;

        if (_.isValidModelConstKey(key)) {
          key = consts(key);
        }
        var nodeGuard = Math.random();
        if (node.value) {
          this.guard(function () {
            return this.publish(key, node.value, { sync: true });
          }, nodeGuard);
        }

        node.onchange = function () {
          return _this11.guard(function () {
            return this.guard(function () {
              return this.publish(key, node.value, { sync: true });
            });
          }, nodeGuard);
        };

        return this.htmlSubs.push(this.subscribe(key, function (value) {
          return _this11.guard(function () {
            return node.value = value;
          }, nodeGuard);
        }));
      }
    }, {
      key: '_register_event_with_rawExpr',
      value: function _register_event_with_rawExpr(name, node, rawExpr) {
        var _this12 = this;

        var _resolveEventRawExpr = this.resolveEventRawExpr(rawExpr),
            callback = _resolveEventRawExpr.callback;

        _.addEventListener(node, name, function (e) {
          return callback.call(_this12, e, e.currentTarget);
        });
        return callback;
      }

      /*
       * Example: data-click='@key("value")'
       *          data-click='this.publish("key", "value")'
       *          data-click='@key("value"); event.preventDefault();'
       */

    }, {
      key: 'data_click',
      value: function data_click(node, rawExpr) {
        return this._register_event_with_rawExpr('click', node, rawExpr);
      }

      /*
       * Example: data-mouseover='@key("value")'
       *          data-mouseover='this.publish("key", "value")'
       *          data-mouseover='@key("value"); event.preventDefault();'
       */

    }, {
      key: 'data_mouseover',
      value: function data_mouseover(node, rawExpr) {
        return this._register_event_with_rawExpr('mouseover', node, rawExpr);
      }
    }, {
      key: 'data_mouseout',
      value: function data_mouseout(node, rawExpr) {
        return this._register_event_with_rawExpr('mouseout', node, rawExpr);
      }
    }, {
      key: 'data_focus',
      value: function data_focus(node, rawExpr) {
        return this._register_event_with_rawExpr('focus', node, rawExpr);
      }
    }, {
      key: 'data_blur',
      value: function data_blur(node, rawExpr) {
        return this._register_event_with_rawExpr('blur', node, rawExpr);
      }

      /*
       * trigger
       * Example: data-trigger='.l.go_to_top'
       *          data-trigger='EVT_SEARCH_PAGE'
       */

    }, {
      key: 'data_trigger',
      value: function data_trigger(node, key) {
        var _this13 = this;

        if (_.isValidModelConstKey(key)) {
          key = consts(key);
        }
        return _.addEventListener(node, 'click', function () {
          return _this13.publish(key, null);
        });
      }

      /*
       * call member or global method on click
       * advantage is you will get event as argument
       * Example: data-method='handleSave' => data-click='this.handleSave(event)'
       *          data-method='handleCancel'
       */

    }, {
      key: 'data_method',
      value: function data_method(node, method) {
        var _this14 = this;

        return _.addEventListener(node, 'click', function (event) {
          if (!event.defaultPrevented) {
            return (_this14[method] || window[method])(event);
          }
        });
      }
    }, {
      key: 'data_toggle',
      value: function data_toggle(node, rawArgs) {
        var _this15 = this;

        var opts = void 0;
        var keys = [];
        var data = Widget.prototype._toggleData[rawArgs];
        if (data == null) {
          var pipedArgs = _.resolvePipedExpression(rawArgs);
          var config = pipedArgs.shift() || '';
          config = _.explodeAndMap(config, ';', ':', { trim: true });
          if (pipedArgs[0]) {
            opts = _.resolveNiceJSON(pipedArgs[0]);
          }
          data = { keyValues: config, opts: opts };
          Widget.prototype._toggleData[rawArgs] = data;
        }

        _.each(data.keyValues, function (value, key) {
          keys.push(key);
          if (value != null) {
            return this.guard(function () {
              return this.publish(key, value === 'true', { sync: true });
            });
          }
        }, this);

        var callback = function callback(key) {
          return _this15.guard(function () {
            return this.publish(key, !this.get(key), { sync: true });
          });
        };
        if (data.opts) {
          callback = _.applyCallbackOptions(callback, data.opts);
        }

        return _.addEventListener(node, 'click', function (event) {
          return _.each(keys, function (key) {
            if (!event.defaultPrevented) {
              return callback(key);
            }
          });
        });
      }

      /*
       * Toggle model variable on click
       * Example: data-toggleclass='rh-hide'
       *          data-toggleclass='open'
       *          <div class="open" data-toggleclass='open,closed'>
       */

    }, {
      key: 'data_toggleclass',
      value: function data_toggleclass(node, classNames) {
        var newClasses = _.splitAndTrim(classNames, ',');
        return _.addEventListener(node, 'click', function (event) {
          if (!event.defaultPrevented) {
            node = event.currentTarget;
            return _.each(newClasses, function (className) {
              if ($.hasClass(node, className)) {
                return $.removeClass(node, className);
              } else {
                return $.addClass(node, className);
              }
            });
          }
        });
      }

      /*
       * Example: data-change='@key("value")'
       *          data-change='this.publish("key", "value")'
       */

    }, {
      key: 'data_change',
      value: function data_change(node, rawExpr) {
        var _this16 = this;

        var data = this._data_event_callback(rawExpr);
        var callback = _.applyCallbackOptions(data.callback, data.opts);
        return node.onchange = function (event) {
          return callback.call(_this16, event, event.currentTarget);
        };
      }

      /*
       * Example: data-keydown='@text(node.value); | keyCode: 13'
       *          data-keydown='event.keyCode == 13 && @text(node.value)'
       *          data-keydown='this.publish("key", "myvalue");'
       *          data-keydownoptions='debounce:300'
       */

    }, {
      key: 'data_keydown',
      value: function data_keydown(node, rawExpr) {
        var _this17 = this;

        var data = this._data_event_callback(rawExpr);
        var callback = _.applyCallbackOptions(data.callback, data.opts);
        var keyCode = data.opts && data.opts.keyCode;

        return node.onkeydown = function (event) {
          if (!keyCode || keyCode === event.keyCode) {
            return callback.call(_this17, event, event.currentTarget);
          }
        };
      }

      /*
       * Example: data-keyup='if(key == 13)@text(node.value);'
       *          data-keyup='@text(node.value) | keyCode: 13'
       *          data-keyup='this.publish("key", "myvalue") | debounce:300'
       */

    }, {
      key: 'data_keyup',
      value: function data_keyup(node, rawExpr) {
        var _this18 = this;

        var data = this._data_event_callback(rawExpr);
        var callback = _.applyCallbackOptions(data.callback, data.opts);
        var keyCode = data.opts && data.opts.keyCode;

        return node.onkeyup = function (event) {
          if (!keyCode || keyCode === event.keyCode) {
            return callback.call(_this18, event, event.currentTarget);
          }
        };
      }

      /*
       * Example: data-scroll='@text(node.value) | debounce:300'
       *          data-scroll='this.publish("key", "myvalue")'
       */

    }, {
      key: 'data_scroll',
      value: function data_scroll(node, rawExpr) {
        var _this19 = this;

        var data = this._data_event_callback(rawExpr);
        var opts = data.opts;

        var delta = opts && opts.delta || 100;
        var callback = function callback(event) {
          var rect = node.getBoundingClientRect();
          if (node.scrollTop > node.scrollHeight - (rect.height + delta)) {
            return data.callback.call(_this19, event, node);
          }
        };

        if (opts) {
          callback = _.applyCallbackOptions(callback, opts);
        }
        return _.addEventListener(node, 'scroll', callback);
      }
    }, {
      key: 'data_load',
      value: function data_load(node, value) {
        var _this20 = this;

        var pair = value.split(':');
        var jsPath = pair[0];
        var key = pair[1];
        if (!Widget.prototype._loadData[jsPath]) {
          return _.addEventListener(node, 'click', function (event) {
            if (!Widget.prototype._loadData[jsPath]) {
              Widget.prototype._loadData[jsPath] = true;
              if (key) {
                $.addClass(node, 'loading');
                var unsub = _this20.subscribeOnly(key, function () {
                  $.removeClass(node, 'loading');
                  return unsub();
                });
              }
              return _.loadScript(jsPath);
            }
          });
        }
      }
    }, {
      key: 'data_controller',
      value: function data_controller(node, value) {
        if (this.user_vars == null) {
          this.user_vars = {};
        }
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = Array.from(_.splitAndTrim(value, ';'))[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var data = _step8.value;

            var ctrlClass, opts;
            var pair = _.resolvePipedExpression(data);
            if (pair[1]) {
              opts = _.resolveNiceJSON(pair[1]);
            }
            pair = _.splitAndTrim(pair[0], ':');
            if (pair.length === 0) {
              pair = _.splitAndTrim(pair[0], ' as ');
            }
            if (pair[0] != null) {
              ctrlClass = rh.controller(pair[0]);
            }
            var ctrlName = pair[1];
            if (ctrlClass && !this.user_vars[ctrlName]) {
              var controller = new ctrlClass(this, opts);
              if (ctrlName) {
                this.user_vars[ctrlName] = controller;
              }
            } else if (rh._debug && !ctrlClass) {
              rh._d('error', 'Controller ' + ctrlClass + ' not found');
            }
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }
      }
    }, {
      key: 'data_screenvar',
      value: function data_screenvar(node, value) {
        var sVars = _.splitAndTrim(value, ',');
        var current_screen = _.findIndex(this.get(consts('KEY_SCREEN')), function (v, k) {
          return v.attached;
        });
        var cache = {};
        cache[current_screen] = {};

        var screenKeys = this.get(consts('KEY_SCREEN'));
        return _.each(_.keys(screenKeys), function (key) {
          var _this21 = this;

          return this.subscribeOnly(consts('KEY_SCREEN') + '.' + key + '.attached', function (attached) {
            var name = void 0;
            if (!attached) {
              return;
            }
            _.each(sVars, function (sVar) {
              cache[current_screen][sVar] = this.get(sVar);
              if (cache[key] != null) {
                return this.publish(sVar, cache[key][sVar]);
              }
            }, _this21);
            return cache[name = current_screen = key] != null ? cache[name] : cache[name] = {};
          });
        }, this);
      }
    }]);

    return Widget;
  }(rh.Guard);
  Widget.initClass();
  return Widget;
}();

//######################### Utility methods #########################

rh.widgets = {};
rh.Widget = Widget;
rh.widgets.Basic = Widget;

function __guard__(value, transform) {
  return typeof value !== 'undefined' && value !== null ? transform(value) : undefined;
}

},{}],19:[function(require,module,exports){
"use strict";

var _window = window,
    rh = _window.rh;


rh.registerDataAttr = function (attrName, DataAttrHandler, Widget) {
  if (Widget == null) {
    Widget = rh.Widget;
  }
  var methodName = "data_" + attrName;
  Widget.prototype.dataAttrMethods["data-" + attrName] = methodName;
  Widget.prototype.dataAttrs.push(attrName);
  return Widget.prototype[methodName] = function (node, attrValue) {
    return new DataAttrHandler(this, node, attrValue);
  };
};

},{}],20:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;
var consts = rh.consts;

var Resize = function () {
  function Resize(widget, node, rawExpr) {
    _classCallCheck(this, Resize);

    this.handleMouseDown = this.handleMouseDown.bind(this);
    this.handleMouseMove = this.handleMouseMove.bind(this);
    this.widget = widget;
    this.node = node;

    var _widget$resolveRawExp = this.widget.resolveRawExprWithValue(rawExpr),
        callback = _widget$resolveRawExp.callback,
        opts = _widget$resolveRawExp.opts;

    this.opts = opts;
    this.callback = function () {
      return callback.call(this.widget);
    };

    if (opts.maxx == null) {
      opts.maxx = 1;
    }
    if (opts.minx == null) {
      opts.minx = 0;
    }
    if (opts.maxy == null) {
      opts.maxy = 1;
    }
    if (opts.miny == null) {
      opts.miny = 0;
    }
    this.resize = false;

    _.initMouseMove();
    _.addEventListener(this.node, 'mousedown', this.handleMouseDown);
    this.widget.subscribe(consts('EVT_MOUSEMOVE'), this.handleMouseMove);
  }

  _createClass(Resize, [{
    key: 'handleMouseDown',
    value: function handleMouseDown(evt) {
      if (evt.which !== 1) {
        return;
      }
      this.resize = evt.target === this.node && !evt.defaultPrevented;
      if (this.resize) {
        var result = this.callback();
        return this.resize = result !== false && result !== null;
      }
    }
  }, {
    key: 'handleMouseMove',
    value: function handleMouseMove(obj) {
      if (obj.defaultPrevented) {
        this.resize = false;
      }
      if (!this.resize) {
        return;
      }

      obj.defaultPrevented = true;
      if (obj.which === 1) {
        return this.publish(obj);
      } else {
        return this.resize = false;
      }
    }
  }, {
    key: 'getBaseWidth',
    value: function getBaseWidth() {
      return this.opts.basex || document.body.offsetWidth;
    }
  }, {
    key: 'getBaseHeight',
    value: function getBaseHeight() {
      return this.opts.basey || document.body.offsetHeight;
    }
  }, {
    key: 'publish',
    value: function publish(obj) {
      var base = this.getBaseWidth();
      var rtl = 'rtl' === this.widget.get(consts('KEY_DIR'));
      var newValue = rtl ? base - obj.x : obj.x;
      if (!this.publishPos(base, this.opts.minx, this.opts.maxx, this.opts.x, newValue)) {
        base = this.getBaseHeight();
        newValue = rtl ? base - obj.y : obj.y;
        return this.publishPos(base, this.opts.miny, this.opts.maxy, this.opts.y, newValue);
      }
    }
  }, {
    key: 'publishPos',
    value: function publishPos(base, min, max, key, newValue) {
      if (key != null && newValue != null) {
        var oldValue = this.widget.get(key);
        if (oldValue !== newValue) {
          if (max * base < newValue) {
            newValue = max * base;
          } else if (min * base > newValue) {
            newValue = min * base;
          }
          this.widget.publish(key, newValue + 'px');
          this.callback();
          return true;
        }
      }
    }
  }]);

  return Resize;
}();

rh.registerDataAttr('resize', Resize);

},{}],21:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;

var Table = function () {
  function Table(widget, node, key) {
    _classCallCheck(this, Table);

    this.widget = widget;
    this.node = node;
    this.widget.publish(key, this.extractRowColumnMatrix(this.node));
  }

  _createClass(Table, [{
    key: 'extractRowColumnMatrix',
    value: function extractRowColumnMatrix(node) {
      var rowColMatrix = [];
      var rowElements = [];
      this.widget.traverseNode(node, function (node) {
        if ('TD' === $.nodeName(node)) {
          rowElements.push($.innerHTML(node));
          return false;
        } else if ('TR' === $.nodeName(node)) {
          if (rowElements.length !== 0) {
            rowColMatrix.push(rowElements);
          }
          rowElements = [];
        }
        return true;
      });
      if (rowElements.length !== 0) {
        rowColMatrix.push(rowElements);
      }
      return rowColMatrix;
    }
  }]);

  return Table;
}();

rh.registerDataAttr('table', Table);

},{}],22:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var $ = rh.$;

var TableNestedData = function (_rh$Widget) {
  _inherits(TableNestedData, _rh$Widget);

  function TableNestedData(opts) {
    _classCallCheck(this, TableNestedData);

    var _this = _possibleConstructorReturn(this, (TableNestedData.__proto__ || Object.getPrototypeOf(TableNestedData)).call(this, opts));

    _this.rowColMatrix = _this.extractRowColumnMatrix(_this.node);
    return _this;
  }

  _createClass(TableNestedData, [{
    key: 'extractRowColumnMatrix',
    value: function extractRowColumnMatrix(node) {
      var rowColMatrix = [];
      var rowElements = [];
      this.traverseNode(node, function (node) {
        if ('TD' === $.nodeName(node)) {
          if (this.hasOnlyTable(node)) {
            var childMatrix = this.extractRowColumnMatrix(node.children[0]);
            if (childMatrix.length !== 0) {
              rowElements.push({ child: childMatrix });
            }
          } else {
            rowElements.push({ html: $.innerHTML(node) });
          }
          return false;
        } else if ('TR' === $.nodeName(node)) {
          if (rowElements.length !== 0) {
            rowColMatrix.push(rowElements);
          }
          rowElements = [];
        }
        return true;
      });
      if (rowElements.length !== 0) {
        rowColMatrix.push(rowElements);
      }
      return rowColMatrix;
    }
  }, {
    key: 'hasOnlyTable',
    value: function hasOnlyTable(node) {
      return (node.children != null ? node.children.length : undefined) === 1 && 'TABLE' === $.nodeName(node.children[0]);
    }
  }]);

  return TableNestedData;
}(rh.Widget);

//rh.registerDataAttr 'tabler', TableNestedData


window.rh.widgets.TableNestedData = TableNestedData;

},{}],23:[function(require,module,exports){
"use strict";

//JavaScript handler.
var rh = require("../../src/lib/rh");

rh.IndigoSetSidebar = function () {
	var sideBarToSet = rh.model.get(rh.consts('SIDEBAR_STATE'));

	var body = document.getElementsByTagName("body")[0];
	var toc = document.getElementById("toc-holder");
	var idx = document.getElementById("idx-holder");
	var glo = document.getElementById("glo-holder");
	var fts = document.getElementById("fts-holder");
	var filter = document.getElementById("filter-holder");
	var fav = document.getElementById("favorites-holder");
	var mobileMenu = document.getElementById("mobile-menu-holder");

	var visibleClass = "layout-visible";

	var setVisible = function setVisible(elem) {
		if (typeof elem != "undefined" && elem != null) {
			elem.classList.add(visibleClass);

			//Keyboard focus on first link element in the popup-visible. This allows better keyboard access.
			var input = elem.getElementsByTagName("input")[0];
			if (typeof input != "undefined" && rh.model.get(rh.consts('KEY_SCREEN_DESKTOP'))) {
				if (input.classList.contains("wSearchField")) {
					rh.model.cpublish('EVT_CLOSE_SEARCH_SUGGESTION', true);
					setTimeout(function () {
						input.focus();
					}, 300);
				} else {
					input.focus();
				}
			} else if (rh.model.get(rh.consts('KEY_SCREEN_DESKTOP'))) {
				var list = elem.getElementsByTagName("li");

				if (typeof list[0] != "undefined") {
					list[0].focus();
				} else {

					var links = elem.getElementsByTagName("a");
					if (typeof links[1] != "undefined") {
						links[1].focus();
					} else if (typeof links[0] != "undefined") {
						links[0].focus();
					}
				}
			}
		}
	};
	var setHidden = function setHidden(elem) {
		if (typeof elem != "undefined" && elem != null) {
			elem.classList.remove(visibleClass);
		}
	};

	var menuDelay = "has-delay";
	var menuImmediate = "no-transform";

	var showOtherMenu = function showOtherMenu() {
		mobileMenu.classList.add(menuDelay);

		setTimeout(function () {
			mobileMenu.classList.remove(menuDelay);
			mobileMenu.classList.add(menuImmediate);
		}, 750);
	};

	var hideOtherMenu = function hideOtherMenu() {
		setTimeout(function () {
			mobileMenu.classList.remove(menuImmediate);
		}, 750);
	};

	body.classList.add("popup-visible");

	switch (sideBarToSet) {
		case "toc":
			showOtherMenu();
			setVisible(toc);
			setHidden(idx);
			setHidden(glo);
			setHidden(fts);
			setHidden(filter);
			setHidden(fav);
			setHidden(mobileMenu);
			break;
		case "idx":
			showOtherMenu();
			setVisible(idx);
			setHidden(toc);
			setHidden(glo);
			setHidden(fts);
			setHidden(filter);
			setHidden(fav);
			setHidden(mobileMenu);
			break;
		case "glo":
			showOtherMenu();
			setVisible(glo);
			setHidden(idx);
			setHidden(toc);
			setHidden(fts);
			setHidden(filter);
			setHidden(fav);
			setHidden(mobileMenu);
			break;
		case "fts":
			showOtherMenu();
			setVisible(fts);
			setHidden(idx);
			setHidden(glo);
			setHidden(toc);
			setHidden(filter);
			setHidden(fav);
			setHidden(mobileMenu);
			break;
		case "filter":
			showOtherMenu();
			setVisible(filter);
			setHidden(idx);
			setHidden(glo);
			setHidden(fts);
			setHidden(toc);
			setHidden(fav);
			setHidden(mobileMenu);
			break;
		case "favorites":
			showOtherMenu();
			setVisible(fav);
			setHidden(idx);
			setHidden(glo);
			setHidden(fts);
			setHidden(toc);
			setHidden(filter);
			setHidden(mobileMenu);
			break;
		case "menu":
			setVisible(mobileMenu);
			hideOtherMenu();
			setHidden(idx);
			setHidden(glo);
			setHidden(fts);
			setHidden(toc);
			setHidden(fav);
			setHidden(filter);
			break;
		default:
			//Nothing. Show topic
			setHidden(idx);
			setHidden(glo);
			setHidden(fts);
			setHidden(toc);
			setHidden(filter);
			setHidden(fav);
			setHidden(mobileMenu);
			hideOtherMenu();
			body.classList.remove("popup-visible");
			if (rh.model.get(rh.consts('KEY_SCREEN_DESKTOP'))) {
				rh.IndigoSetFocusOnSearch();
			}
	}
};
rh.IndigoSetFocusOnSearch = function () {
	var input = document.getElementsByTagName("input");
	for (var i = 0; i < input.length; i++) {
		if (input[i].classList.contains("wSearchField")) {
			rh.model.cpublish('EVT_CLOSE_SEARCH_SUGGESTION', true);
			setTimeout(function () {
				input[i].focus();
			}, 300);
			break;
		}
	}
};
rh.IndigoSetSidebarSearch = function () {
	rh.model.publish(rh.consts("SIDEBAR_STATE"), "fts");
};
rh.IndigoSetTransitionAllow = function () {
	var body = document.getElementsByTagName("body")[0];

	var allowPhone = "allow-phone-transitions";
	var allowTablet = "allow-tablet-transitions";
	var allowDesktop = "allow-desktop-transitions";

	body.classList.remove(allowPhone);
	body.classList.remove(allowTablet);
	body.classList.remove(allowDesktop);

	var toSet = false;
	if (rh.model.get(rh.consts('KEY_SCREEN_PHONE')) == true) {
		toSet = allowPhone;
	} else if (rh.model.get(rh.consts('KEY_SCREEN_TABLET')) == true) {
		toSet = allowTablet;
	} else if (rh.model.get(rh.consts('KEY_SCREEN_DESKTOP')) == true) {
		toSet = allowDesktop;
	}

	setTimeout(function () {

		body.classList.remove(allowPhone); //Always make sure there is only 1
		body.classList.remove(allowTablet);
		body.classList.remove(allowDesktop);

		body.classList.add(toSet);
	}, 10);
};

rh.initIndigo = function () {

	rh.model.subscribe(rh.consts("SIDEBAR_STATE"), rh.IndigoSetSidebar);
	rh.model.subscribe(rh.consts("EVT_SEARCH_IN_PROGRESS"), rh.IndigoSetSidebarSearch);
	rh.model.subscribe(rh.consts("KEY_SCREEN"), rh.IndigoSetTransitionAllow);

	//When opening the page, check whether there is a highlight term.
	//If found, add it to the search box
	setTimeout(function () {
		var highlight = getUrlParameter(RHHIGHLIGHTTERM);
		if (highlight != "") {
			var input = document.getElementsByTagName("input");
			for (var i = 0; i < input.length; i++) {
				if (input[i].classList.contains("wSearchField")) {
					input[i].value = highlight;
					break;
				}
			}
			rh.model.publish(rh.consts('KEY_SEARCH_TERM'), highlight);
		}
	}, 250);

	//For Keyboard accessibility, get the ESC key to close overlays
	document.onkeydown = function (evt) {
		evt = evt || window.event;
		if (evt.keyCode == 27) {
			rh.model.publish(rh.consts('SIDEBAR_STATE'), false);
			rh.IndigoSetFocusOnSearch(); //Focus on the search for keyboard accessibility
		}
	};
};

},{"../../src/lib/rh":44}],24:[function(require,module,exports){
'use strict';

var _ = window.rh._;


_.stackTrace = function () {
  var err = new Error();
  return err.stack;
};

_.safeExec = function (fn) {
  return function () {
    try {
      return fn.apply(this, arguments);
    } catch (error) {
      if (rh._debug) {
        rh._d('error', 'Function: ' + fn, error.message);
      }
      return undefined;
    }
  };
};

},{}],25:[function(require,module,exports){
'use strict';

var _ = window.rh._;


_.addEventListener = function (obj, eventName, callback) {
  if (obj == null) {
    obj = window;
  }
  if (obj.addEventListener != null) {
    return obj.addEventListener(eventName, callback, false);
  } else if (obj.attachEvent != null) {
    return obj.attachEvent('on' + eventName, callback);
  }
};

_.removeEventListener = function (obj, eventName, callback) {
  if (obj == null) {
    obj = window;
  }
  if (obj.removeEventListener != null) {
    return obj.removeEventListener(eventName, callback, false);
  } else if (obj.detachEvent != null) {
    return obj.detachEvent('on' + eventName, callback);
  }
};

_.isTouchEnabled = function () {
  return 'ontouchstart' in document.documentElement;
};

_.preventDefault = function (e) {
  if (e.preventDefault != null) {
    return e.preventDefault();
  } else {
    return e.returnValue = false;
  }
};

_.mouseButton = function (e) {
  if ('buttons' in e) {
    return e.buttons;
  } else if ('which' in e) {
    return e.which;
  } else {
    return e.button;
  }
};

_.initMouseMove = function () {
  var initDone = false;
  return function () {
    if (!initDone) {
      initDone = true;
      return _.addEventListener(document, 'mousemove', function (e) {
        if (!e.defaultPrevented) {
          var obj = { x: e.clientX, y: e.clientY, which: _.mouseButton(e) };
          rh.model.publish(rh.consts('EVT_MOUSEMOVE'), obj, { sync: true });
          if (obj.defaultPrevented) {
            return _.preventDefault(e);
          }
        }
      });
    }
  };
}();

_.getScroll = function () {
  if (window.pageYOffset != undefined) {
    return [pageXOffset, pageYOffset];
  } else {
    var sx,
        sy,
        d = document,
        r = d.documentElement,
        b = d.body;
    sx = r.scrollLeft || b.scrollLeft || 0;
    sy = r.scrollTop || b.scrollTop || 0;
    return [sx, sy];
  }
};

_.initTouchEvent = function () {
  var initDone = false;
  return function () {
    if (!initDone && _.isTouchEnabled()) {
      var x = void 0,
          y = void 0,
          y1 = void 0;
      initDone = true;
      var x1 = y1 = x = y = 0;

      var calculateDirection = _.debounce(function () {
        var direction = void 0;
        var angle = Math.atan((y1 - y) / (x1 - x));
        if (x1 > x) {
          direction = angle > Math.PI / 4 ? 'down' : angle < -Math.PI / 4 ? 'up' : 'right';
        } else {
          direction = angle > Math.PI / 4 ? 'up' : angle < -Math.PI / 4 ? 'down' : 'left';
        }
        rh.model.publish('.touchmove', { x: x, y: y, x1: x1, y1: y1 });
        rh.model.publish(rh.consts('EVT_SWIPE_DIR'), direction, { sync: true });
        rh.model.publish(rh.consts('EVT_SWIPE_DIR'), null);
        return x = y = 0;
      }, 200);

      return _.addEventListener(document, 'touchmove', function (e) {
        x1 = (e.touches[0] != null ? e.touches[0].pageX : undefined) || 0;
        y1 = (e.touches[0] != null ? e.touches[0].pageY : undefined) || 0;
        if (x === 0 && y === 0) {
          x = x1;
          y = y1;
        }

        calculateDirection();
        return _.preventDefault(e);
      });
    }
  };
}();

},{}],26:[function(require,module,exports){
'use strict';

var _ = window.rh._;

// Regular Expressions

// Ex: @key('wow') => this.publish('key', 'wow');

var publishRegx = /(^|[^\\])@([\w\.]*)\((.*)\)/;

// Ex: x = @key => x = this.get('key');
var getRegx = /(^|[^\\])@([\w\.]*)/;

// Ex: x = @KEY => x = rh.consts('KEY')
var modelConstsRegx = /@([A-Z][_A-Z0-9]*)/;

_.resolvePublish = function (expression) {
  var regex = new RegExp(publishRegx);
  while (true) {
    var match = regex.exec(expression);
    if (!match) {
      break;
    }
    expression = expression.replace(match[0], match[1] + ' this.publish(\'' + match[2] + '\', ' + match[3] + ')');
  }
  return expression;
};

_.resolveGet = function (expression, keys) {
  var regex = new RegExp(getRegx);
  while (true) {
    var match = regex.exec(expression);
    if (!match) {
      break;
    }
    if (keys && -1 === keys.indexOf(match[2])) {
      keys.push(match[2]);
    }
    expression = expression.replace(match[0], match[1] + ' this.get(\'' + match[2] + '\')');
  }
  return expression;
};

_.resolveModelConst = function (expression) {
  var subexp = '';
  var regex = new RegExp(modelConstsRegx);
  while (true) {
    var match = regex.exec(expression);
    if (!match) {
      break;
    }
    var key = rh.consts(match[1]);
    if (key != null) {
      expression = expression.replace(match[0], '@' + key);
    } else {
      var index = match.index + match[1].length + 1;
      subexp += expression.substring(0, index);
      expression = expression.substring(index);
    }
  }
  return subexp + expression;
};

_.resolveModelKeys = function (expression, keys) {
  return this.resolveGet(this.resolvePublish(this.resolveModelConst(expression)), keys);
};

_.isValidModelKey = function (key) {
  if (key === 'true' || key === 'false') {
    return false;
  }
  var match = key.match(/[._a-zA-Z][._a-zA-Z0-9 ]*/);
  return match && match[0] === key;
};

_.isValidModelConstKey = function (key) {
  var match = key.match(/[A-Z][_A-Z0-9]*/);
  return match && match[0] === key;
};

_.get = function (obj, itemKey) {
  var value = void 0;
  var keys = itemKey.split('.');
  for (var index = 0; index < keys.length; index++) {
    var key = keys[index];
    if (index === 0) {
      value = obj[key];
    } else if (value) {
      value = value[key];
    } else {
      break;
    }
  }
  return value;
};

_.groupBy = function (array, keyOrIterator) {
  var iterator, key;
  if (typeof key !== 'function') {
    key = String(keyOrIterator);
    iterator = function iterator(item) {
      return item[key];
    };
  } else {
    iterator = keyOrIterator;
  }
  return array.reduce(function (memo, item) {
    var key = iterator(item);
    memo[key] = memo[key] || [];
    memo[key].push(item);
    return memo;
  }, {});
};

_.isScreenAttached = function (scrrenName) {
  return true === rh.model.get(rh.consts('KEY_SCREEN') + '.' + scrrenName + '.attached');
};

_.parentKey = function (fullKey) {
  var keys = fullKey.split('.');
  keys.pop();
  return keys.join('.');
};

_.lastKey = function (fullKey) {
  var keys = fullKey.split('.');
  return keys[keys.length - 1];
};

_.splitKey = function (fullKey) {
  var keys = fullKey.split('.');
  var key = keys.pop();
  var parentKey = keys.join('.');
  return { key: key, parentKey: parentKey };
};

},{}],27:[function(require,module,exports){
'use strict';

var _ = window.rh._;

//Regular Expressions

//Ex: "abc #{var1}"

var enclosedVarRegx = /\#{([^}]*)\}/g;
var userVarRegx = /\$([_a-zA-Z][_a-zA-Z0-9]*)/g;
var regxStringRegx = /\B\/([^\/]*)\//g;

_.toRegExp = function (str) {
  var regx = void 0;
  if (!str || !_.isString(str)) {
    return str;
  }
  var matches = str.match(regxStringRegx);
  var match = matches && matches[0];
  if (match) {
    var pattern = match.substring(1, match.length - 1);
    var flag = str.substring(match.length);
    regx = new RegExp(pattern, flag);
  }
  return regx || str;
};

_.splitAndTrim = function (string, splitKey) {
  if (string == null) {
    string = '';
  }
  return _.map(string.split(splitKey), function (value) {
    return value.trim();
  });
};

/*
 * Explodes a string based on explodeKey then
 * creates a map using the exploded strings by splitting them further on mapKey
 */
_.explodeAndMap = function (string, explodeKey, mapKey, opts) {
  if (string == null) {
    string = ' ';
  }
  if (opts == null) {
    opts = {};
  }
  var pairs = string.split(explodeKey);
  var regex = new RegExp(mapKey + '(.+)?');
  var map = {};

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Array.from(pairs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var rawPair = _step.value;

      var pair = rawPair.split(regex);
      var key = pair[0].trim();
      var value = pair[1];

      if (opts.caseInsensitive) {
        key = key.toLowerCase();
      }
      if (opts.trim) {
        value = value && value.trim();
      }
      if (opts.default != null && value == null) {
        value = opts.default;
      }

      if (key !== '') {
        map[key] = value;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return map;
};

_.resolveNamedVar = function (expr) {
  var matches = void 0;
  if (matches = expr.match(userVarRegx)) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = Array.from(matches)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var match = _step2.value;

        expr = expr.replace(match, 'this.user_vars.' + match.substring(1));
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
  return expr;
};

_.resolveEnclosedVar = function (expr, callback, context) {
  var matches = void 0;
  if (context == null) {
    context = this;
  }
  if (matches = expr.match(enclosedVarRegx)) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = Array.from(matches)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var match = _step3.value;

        var name = match.substring(2, match.length - 1).trim();
        var value = callback.call(context, name);
        expr = expr.replace(match, value != null ? value : '');
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  }
  return expr;
};

// use '.' as attrib name to pass opts for attrs data
_.resolveAttr = function (string) {
  return _.reduce(_.explodeAndMap(string, ';', ':'), function (r, v, k) {
    _.each(k.split(','), function (key) {
      return r[key.trim()] = v;
    });
    return r;
  }, {});
};

_.resolveNiceJSON = function (string) {
  if (string == null) {
    string = '';
  }
  string = string.trim();
  if (!string) {
    return {};
  }
  if (string[0] === '{') {
    return JSON.parse(string);
  } else {
    string = string.replace(/'/g, '"');
    string = '{' + string + '}';
    return JSON.parse(string.replace(/(\{|,)\s*(.+?)\s*:/g, '$1 "$2":'));
  }
};

_.resolvePipedExpression = function (string) {
  if (string == null) {
    string = '';
  }
  var concatNext = false;
  return _.reduce(string.split('|'), function (result, item) {
    var mergedItem = void 0;
    if (concatNext && result.length > 0) {
      mergedItem = result[result.length - 1] + ' ||' + item;
      result.length = result.length - 1;
    }

    concatNext = item.length === 0;
    if (mergedItem) {
      item = mergedItem;
    }

    if (item.length !== 0) {
      result.push(item.trim());
    }
    return result;
  }, []);
};

_.resolveLoopExpr = function (config) {
  var value = config.split(':');
  if (value.length > 1) {
    var vars = _.splitAndTrim(value.shift(), ',');
    return { expr: value[0], index: vars[0], item: vars[1] };
  } else {
    return { expr: value[0] };
  }
};

_.resolveWidgetArgs = function (rawArgs) {
  var pairs = rawArgs.split(';');
  return _.map(pairs, function (pair) {
    var wArg = void 0;
    var pipedArgs = _.resolvePipedExpression(pair);
    var args = pipedArgs.shift() || '';
    args = args.split(/:(.+)?/);
    var wName = args[0].trim();
    var rawArg = pair.substring(wName.length).trim();
    if (rawArg[0] === ':') {
      rawArg = rawArg.substring(1);
    }
    if (wArg = args[1]) {
      if (-1 !== wArg.search(':')) {
        wArg = _.explodeAndMap(wArg, ',', ':', { trim: true });
      } else {
        wArg = { arg: wArg };
      }
    }
    return { wName: wName, wArg: wArg, pipedArgs: pipedArgs, rawArg: rawArg };
  });
};

_.resolveExprOptions = function (rawArgs) {
  var opts = void 0;
  var values = _.resolvePipedExpression(rawArgs);
  if (values[1]) {
    opts = _.resolveNiceJSON(values[1]);
  }
  return { expr: values[0], opts: opts };
};

_.resolveInputKeys = function (rawArgs) {
  var opts = void 0;
  var values = _.resolvePipedExpression(rawArgs);
  if (values[1]) {
    opts = _.resolveNiceJSON(values[1]);
  }
  var keys = _.explodeAndMap(values[0], ',', ':', { trim: true });
  return { keys: keys, opts: opts };
};

_.applyCallbackOptions = function (callback, opts) {
  var newCallback = callback;
  if (opts && opts.debounce) {
    newCallback = _.debounce(newCallback, opts.debounce);
  }

  if (opts && opts.toggleTimeout) {
    newCallback = _.toggleTimeout(newCallback, opts.toggleTimeout);
  }

  if (opts && opts.timeout) {
    newCallback = _.timeout(newCallback, opts.timeout);
  }

  if (opts && opts.defer) {
    newCallback = _.timeout(newCallback, 1);
  }

  return newCallback;
};

_.parseInt = function (string, defaultValue, base) {
  if (base == null) {
    base = 10;
  }
  if (string != null && string !== '') {
    return parseInt(string, base);
  } else if (defaultValue != null) {
    return defaultValue;
  } else {
    return string;
  }
};

},{}],28:[function(require,module,exports){
'use strict';

var _ = window.rh._;


_.hasNonAsciiChar = function (str) {
  if (str == null) {
    str = '';
  }return _.any(str, function (ch) {
    return ch.charCodeAt(0) > 127;
  });
};

},{}],29:[function(require,module,exports){
'use strict';

var _ = window.rh._;
var consts = window.rh.consts;


_.mapToEncodedString = function (map, explodeKey, mapKey) {
  if (explodeKey == null) {
    explodeKey = '&';
  }
  if (mapKey == null) {
    mapKey = '=';
  }
  return _.reduce(map, function (result, value, key) {
    if (value != null) {
      if (result.length > 0) {
        result += explodeKey;
      }
      result += '' + key + mapKey + encodeURIComponent(value);
    }
    return result;
  }, '');
};

_.encodedStringToMap = function (string, explodeKey, mapKey) {
  if (explodeKey == null) {
    explodeKey = '&';
  }
  if (mapKey == null) {
    mapKey = '=';
  }
  var map = _.explodeAndMap(string, explodeKey, mapKey, { default: '' });
  _.each(map, function (value, key) {
    try {
      map[key] = decodeURIComponent(value);
    } catch (e) {
      map[key] = value;
    }
  });
  return map;
};

_.urlParams = function (query) {
  if (query == null) {
    query = _.extractParamString(location.search);
  }
  return _.encodedStringToMap(query);
};

_.urlParam = function (key, query) {
  if (query == null) {
    query = location.search.substring(1);
  }
  return key && _.urlParams(query)[key];
};

_.hashParams = function (hash) {
  if (hash == null) {
    hash = location.hash.substring(1);
  }
  return _.encodedStringToMap(hash);
};

_.hashParam = function (key) {
  return key && _.hashParams()[key];
};

_.updateHashMap = function (changeMap, addToHistory) {
  var newMap = _.extend({}, _.hashParams(), changeMap);
  _.each(newMap, function (value, key) {
    if (value === "" || value === null) {
      delete newMap[key];
    }
  });
  var hash = _.mapToEncodedString(newMap);
  if (hash.length > 0) {
    hash = '#' + hash;
  }

  if (addToHistory) {
    return location.hash = hash;
  } else if (hash !== '' && location.hash !== hash) {
    return location.replace(hash);
  }
};

_.queueUpdateHashMap = function (hashMap, addToHistory) {
  return _.defer(function () {
    return _.updateHashMap(hashMap, addToHistory);
  });
};

_.stripStringBetween = function (str, startChar, endChar) {
  var newStr = void 0;
  var start = str.indexOf(startChar);
  if (start !== -1) {
    var end = str.indexOf(endChar);
    if (end < start) {
      end = str.length;
    }
    newStr = '' + str.substring(0, start) + str.substring(end, str.length);
  }
  return newStr || str;
};

_.stripParam = function (url) {
  if (url == null) {
    url = document.location.href;
  }
  return _.stripStringBetween(url, '?', '#');
};

_.stripBookmark = function (url) {
  if (url == null) {
    url = document.location.href;
  }
  return _.stripStringBetween(url, '#', '?');
};

_.extractStringBetween = function (str, startChar, endChar) {
  var substring = void 0;
  var start = str.indexOf(startChar);
  if (start !== -1) {
    var end = str.indexOf(endChar);
    if (end < start) {
      end = str.length;
    }
    substring = str.substring(start + 1, end);
  }
  return substring || '';
};

_.extractParamString = function (url) {
  if (url == null) {
    url = document.location.href;
  }
  return _.extractStringBetween(url, '?', '#');
};

_.extractHashString = function (url) {
  if (url == null) {
    url = document.location.href;
  }
  return _.extractStringBetween(url, '#', '?');
};

//#####
// pathTraverseTo(fromPath, toPath)
// Takes in two absolute paths and simulates
// traversal from fromPath to toPath.
// Returns the steps neeed to traverse from
// fromPath to toPath.
//#####
// TODO: Complete this method
_.traverseToPath = function (fromPath, toPath) {
  return '';
};

var processPathUnit = function processPathUnit(fullPath, pathUnit, separator) {
  if (separator == null) {
    separator = '/';
  }
  switch (pathUnit) {
    case '.':
      return fullPath;
    case '..':
      return fullPath.substring(0, fullPath.lastIndexOf(separator));
    default:
      return fullPath + separator + pathUnit;
  }
};

//#####
// pathTraverseBy(fromPath, traverseBy)
// Takes in two path components and simulates
// traversal from fromPath by traverseBy.
// Returns the resulting path after the traversal.
// Eg: 'C:/a/b/c/', '../../' retuns 'C:/a/'
//#####
_.traverseByPath = function (fromPath, traverseBy, separator) {
  if (separator == null) {
    separator = '/';
  }
  fromPath = fromPath.substring(0, fromPath.lastIndexOf(separator));
  var parts = traverseBy.split(separator);

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Array.from(parts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var part = _step.value;

      if (part.length > 0) {
        fromPath = processPathUnit(fromPath, part, separator);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return fromPath + separator;
};

_.scheme = function (url) {
  var scheme = void 0;
  var index = url.indexOf(':');
  if (index !== -1) {
    scheme = url.substring(0, index + 1).toLowerCase().trim();
  }
  return scheme;
};

_.protocol = function (url) {
  var protocol = void 0;
  var index = url.trim().indexOf(':');
  if (index !== -1) {
    protocol = url.substring(0, index + 1).toLowerCase();
  }
  if (protocol) {
    var match = protocol.match(/^[a-z]+:/);
    if (!match || match[0].length !== protocol.length) {
      protocol = undefined;
    }
  }
  return protocol;
};

_.isInternal = function (urlName) {
  return urlName.indexOf('//') !== 0 && urlName.indexOf('/&#47;') !== 0 && urlName.indexOf('&#47;/') !== 0 && urlName.indexOf('&#47;&#47;') !== 0;
};

_.isJavaScriptUrl = function (url) {
  return 'javascript:' === _.scheme(url);
};

_.isRelativeUrl = function (url) {
  return !_.scheme(url) && url.trim().indexOf('/');
};

_.isValidFileUrl = function (url) {
  if (url[0] === '#') {
    return false;
  }
  var scheme = _.scheme(url);
  return !scheme || ['http:', 'https:', 'ftp:', 'file:'].indexOf(scheme) !== -1;
};

_.makeRelativeUrl = function (absUrl, baseUrl) {
  if (baseUrl == null) {
    baseUrl = decodeURI(document.location.href);
  }
  if (absUrl === baseUrl) {
    return '';
  }
  var absPath = _.filePath(absUrl);
  var basePath = _.filePath(baseUrl);
  var relPath = _.makeRelativePath(absPath, basePath);
  return '' + relPath + absUrl.substring(absPath.length);
};

_.makeRelativePath = function (absUrl, baseUrl) {
  var relUrl = void 0;
  if (baseUrl == null) {
    baseUrl = _.filePath();
  }
  if (absUrl && !_.isRelativeUrl(absUrl) && !_.isRelativeUrl(baseUrl)) {
    var srcParts = absUrl.split('/');
    var baseParts = baseUrl.split('/');
    var idx = 0;
    while (true) {
      if (srcParts.length === idx || baseParts.length === idx) {
        break;
      }
      if (srcParts[idx] !== baseParts[idx]) {
        break;
      }
      idx++;
    }

    var relParts = srcParts.slice(idx);
    relUrl = '';
    var dotdotcount = baseParts.length - idx - 1;
    while (true) {
      if (dotdotcount <= 0) {
        break;
      }
      relUrl += '../';
      dotdotcount--;
    }
    relUrl += relParts.join('/');
  } else {
    relUrl = absUrl;
  }
  return relUrl;
};

_.makeFullUrl = function (relUrl, parentPath) {
  if (parentPath == null) {
    parentPath = rh._.parentPath();
  }
  if (_.isRelativeUrl(relUrl)) {
    return window._getFullPath(parentPath, relUrl);
  } else {
    return relUrl;
  }
};

_.isLocal = function () {
  return window.location.protocol === 'file:';
};

_.isRemote = function () {
  return window.location.protocol !== 'file:';
};

var curOrigin = null;
_.isSameOrigin = function (origin) {
  if (_.isLocal()) {
    return true;
  }
  var _window = window,
      location = _window.location;

  if (curOrigin == null) {
    curOrigin = location.origin;
  }
  if (curOrigin == null) {
    curOrigin = location.protocol + '//' + location.hostname;
    if (location.port) {
      curOrigin += ':' + location.port;
    }
  }
  return curOrigin === origin;
};

_.filePath = function (url) {
  if (url == null) {
    url = decodeURI(document.location.href);
  }
  var index = url.indexOf('?');
  if (index !== -1) {
    url = url.substring(0, index);
  }
  index = url.indexOf('#');
  if (index !== -1) {
    url = url.substring(0, index);
  }
  return url;
};

_.parentPath = function (filePath) {
  if (filePath == null) {
    filePath = _.filePath();
  }
  var index = filePath.lastIndexOf('/');
  if (index !== -1) {
    filePath = filePath.substring(0, index + 1);
  }
  return filePath;
};

_.getFileName = function (absUrl) {
  var filePath = _.filePath(absUrl);
  var idx = filePath.lastIndexOf('/');
  var fiileName = idx !== -1 ? filePath.substring(idx + 1) : filePath;
  return fiileName || '';
};

_.getFileExtention = function (absUrl) {
  var ext = void 0;
  var fiileName = _.getFileName(absUrl);
  var idx = fiileName != null ? fiileName.lastIndexOf('.') : undefined;
  if (idx !== -1) {
    ext = fiileName.substring(idx);
  }
  return ext || '';
};

},{}],30:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (window.rh == null) {
  window.rh = {};
}
var _window = window,
    rh = _window.rh;

if (rh._ == null) {
  rh._ = {};
}
rh.util = rh._;
var _ = rh._;


var nativeForEach = Array.prototype.forEach;
var nativeKeys = Object.keys;
var hasOwnProperty = Object.prototype.hasOwnProperty;


_.time = function () {
  return new Date().getTime();
};

_.delay = function (fn, wait) {
  var args = [];var i = 1;
  while (++i < arguments.length) {
    args.push(arguments[i]);
  }
  return setTimeout(function () {
    return fn.apply(null, args);
  }, wait);
};

_.defer = function (fn) {
  var args = [];var i = 0;
  while (++i < arguments.length) {
    args.push(arguments[i]);
  }
  return this.delay.apply(this, [fn, 1].concat(args));
};

_.debounce = function (fn, threshold, execAsap) {
  var timeout = null;
  return function () {
    var args = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Array.from(arguments)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var arg = _step.value;
        args.push(arg);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var obj = this;
    var delayed = function delayed() {
      if (!execAsap) {
        fn.apply(obj, args);
      }
      return timeout = null;
    };
    if (timeout) {
      clearTimeout(timeout);
    } else if (execAsap) {
      fn.apply(obj, args);
    }
    return timeout = setTimeout(delayed, threshold || 100);
  };
};

_.throttle = function (fn, threshold) {
  var timeout = null;
  var fnExecuted = false;
  return function () {
    var args = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = Array.from(arguments)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var arg = _step2.value;
        args.push(arg);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var obj = this;
    var delayed = function delayed() {
      if (!fnExecuted) {
        fn.apply(obj, args);
      }
      return timeout = null;
    };
    if (timeout) {
      clearTimeout(timeout);
      fnExecuted = false;
    } else {
      fn.apply(obj, args);
      fnExecuted = true;
    }

    return timeout = setTimeout(delayed, threshold || 100);
  };
};

_.timeout = function (fn, wait) {
  return function () {
    var args = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = Array.from(arguments)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var arg = _step3.value;
        args.push(arg);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    var obj = this;
    var delayed = function delayed() {
      return fn.apply(obj, args);
    };
    return setTimeout(delayed, wait);
  };
};

_.toggleTimeout = function (fn, wait, toggle) {
  return function () {
    var args = [];
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = Array.from(arguments)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var arg = _step4.value;
        args.push(arg);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    var obj = this;
    var delayed = function delayed() {
      return fn.apply(obj, args);
    };
    if (toggle) {
      if (rh._debug) {
        args.push(_.stackTrace());
      }
      setTimeout(delayed, wait);
    } else {
      delayed();
    }
    return toggle = !toggle;
  };
};

// Object methods

_.has = function (obj, key) {
  return obj != null && hasOwnProperty.call(obj, key);
};

_.keys = function (obj) {
  var keys = [];
  if (!_.isObject(obj)) {
    return keys;
  }
  if (nativeKeys) {
    return nativeKeys(obj);
  }
  for (var key in obj) {
    if (_.has(obj, key)) {
      keys.push(key);
    }
  }
  return keys;
};

//Iterators

_.any = function (obj, fn, context) {
  if (context == null) {
    context = this;
  }
  if (obj == null) {
    return false;
  }
  var keys = obj.length !== +obj.length && _.keys(obj);

  var _ref = keys || obj,
      length = _ref.length;

  var index = 0;
  while (true) {
    if (index >= length) {
      break;
    }
    var key = keys ? keys[index] : index;
    if (fn.call(context, obj[key], key, obj)) {
      return true;
    }
    index++;
  }
  return false;
};

_.each = function (obj, fn, context) {
  var value = void 0;
  if (context == null) {
    context = this;
  }
  if (obj == null) {
    return;
  }
  if (nativeForEach === obj.forEach) {
    obj.forEach(fn, context);
  } else if (obj.length === +obj.length) {
    for (var index = 0; index < obj.length; index++) {
      value = obj[index];fn.call(context, value, index, obj);
    }
  } else {
    for (var key in obj) {
      value = obj[key];fn.call(context, value, key, obj);
    }
  }
  return obj;
};

_.map = function (obj, fn, context) {
  if (context == null) {
    context = this;
  }
  var result = [];
  _.each(obj, function (value, key, obj) {
    return result.push(fn.call(context, value, key, obj));
  });
  return result;
};

_.reduce = function (obj, fn, initial, context) {
  if (context == null) {
    context = this;
  }
  _.each(obj, function (value, key) {
    return initial = fn.call(context, initial, value, key);
  });
  return initial;
};

_.find = function (obj, fn, context) {
  if (context == null) {
    context = this;
  }
  var result = undefined;
  _.any(obj, function (value, key, obj) {
    if (fn.call(context, value, key, obj)) {
      result = value;
      return true;
    }
  });
  return result;
};

_.findIndex = function (obj, fn, context) {
  if (context == null) {
    context = this;
  }
  var result = -1;
  _.any(obj, function (value, key, obj) {
    if (fn.call(context, value, key, obj)) {
      result = key;
      return true;
    }
  });
  return result;
};

_.findParentNode = function (node, rootNode, fn, context) {
  if (rootNode == null) {
    rootNode = document;
  }
  if (context == null) {
    context = this;
  }
  var result = null;
  while (true) {
    if (!node || node === rootNode) {
      break;
    }
    if (fn.call(context, node)) {
      result = node;
      break;
    }
    node = node.parentNode;
  }
  return result;
};

_.filter = function (obj, fn, context) {
  if (context == null) {
    context = this;
  }
  var result = [];
  _.each(obj, function (value, key, obj) {
    if (fn.call(context, value, key, obj)) {
      return result.push(value);
    }
  });
  return result;
};

_.flatten = function (obj) {
  return _.reduce(obj, function (result, elem) {
    return result.concat(elem);
  }, []);
};

_.unique = function (obj, fn, context) {
  if (context == null) {
    context = this;
  }
  if (fn) {
    obj = _.map(obj, fn, context);
  }
  return _.filter(obj, function (value, index) {
    return obj.indexOf(value) === index;
  });
};

_.union = function (obj, fn, context) {
  if (context == null) {
    context = this;
  }
  if (fn) {
    obj = _.map(obj, fn, context);
  }
  return _.unique(_.flatten(obj));
};

_.count = function (obj, fn, context) {
  if (context == null) {
    context = this;
  }
  var count = 0;
  _.each(obj, function (value, key, obj) {
    if (fn.call(context, value, key, obj)) {
      return count++;
    }
  });
  return count;
};

_.extend = function (obj, oldObj, newObj) {
  if (oldObj) {
    _.each(oldObj, function (value, key) {
      return obj[key] = value;
    });
  }
  if (newObj) {
    _.each(newObj, function (value, key) {
      return obj[key] = value;
    });
  }
  return obj;
};

_.addPathNameKey = function (obj) {
  return _.extend(obj, { 'pathname': decodeURIComponent(window.location.pathname) });
};

_.clone = function (obj) {
  if (!_.isObject(obj)) {
    return obj;
  }
  return _.reduce(obj, function (result, value, key) {
    result[key] = _.clone(value);
    return result;
  }, {});
};

_.compact = function (array) {
  return _.filter(array, function (item) {
    return item;
  });
};

_.compactObject = function (obj) {
  if (obj == null) {
    obj = {};
  }
  return _.reduce(obj, function (result, value, key) {
    if (value != null) {
      if (_.isObject(value)) {
        value = _.compactObject(value);
        if (!_.isEmptyObject(value)) {
          result[key] = value;
        }
      } else {
        result[key] = value;
      }
    }
    return result;
  }, {});
};

_.isString = function (value) {
  return typeof value === 'string';
};

_.isFunction = function (value) {
  return typeof value === 'function';
};

_.isObject = function (value) {
  return value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
};

_.isDefined = function (value) {
  return value !== null && value !== undefined;
};

_.isEmptyString = function (value) {
  return value.length === 0;
};

_.isUsefulString = function (value) {
  return _.isDefined(value) && !_.isEmptyString(value);
};

_.isEmptyObject = function (value) {
  return Object.keys(value).length === 0;
};

_.isEqual = function (obj1, obj2) {
  if ((typeof obj1 === 'undefined' ? 'undefined' : _typeof(obj1)) !== (typeof obj2 === 'undefined' ? 'undefined' : _typeof(obj2))) {
    return false;
  }
  if (!_.isDefined(obj1) || !_.isDefined(obj2)) {
    return obj1 === obj2;
  }

  switch (typeof obj1 === 'undefined' ? 'undefined' : _typeof(obj1)) {
    case 'object':
      return _.isEqualObject(obj1, obj2);
    case 'array':
      return !_.any(obj1, function (value, index) {
        return !_.isEqual(value, obj2[index]);
      });
    default:
      return obj1 === obj2;
  }
};

_.isEqualObject = function (obj1, obj2) {
  var keys1 = _.filter(_.keys(obj1), function (key) {
    return obj1[key] !== undefined;
  });
  var keys2 = _.filter(_.keys(obj2), function (key) {
    return obj2[key] !== undefined;
  });
  if (keys1.length !== keys2.length) {
    return false;
  }
  return !_.any(keys1, function (key) {
    return !_.isEqual(obj1[key], obj2[key]);
  });
};

_.isZeroCSSValue = function (value) {
  return value === '0' || value === '0px' || value === '0em' || value === '0%';
};

//Helper methods

(function () {
  var localDB = void 0;
  try {
    localStorage.setItem('testLocalDB', true);
    localDB = localStorage.getItem('testLocalDB') != null;
    localStorage.removeItem('testLocalDB');
  } catch (error) {
    localDB = false;
  }

  return _.canUseLocalDB = function () {
    return localDB;
  };
})();

_.isIframe = function () {
  return parent !== window;
};

_.extractTempData = function (event, widget, defaultData) {
  var tempItems = defaultData;
  if (event && event.type === 'error') {
    return tempItems;
  }
  tempItems = widget.get(rh.consts('KEY_TEMP_DATA'));
  widget.publish(rh.consts('KEY_TEMP_DATA'));
  return tempItems;
};

_.loadScript = function (jsPath) {
  var async = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var onload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var autodelete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var onerror = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.async = async === true;
  script.src = jsPath;
  script.onload = _.createFunc(onload, autodelete, script);
  script.onerror = onerror && _.createFunc(onerror, autodelete, script) || script.onload;
  return document.body.appendChild(script);
};

_.createFunc = function (func, autodelete, script) {
  return function (args) {
    if (autodelete) {
      document.body.removeChild(script);
    }
    return func && func.call(null, args);
  };
};

(function () {
  var randomStr = function randomStr() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(32).substring(1);
  };

  return _.uniqueId = function () {
    return _.time().toString(32) + '_' + randomStr() + randomStr() + randomStr();
  };
})();

_.one = function (fn) {
  return function () {
    if ('function' === typeof fn) {
      var fn1 = fn;
      fn = null;
      return fn1.apply(this, arguments);
    }
  };
};

_.cache = function (isValid, cache) {
  if (cache == null) {
    cache = {};
  }
  return function (name, value) {
    if (arguments.length === 1) {
      return cache[name];
    } else if (!isValid || isValid(value)) {
      return cache[name] = value;
    }
  };
};

_.memoize = function (generator, cache) {
  if (cache == null) {
    cache = {};
  }
  return function () {
    var fullkey = void 0;
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = Array.from(arguments)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var arg = _step5.value;

        var key = _.isString(arg) ? arg : JSON.stringify(arg);
        fullkey = fullkey != null ? fullkey + ', ' + key : key;
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    if (fullkey in cache) {
      return cache[fullkey];
    } else {
      return cache[fullkey] = generator.apply(this, arguments);
    }
  };
};

// last argument of generator function should be callback function
_.memoizeAsync = function (generator, cache) {
  if (cache == null) {
    cache = {};
  }
  return function () {
    var callback = void 0;
    var args = [];
    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = Array.from(arguments)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var arg = _step6.value;
        args.push(arg);
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }

    if (args.length > 1) {
      callback = args.pop();
    }
    var fullkey = args.join(', ');
    if (fullkey in cache) {
      return typeof callback === 'function' ? callback(cache[fullkey]) : undefined;
    } else {
      args.push(function (data) {
        cache[fullkey] = data;
        return typeof callback === 'function' ? callback(data) : undefined;
      });
      return generator.apply(this, args);
    }
  };
};

_.require = _.memoizeAsync(function (jsPath, callback) {
  return _.loadScript(jsPath, true, function () {
    return callback(_.exports());
  });
});

(function () {
  var cache = undefined;
  return _.exports = function (value) {
    var retValue = cache;
    cache = value != null ? value : undefined;
    return retValue;
  };
})();

},{}],31:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _window = window,
    rh = _window.rh;

var util = rh._;
var $ = rh.$;


var dataWidget = function dataWidget(attr) {
    var DataWidget = function (_rh$Widget) {
        _inherits(DataWidget, _rh$Widget);

        _createClass(DataWidget, [{
            key: "toString",
            value: function toString() {
                return attr + "_" + this._count;
            }
        }], [{
            key: "initClass",
            value: function initClass() {

                this.prototype.dataAttrMethods = function () {
                    var map = {};
                    map["data-" + attr] = "data_" + attr;
                    return map;
                }();
            }
        }]);

        function DataWidget(opts) {
            _classCallCheck(this, DataWidget);

            // Use global model unless someone gives you in javascript
            var _this = _possibleConstructorReturn(this, (DataWidget.__proto__ || Object.getPrototypeOf(DataWidget)).call(this, opts));

            if (_this.model == null) {
                _this.model = rh.model;
            }
            $.dataset(_this.node, attr, opts.rawArg);
            return _this;
        }

        _createClass(DataWidget, [{
            key: "init",
            value: function init(parent) {
                if (this.initDone) {
                    return;
                }
                this.initDone = true;
                this.initParent(parent);
                this.initUI();
                return this.resolveDataAttrs(this.node);
            }
        }]);

        return DataWidget;
    }(rh.Widget);

    DataWidget.initClass();

    return DataWidget;
};

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
    for (var _iterator = Array.from(rh.Widget.prototype.dataAttrs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var attr = _step.value;
        window.rh.widgets[attr] = dataWidget(attr);
    }
} catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
} finally {
    try {
        if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
        }
    } finally {
        if (_didIteratorError) {
            throw _iteratorError;
        }
    }
}

},{}],32:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _window = window,
    rh = _window.rh;

var util = rh._;
var $ = rh.$;

var Global = function (_rh$Widget) {
  _inherits(Global, _rh$Widget);

  function Global(opts) {
    _classCallCheck(this, Global);

    var _this = _possibleConstructorReturn(this, (Global.__proto__ || Object.getPrototypeOf(Global)).call(this, opts));

    if (_this.model == null) {
      _this.model = rh.model;
    }
    return _this;
  }

  return Global;
}(rh.Widget);

window.rh.widgets.Global = Global;

},{}],33:[function(require,module,exports){
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _query = require('../common/query');

var _query2 = _interopRequireDefault(_query);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _window = window,
    rh = _window.rh;
var _ = rh._;
var consts = rh.consts;
var Widget = rh.Widget;

var List = function (_Widget) {
  _inherits(List, _Widget);

  _createClass(List, null, [{
    key: 'initClass',
    value: function initClass() {

      this.prototype.dataIAttrs = ['child'].concat(Widget.prototype.dataIAttrs);
      this.prototype.dataIAttrMethods = function () {
        return Widget.prototype.mapDataAttrMethods(List.prototype.dataIAttrs);
      }();

      this.prototype.supportedArgs = ['node', 'model', 'key', 'user_vars', 'filter', 'spliton', 'path', 'tplNode', 'tplChildNodes'];
    }
  }]);

  function List(opts) {
    _classCallCheck(this, List);

    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, opts));

    _this.reRender = _this.reRender.bind(_this);

    if (_this.key == null) {
      _this.key = '_' + _this;
    }
    if (_this.path == null) {
      _this.path = [];
    }
    if (_this.children == null) {
      _this.children = [];
    }
    if (_this.user_vars == null) {
      _this.user_vars = {};
    }
    _this.useTemplate = true;
    _this.renderedIndex = 0;
    _this.renderedCount = 0;
    return _this;
  }

  _createClass(List, [{
    key: 'init',
    value: function init(parent) {
      var _this2 = this;

      if (this.initDone) {
        return;
      }
      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'init', this).call(this, parent);
      this.subscribeOnly(this.key, this.reRender, { partial: false });
      this.subscribeExpr(this.keyexpr, function (result) {
        if (result == null) {
          result = [];
        }return this.publish(this.key, result, { sync: true });
      });
      this.subscribe(consts('EVT_RESIZE'), this.checkIfMoreItemsrequired.bind(this, true));
      return this.subscribeOnly(this.opts.loadmore, function () {
        return _this2.renderChunck(true);
      });
    }
  }, {
    key: 'parseOpts',
    value: function parseOpts(opts) {
      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'parseOpts', this).call(this, opts);
      if (this.key) {
        if (_.isValidModelConstKey(this.key)) {
          this.key = consts(this.key);
        }
        if (!_.isValidModelKey(this.key)) {
          this.keyexpr = this.key;
          return this.key = null;
        }
      }
    }
  }, {
    key: 'parsePipedArg',
    value: function parsePipedArg() {
      var args = this.opts.pipedArgs;
      if (args != null ? args.shift : undefined) {
        var arg = void 0;
        if (arg = args.shift()) {
          this.filter = arg;
        }
        if (arg = args.shift()) {
          this.spliton = arg;
        }
      }

      if (_.isString(this.filter)) {
        this.filter = this.listItemExpr(this.filter);
      }
      if (_.isString(this.spliton)) {
        return this.spliton = this.listItemExpr(this.spliton);
      }
    }
  }, {
    key: 'notifyLoading',
    value: function notifyLoading(value) {
      if (this.opts.loading) {
        return this.publish(this.opts.loading, value);
      }
    }
  }, {
    key: 'listItemExpr',
    value: function listItemExpr(expr) {
      return this._evalFunction('item, index', expr);
    }
  }, {
    key: 'isWidgetNode',
    value: function isWidgetNode(node) {
      return _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'isWidgetNode', this).apply(this, arguments) || _query2.default.dataset(node, 'child');
    }
  }, {
    key: 'reRender',
    value: function reRender(render) {
      this.data = null;
      this.renderedIndex = 0;
      this.renderedCount = 0;
      return _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'reRender', this).call(this, render);
    }
  }, {
    key: 'preRender',
    value: function preRender() {
      var _this3 = this;

      var node = void 0;
      var oldNode = this.node;
      if (this.tplChildNodes == null) {
        this.tplChildNodes = function () {
          var result = [];
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = Array.from(_this3.tplNode.childNodes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              node = _step.value;
              result.push(node);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return result;
        }();
      }

      this.node = this.tplNode.cloneNode(false);
      return oldNode;
    }
  }, {
    key: 'alterNodeContent',
    value: function alterNodeContent() {
      if (this.data == null) {
        this.data = this.get(this.key) || [];
      }
      return this.renderChunck();
    }
  }, {
    key: 'renderChunck',
    value: function renderChunck() {
      var resolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var i = void 0;
      var end = void 0;
      this.notifyLoading(false);
      for (i = this.renderedIndex, end = this.data.length - 1; i <= end; i++) {
        var item = this.data[i];
        if (this.filter && !this.filter(item, i)) {
          continue;
        }
        if (this.spliton && i !== this.renderedIndex && this.spliton(item, this.renderedCount)) {
          this.notifyLoading(true);
          break;
        } else {
          this.renderOneItem(item, i, resolve);
        }
      }
      this.renderedIndex = i;
      if (this.renderedCount === 0) {
        this.hide();
      } else if (!this.isVisible()) {
        this.show();
      }
      if (this.opts.loaded && i === this.data.length) {
        return this.publish(this.opts.loaded, true);
      }
      this.checkIfMoreItemsrequired(resolve);
    }
  }, {
    key: 'checkIfMoreItemsrequired',
    value: function checkIfMoreItemsrequired(resolve) {
      var _this4 = this;

      if (this.renderedCount > 0) {
        _.defer(function () {
          if (_this4.shouldLoadMoreItems()) {
            _this4.renderOneMoreItem(resolve);
          }
        });
      }
    }
  }, {
    key: 'renderOneMoreItem',
    value: function renderOneMoreItem() {
      var resolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var i = this.renderedIndex = this.renderedIndex + 1;
      var item = this.data[i];
      if (item) {
        this.renderOneItem(item, i, resolve);
        this.checkIfMoreItemsrequired(resolve);
      }
    }
  }, {
    key: 'shouldLoadMoreItems',
    value: function shouldLoadMoreItems() {
      var parentNode = this.node.offsetParent;
      if (parentNode && _query2.default.getAttribute(parentNode, 'data-scroll')) {
        if (parentNode.scrollHeight <= parentNode.clientHeight) {
          return this.renderedCount < this.data.length;
        }
      }
      return false;
    }
  }, {
    key: 'renderOneItem',
    value: function renderOneItem(item, index, resolve) {
      this.renderedIndex = index;
      var generateindex = this.opts.generateindex || rh._debug;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Array.from(this.tplChildNodes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var node = _step2.value;

          var newNode;
          if (newNode = this.resolve_rif(node, item, index)) {
            if (incremented == null) {
              this.renderedCount++;
              var incremented = true;
            }
            if (generateindex) {
              _query2.default.dataset(newNode, 'listindex', this.renderedCount - 1);
            }
            if (newNode.hasChildNodes()) {
              this.renderChildList(newNode, item, index);
            }
            this.node.appendChild(newNode);
            this.resolveItemIndex(newNode, item, index);
            if (_query2.default.isElementNode(newNode) && resolve) {
              this.resolveDataAttrs(newNode);
              _.loadDataHandlers(newNode, this);
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'convertToListContainer',
    value: function convertToListContainer(node) {}
  }, {
    key: '_pathId',
    value: function _pathId(index) {
      var id = '_';
      id += this.path.join('_');
      if (index != null) {
        if (this.path.length > 0) {
          id += '_';
        }
        id += index;
      }
      return id;
    }
  }, {
    key: '_pathKey',
    value: function _pathKey(subpath) {
      if (subpath == null) {
        subpath = '';
      }
      subpath = subpath.toString();
      var path = this.path.join('.');
      if (subpath.length > 0 && path.length > 0) {
        return '.' + path + '.' + subpath;
      } else if (subpath.length > 0) {
        return '.' + subpath;
      } else {
        return '.' + path;
      }
    }

    /*
     * @path: unique path for list
     * @ppath: unique path of parent
     */

  }, {
    key: 'resolveRepeatVar',
    value: function resolveRepeatVar(expr, item, index, cache, node) {
      var _this5 = this;

      return cache[expr] = cache[expr] || function () {
        switch (expr) {
          case '@itemkey':
            return _this5.key + '.' + index;
          case '@key':
            return _this5.key;
          case '@id':
            return _this5._pathId(index);
          case '@pid':
            return _this5._pathId();
          case '@path':
            return _this5._pathKey(index);
          case '@ppath':
            return _this5._pathKey();
          case '@level':
            return _this5.path.length;
          default:
            return _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'resolveRepeatVar', _this5).call(_this5, expr, item, index, cache, node);
        }
      }();
    }
  }, {
    key: 'data_child',
    value: function data_child(node, rawExpr, item, index, attrsInfo) {
      if (!_.isValidModelKey(rawExpr)) {
        _query2.default.dataset(node, 'child', this.subscribeIDataExpr(node, rawExpr, item, index));
      }
      return false;
    }

    /*
     * it can be key or expression
     * data-child="value"
     * data-child="@.p.value"
     */

  }, {
    key: 'renderChildList',
    value: function renderChildList(node, item, index) {
      return _query2.default.eachDataNode(node, 'child', function (childNode, value) {
        this.convertToListContainer(node);
        this.resolveItemIndex(childNode, item, index);

        value = _query2.default.dataset(childNode, 'child'); //get updated value
        if (value === 'undefined' || value === '') {
          return childNode.parentNode.removeChild(childNode);
        } else {
          var args = value.split('|');
          var filter = args[1];
          var childkey = args[0];

          var childList = new List({
            node: childNode,
            model: this.model,
            key: childkey,
            user_vars: this.user_vars,
            path: this.path.concat([this.renderedCount - 1]),
            filter: filter,
            tplNode: childNode.cloneNode(false),
            tplChildNodes: this.tplChildNodes
          });

          childList.init(this);
          return this.children.push(childList);
        }
      }, this);
    }
  }]);

  return List;
}(Widget);

List.initClass();

window.rh.widgets.List = List;

},{"../common/query":13}],34:[function(require,module,exports){
//----------------------------------------------------------------------
//
// ECMAScript 5 Polyfills
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// ES5 15.2 Object Objects
//----------------------------------------------------------------------

//
// ES5 15.2.3 Properties of the Object Constructor
//

// ES5 15.2.3.2 Object.getPrototypeOf ( O )
// From http://ejohn.org/blog/objectgetprototypeof/
// NOTE: won't work for typical function T() {}; T.prototype = {}; new T; case
// since the constructor property is destroyed.
if (!Object.getPrototypeOf) {
  Object.getPrototypeOf = function (o) {
    if (o !== Object(o)) { throw TypeError("Object.getPrototypeOf called on non-object"); }
    return o.__proto__ || o.constructor.prototype || Object.prototype;
  };
}

//    // ES5 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P )
//    if (typeof Object.getOwnPropertyDescriptor !== "function") {
//        Object.getOwnPropertyDescriptor = function (o, name) {
//            if (o !== Object(o)) { throw TypeError(); }
//            if (o.hasOwnProperty(name)) {
//                return {
//                    value: o[name],
//                    enumerable: true,
//                    writable: true,
//                    configurable: true
//                };
//            }
//        };
//    }

// ES5 15.2.3.4 Object.getOwnPropertyNames ( O )
if (typeof Object.getOwnPropertyNames !== "function") {
  Object.getOwnPropertyNames = function (o) {
    if (o !== Object(o)) { throw TypeError("Object.getOwnPropertyNames called on non-object"); }
    var props = [], p;
    for (p in o) {
      if (Object.prototype.hasOwnProperty.call(o, p)) {
        props.push(p);
      }
    }
    return props;
  };
}

// ES5 15.2.3.5 Object.create ( O [, Properties] )
if (typeof Object.create !== "function") {
  Object.create = function (prototype, properties) {
    if (typeof prototype !== "object") { throw TypeError(); }
    function Ctor() {}
    Ctor.prototype = prototype;
    var o = new Ctor();
    if (prototype) { o.constructor = Ctor; }
    if (properties !== undefined) {
      if (properties !== Object(properties)) { throw TypeError(); }
      Object.defineProperties(o, properties);
    }
    return o;
  };
}

// ES 15.2.3.6 Object.defineProperty ( O, P, Attributes )
// Partial support for most common case - getters, setters, and values
(function() {
  if (!Object.defineProperty ||
      !(function () { try { Object.defineProperty({}, 'x', {}); return true; } catch (e) { return false; } } ())) {
    var orig = Object.defineProperty;
    Object.defineProperty = function (o, prop, desc) {
      // In IE8 try built-in implementation for defining properties on DOM prototypes.
      if (orig) { try { return orig(o, prop, desc); } catch (e) {} }

      if (o !== Object(o)) { throw TypeError("Object.defineProperty called on non-object"); }
      if (Object.prototype.__defineGetter__ && ('get' in desc)) {
        Object.prototype.__defineGetter__.call(o, prop, desc.get);
      }
      if (Object.prototype.__defineSetter__ && ('set' in desc)) {
        Object.prototype.__defineSetter__.call(o, prop, desc.set);
      }
      if ('value' in desc) {
        o[prop] = desc.value;
      }
      return o;
    };
  }
}());

// ES 15.2.3.7 Object.defineProperties ( O, Properties )
if (typeof Object.defineProperties !== "function") {
  Object.defineProperties = function (o, properties) {
    if (o !== Object(o)) { throw TypeError("Object.defineProperties called on non-object"); }
    var name;
    for (name in properties) {
      if (Object.prototype.hasOwnProperty.call(properties, name)) {
        Object.defineProperty(o, name, properties[name]);
      }
    }
    return o;
  };
}


// ES5 15.2.3.14 Object.keys ( O )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys
if (!Object.keys) {
  Object.keys = function (o) {
    if (o !== Object(o)) { throw TypeError('Object.keys called on non-object'); }
    var ret = [], p;
    for (p in o) {
      if (Object.prototype.hasOwnProperty.call(o, p)) {
        ret.push(p);
      }
    }
    return ret;
  };
}

//----------------------------------------------------------------------
// ES5 15.3 Function Objects
//----------------------------------------------------------------------

//
// ES5 15.3.4 Properties of the Function Prototype Object
//

// ES5 15.3.4.5 Function.prototype.bind ( thisArg [, arg1 [, arg2, ... ]] )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function (o) {
    if (typeof this !== 'function') { throw TypeError("Bind must be called on a function"); }

    var args = Array.prototype.slice.call(arguments, 1),
        self = this,
        nop = function() {},
        bound = function () {
          return self.apply(this instanceof nop ? this : o,
                            args.concat(Array.prototype.slice.call(arguments)));
        };

    if (this.prototype)
      nop.prototype = this.prototype;
    bound.prototype = new nop();
    return bound;
  };
}


//----------------------------------------------------------------------
// ES5 15.4 Array Objects
//----------------------------------------------------------------------

//
// ES5 15.4.3 Properties of the Array Constructor
//


// ES5 15.4.3.2 Array.isArray ( arg )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
Array.isArray = Array.isArray || function (o) { return Boolean(o && Object.prototype.toString.call(Object(o)) === '[object Array]'); };


//
// ES5 15.4.4 Properties of the Array Prototype Object
//

// ES5 15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function (searchElement /*, fromIndex */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (len === 0) { return -1; }

    var n = 0;
    if (arguments.length > 0) {
      n = Number(arguments[1]);
      if (isNaN(n)) {
        n = 0;
      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
      }
    }

    if (n >= len) { return -1; }

    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);

    for (; k < len; k++) {
      if (k in t && t[k] === searchElement) {
        return k;
      }
    }
    return -1;
  };
}

// ES5 15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
if (!Array.prototype.lastIndexOf) {
  Array.prototype.lastIndexOf = function (searchElement /*, fromIndex*/) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (len === 0) { return -1; }

    var n = len;
    if (arguments.length > 1) {
      n = Number(arguments[1]);
      if (n !== n) {
        n = 0;
      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
      }
    }

    var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);

    for (; k >= 0; k--) {
      if (k in t && t[k] === searchElement) {
        return k;
      }
    }
    return -1;
  };
}

// ES5 15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
if (!Array.prototype.every) {
  Array.prototype.every = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t && !fun.call(thisp, t[i], i, t)) {
        return false;
      }
    }

    return true;
  };
}

// ES5 15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
if (!Array.prototype.some) {
  Array.prototype.some = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t && fun.call(thisp, t[i], i, t)) {
        return true;
      }
    }

    return false;
  };
}

// ES5 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach
if (!Array.prototype.forEach) {
  Array.prototype.forEach = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        fun.call(thisp, t[i], i, t);
      }
    }
  };
}


// ES5 15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Map
if (!Array.prototype.map) {
  Array.prototype.map = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var res = []; res.length = len;
    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        res[i] = fun.call(thisp, t[i], i, t);
      }
    }

    return res;
  };
}

// ES5 15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Filter
if (!Array.prototype.filter) {
  Array.prototype.filter = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var res = [];
    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        var val = t[i]; // in case fun mutates this
        if (fun.call(thisp, val, i, t)) {
          res.push(val);
        }
      }
    }

    return res;
  };
}


// ES5 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce
if (!Array.prototype.reduce) {
  Array.prototype.reduce = function (fun /*, initialValue */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    // no value to return if no initial value and an empty array
    if (len === 0 && arguments.length === 1) { throw TypeError(); }

    var k = 0;
    var accumulator;
    if (arguments.length >= 2) {
      accumulator = arguments[1];
    } else {
      do {
        if (k in t) {
          accumulator = t[k++];
          break;
        }

        // if array contains no values, no initial value to return
        if (++k >= len) { throw TypeError(); }
      }
      while (true);
    }

    while (k < len) {
      if (k in t) {
        accumulator = fun.call(undefined, accumulator, t[k], k, t);
      }
      k++;
    }

    return accumulator;
  };
}


// ES5 15.4.4.22 Array.prototype.reduceRight ( callbackfn [, initialValue ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/ReduceRight
if (!Array.prototype.reduceRight) {
  Array.prototype.reduceRight = function (callbackfn /*, initialValue */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof callbackfn !== "function") { throw TypeError(); }

    // no value to return if no initial value, empty array
    if (len === 0 && arguments.length === 1) { throw TypeError(); }

    var k = len - 1;
    var accumulator;
    if (arguments.length >= 2) {
      accumulator = arguments[1];
    } else {
      do {
        if (k in this) {
          accumulator = this[k--];
          break;
        }

        // if array contains no values, no initial value to return
        if (--k < 0) { throw TypeError(); }
      }
      while (true);
    }

    while (k >= 0) {
      if (k in t) {
        accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);
      }
      k--;
    }

    return accumulator;
  };
}


//----------------------------------------------------------------------
// ES5 15.5 String Objects
//----------------------------------------------------------------------

//
// ES5 15.5.4 Properties of the String Prototype Object
//


// ES5 15.5.4.20 String.prototype.trim()
if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return String(this).replace(/^\s+/, '').replace(/\s+$/, '');
  };
}



//----------------------------------------------------------------------
// ES5 15.9 Date Objects
//----------------------------------------------------------------------


//
// ES 15.9.4 Properties of the Date Constructor
//

// ES5 15.9.4.4 Date.now ( )
// From https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date/now
if (!Date.now) {
  Date.now = function now() {
    return Number(new Date());
  };
}


//
// ES5 15.9.5 Properties of the Date Prototype Object
//

// ES5 15.9.4.43 Date.prototype.toISOString ( )
// Inspired by http://www.json.org/json2.js
if (!Date.prototype.toISOString) {
  Date.prototype.toISOString = function () {
    function pad2(n) { return ('00' + n).slice(-2); }
    function pad3(n) { return ('000' + n).slice(-3); }

    return this.getUTCFullYear() + '-' +
      pad2(this.getUTCMonth() + 1) + '-' +
      pad2(this.getUTCDate()) + 'T' +
      pad2(this.getUTCHours()) + ':' +
      pad2(this.getUTCMinutes()) + ':' +
      pad2(this.getUTCSeconds()) + '.' +
      pad3(this.getUTCMilliseconds()) + 'Z';
  };
}

},{}],35:[function(require,module,exports){
//----------------------------------------------------------------------
//
// ECMAScript 2015 Polyfills
//
//----------------------------------------------------------------------

(function (global) {
  "use strict";

  // Set this to always override native implementations, for testing
  // the polyfill in browsers with partial/full ES2015 support.
  var OVERRIDE_NATIVE_FOR_TESTING = false;

  var undefined = (void 0); // Paranoia

  // Helpers

  function strict(o) {
    return o === global ? undefined : o;
  }

  function isSymbol(s) {
    return (typeof s === 'symbol') || ('Symbol' in global && s instanceof global.Symbol);
  }

  function getPropertyDescriptor(target, name) {
    var desc = Object.getOwnPropertyDescriptor(target, name);
    var proto = Object.getPrototypeOf(target);
    while (!desc && proto) {
      desc = Object.getOwnPropertyDescriptor(proto, name);
      proto = Object.getPrototypeOf(proto);
    }
    return desc;
  }

  var enqueue = (function(nativePromise, nativeSetImmediate) {
    if (nativePromise)
      return function(job) { nativePromise.resolve().then(function() { job(); }); };
    if (nativeSetImmediate)
      return function(job) { nativeSetImmediate(job); };
    return function(job) { setTimeout(job, 0); };
  }(global['Promise'], global['setImmediate']));

  function define(o, p, v, override) {
    if (p in o && !override && !OVERRIDE_NATIVE_FOR_TESTING)
      return;

    if (typeof v === 'function') {
      // Sanity check that functions are appropriately named (where possible)
      //console.assert(isSymbol(p) || !('name' in v) || v.name === p || v.name === p + '_', 'Expected function name "' + p.toString() + '", was "' + v.name + '"');
      Object.defineProperty(o, p, {
        value: v,
        configurable: true,
        enumerable: false,
        writable: true
      });
    } else {
      Object.defineProperty(o, p, {
        value: v,
        configurable: false,
        enumerable: false,
        writable: false
      });
    }
  }

  function set_internal(o, p, v) {
    Object.defineProperty(o, p, {
      value: v,
      configurable: false,
      enumerable: false,
      writable: true
    });
  }

  // Snapshot intrinsic functions
  var $isNaN = global.isNaN,
      $parseInt = global.parseInt,
      $parseFloat = global.parseFloat;

  var E = Math.E,
      LOG10E = Math.LOG10E,
      LOG2E = Math.LOG2E,
      abs = Math.abs,
      ceil = Math.ceil,
      exp = Math.exp,
      floor = Math.floor,
      log = Math.log,
      max = Math.max,
      min = Math.min,
      pow = Math.pow,
      random = Math.random,
      sqrt = Math.sqrt;

  var orig_match = String.prototype.match,
      orig_replace = String.prototype.replace,
      orig_search = String.prototype.search,
      orig_split = String.prototype.split;

  // These are used for implementing the polyfills, but not exported.

  // Inspired by https://gist.github.com/1638059
  /** @constructor */
  function EphemeronTable() {
    var secretKey = ObjectCreate(null);

    function conceal(o) {
      var oValueOf = o.valueOf, secrets = ObjectCreate(null);
      Object.defineProperty(o, 'valueOf', {
          value: (function(secretKey) {
            return function (k) {
              return (k === secretKey) ? secrets : oValueOf.apply(o, arguments);
            };
          }(secretKey)),
        configurable: true,
        writeable: true,
        enumerable: false
        });
      return secrets;
    }

    function reveal(o) {
      var v = typeof o.valueOf === 'function' && o.valueOf(secretKey);
      return v === o ? null : v;
    }

    return {
      clear: function() {
        secretKey = ObjectCreate(null);
      },
      remove: function(key) {
        var secrets = reveal(key);
        if (secrets && HasOwnProperty(secrets, 'value')) {
          delete secrets.value;
          return true;
        }
        return false;
      },
      get: function(key, defaultValue) {
        var secrets = reveal(key);
        return (secrets && HasOwnProperty(secrets, 'value')) ? secrets.value : defaultValue;
      },
      has: function(key) {
        var secrets = reveal(key);
        return Boolean(secrets && HasOwnProperty(secrets, 'value'));
      },
      set: function(key, value) {
        var secrets = reveal(key) || conceal(key);
        secrets.value = value;
      }
    };
  }

  var empty = Object.create(null);

  //----------------------------------------------------------------------
  //
  // ECMAScript 2015
  // http://www.ecma-international.org/ecma-262/6.0/
  //
  //----------------------------------------------------------------------

  // ---------------------------------------
  // 19.4 Symbol Objects
  // ---------------------------------------

  // NOTE: Symbols are defined here - out of spec order - since we need the
  // properties and prototype to be populated for other polyfills.

  // NOTE: Not secure, nor is obj[$$symbol] hidden from Object.keys()

  var symbolForKey;
  (function() {
    var secret = Object.create(null);
    var symbolMap = {};
    symbolForKey = function(k) {
      return symbolMap[k];
    };

    var GlobalSymbolRegistry = [];

    function unique(bits) {
      return Array(bits + 1).join('x').replace(/x/g, function() {
        return random() < 0.5 ? '\u200C' : '\u200D'; // JWNJ / ZWJ
      });
    }

    // 19.4.1 The Symbol Constructor
    // 19.4.1.1 Symbol ( description=undefined )
    function Symbol(description) {
      if (!(this instanceof Symbol)) return new Symbol(description, secret);
      if (this instanceof Symbol && arguments[1] !== secret) throw TypeError();

      var descString = description === undefined ? undefined : String(description);

      set_internal(this, '[[SymbolData]]', unique(128));
      set_internal(this, '[[Description]]', descString);

      symbolMap[this] = this;
      return this;
    }

    if (!('Symbol' in global) || OVERRIDE_NATIVE_FOR_TESTING)
      global.Symbol = Symbol;

    // 19.4.2 Properties of the Symbol Constructor

    // 19.4.2.1 Symbol.for (key)
    define(Symbol, 'for', function for_(key) {
      var stringKey = String(key);
      for (var i = 0; i < GlobalSymbolRegistry.length; ++i) {
        var e = GlobalSymbolRegistry[i];
        if (SameValue(e['[[key]]'], stringKey)) return e['[[symbol]]'];
      }
      var newSymbol = Symbol(key);
      GlobalSymbolRegistry.push({'[[key]]': stringKey, '[[symbol]]': newSymbol});
      return newSymbol;
    });

    // 19.4.2.2 Symbol.hasInstance
    // 19.4.2.3 Symbol.isConcatSpreadable

    // 19.4.2.4 Symbol.iterator
    define(global.Symbol, 'iterator', global.Symbol('Symbol.iterator'));

    // 19.4.2.5 Symbol.keyFor (sym)
    define(Symbol, 'keyFor', function keyFor(sym) {
      if (!(sym instanceof Symbol)) throw TypeError();
      for (var i = 0; i < GlobalSymbolRegistry.length; ++i) {
        var e = GlobalSymbolRegistry[i];
        if (SameValue(e['[[symbol]]'], sym)) return e['[[key]]'];
      }
      return undefined;
    });

    // 19.4.2.6 Symbol.match
    define(global.Symbol, 'match', global.Symbol('Symbol.match'));

    // 19.4.2.7 Symbol.prototype

    // 19.4.2.8 Symbol.replace
    define(global.Symbol, 'replace', global.Symbol('Symbol.replace'));

    // 19.4.2.9 Symbol.search
    define(global.Symbol, 'search', global.Symbol('Symbol.search'));

    // 19.4.2.10 Symbol.species

    // 19.4.2.11 Symbol.search
    define(global.Symbol, 'split', global.Symbol('Symbol.split'));

    // 19.4.2.12 Symbol.toPrimitive

    // 19.4.2.13 Symbol.toStringTag
    define(global.Symbol, 'toStringTag', global.Symbol('Symbol.toStringTag'));

    // 19.4.2.14 Symbol.unscopables

    // 19.4.3 Properties of the Symbol Prototype Object
    // 19.4.3.1 Symbol.prototype.constructor

    // 19.4.3.2 Symbol.prototype.toString ( )
    Object.defineProperty(Symbol.prototype, 'toString', {
      value: function toString() {
        var s = strict(this);
        var desc = s['[[Description]]'];
        return 'Symbol(' + (desc === undefined ? '' : desc) + s['[[SymbolData]]'] + ')';
      },
      configurable: true, writeable: true, enumerable: false });

    // 19.4.3.3 Symbol.prototype.valueOf ( )
    Object.defineProperty(Symbol.prototype, 'valueOf', {
      value: function valueOf() {
        // To prevent automatic string conversion:
        throw TypeError();

        // Spec has approximately the following:
        //var s = strict(this);
        //if (Type(s) === 'symbol') return s;
        //if (Type(s) !== 'object') throw TypeError();
        //if (!('[[SymbolData]]' in s)) throw TypeError();
        //return s['[[SymbolData]]'];
      },
      configurable: true, writeable: true, enumerable: false });

    // 19.4.3.4 Symbol.prototype [ @@toStringTag ]
    // (Done later to polyfill partial implementations)

    // 19.4.4 Properties of Symbol Instances
  }());

  console.assert(typeof global.Symbol() === 'symbol' || symbolForKey(String(global.Symbol('x'))) !== undefined);

  // Defined here so that other prototypes can reference it
  // 25.1.2 The %IteratorPrototype% Object
  var $IteratorPrototype$ = {};

  //----------------------------------------
  // 6 ECMAScript Data Types and Values
  //----------------------------------------

  // 6.1 ECMAScript Language Types

  // "Type(x)" is used as shorthand for "the type of x"...
  function Type(v) {
    switch (typeof v) {
    case 'undefined': return 'undefined';
    case 'boolean': return 'boolean';
    case 'number': return 'number';
    case 'string': return 'string';
    case 'symbol': return 'symbol';
    default:
      if (v === null) return 'null';
      if (v instanceof global.Symbol) return 'symbol';
      return 'object';
    }
  }

  // 6.1.5.1 Well-Known Symbols
  var $$iterator = global.Symbol.iterator,
      $$match = global.Symbol.match,
      $$replace = global.Symbol.replace,
      $$search = global.Symbol.search,
      $$split = global.Symbol.split,
      $$toStringTag = global.Symbol.toStringTag;

  //----------------------------------------
  // 7 Abstract Operations
  //----------------------------------------

  //----------------------------------------
  // 7.1 Type Conversion
  //----------------------------------------

  // 7.1.1 ToPrimitive ( input [, PreferredType] )
  // just use valueOf()

  // 7.1.2 ToBoolean ( argument )
  // just use Boolean()

  // 7.1.3 ToNumber ( argument )
  // just use Number()

  // 7.1.4 ToInteger ( argument )
  function ToInteger(n) {
    n = Number(n);
    if ($isNaN(n)) return 0;
    if (n === 0 || n === Infinity || n === -Infinity) return n;
    return ((n < 0) ? -1 : 1) * floor(abs(n));
  }

  // 7.1.5 ToInt32 ( argument )
  function ToInt32(v) { return v >> 0; }

  // 7.1.6 ToUint32 ( argument )
  function ToUint32(v) { return v >>> 0; }

  // 7.1.7 ToInt16 ( argument )
  function ToInt16(v) { return (v << 16) >> 16; }

  // 7.1.8 ToUint16 ( argument )
  function ToUint16(v) { return v & 0xFFFF; }

  // 7.1.9 ToInt8 ( argument )
  function ToInt8(v) { return (v << 24) >> 24; }

  // 7.1.10 ToUint8 ( argument )
  function ToUint8(v) { return v & 0xFF; }

  // 7.1.11 ToUint8Clamp ( argument )
  function ToUint8Clamp(argument) {
    var number = Number(argument);
    if ($isNaN(number)) return 0;
    if (number <= 0) return 0;
    if (number >= 255) return 255;
    var f = floor(number);
    if ((f + 0.5) < number) return f + 1;
    if (number < (f + 0.5)) return f;
    if (f % 2) return f + 1;
    return f;
  }

  // 7.1.12 ToString ( argument )
  // just use String()

  // 7.1.13 ToObject ( argument )
  function ToObject(v) {
    if (v === null || v === undefined) throw TypeError();
    return Object(v);
  }

  // 7.1.14 ToPropertyKey ( argument )
  function ToPropertyKey(v) {
    return String(v);
  }

  // 7.1.15 ToLength ( argument )
  function ToLength(v) {
    var len = ToInteger(v);
    if (len <= 0) return 0;
    if (len === Infinity) return 0x20000000000000 - 1; // 2^53-1
    return min(len, 0x20000000000000 - 1); // 2^53-1
  }

  // 7.1.16 CanonicalNumericIndexString ( argument )

  //----------------------------------------
  // 7.2 Testing and Comparison Operations
  //----------------------------------------

  // 7.2.1 RequireObjectCoercible ( argument )
  // 7.2.2 IsArray ( argument )

  // 7.2.3 IsCallable ( argument )
  function IsCallable(o) { return typeof o === 'function'; }

  // 7.2.4 IsConstructor ( argument )
  function IsConstructor(o) {
    // Hacks for Safari 7 TypedArray XXXConstructor objects
    if (/Constructor/.test(Object.prototype.toString.call(o))) return true;
    if (/Function/.test(Object.prototype.toString.call(o))) return true;
    // TODO: Can this be improved on?
    return typeof o === 'function';
  }

  // 7.2.5 IsExtensible (O)
  // 7.2.6 IsInteger ( argument )

  // 7.2.7 IsPropertyKey ( argument )
  function IsPropertyKey(argument) {
    if (Type(argument) === 'string') return true;
    if (Type(argument) === 'symbol') return true;
    return false;
  }

  // 7.2.8 IsRegExp ( argument )

  // 7.2.9 SameValue(x, y)
  function SameValue(x, y) {
    if (typeof x !== typeof y) return false;
    switch (typeof x) {
    case 'undefined':
      return true;
    case 'number':
      if (x !== x && y !== y) return true;
      if (x === 0 && y === 0) return 1/x === 1/y;
      return x === y;
    case 'boolean':
    case 'string':
    case 'object':
    default:
      return x === y;
    }
  }

  // 7.2.10 SameValueZero(x, y)
  function SameValueZero(x, y) {
    if (typeof x !== typeof y) return false;
    switch (typeof x) {
    case 'undefined':
      return true;
    case 'number':
      if (x !== x && y !== y) return true;
      return x === y;
    case 'boolean':
    case 'string':
    case 'object':
    default:
      return x === y;
    }
  }

  //----------------------------------------
  // 7.3 Operations on Objects
  //----------------------------------------

  // 7.3.1 Get (O, P)
  // - just use o.p or o[p]

  // 7.3.2 GetV (V, P)
  function GetV(v, p) {
    var o = ToObject(v);
    return o[p];
  }

  // 7.3.3 Set (O, P, V, Throw)
  // - just use o.p = v or o[p] = v




  // 7.3.9 GetMethod (O, P)
  function GetMethod(o, p) {
    var func = GetV(o, p);
    if (func === undefined || func === null) return undefined;
    if (!IsCallable(func)) throw TypeError();
    return func;
  }

  // 7.3.10 HasProperty (O, P)
  function HasProperty(o, p) {
    while (o) {
      if (Object.prototype.hasOwnProperty.call(o, p)) return true;
      if (Type(o) !== 'object') return false;
      var op = Object.getPrototypeOf(o);
      if (op === o) return false; // IE8 has self-referential prototypes
      o = op;
    }
    return false;
  }

  // 7.3.11 HasOwnProperty (O, P)
  function HasOwnProperty(o, p) {
    return Object.prototype.hasOwnProperty.call(o, p);
  }

  //----------------------------------------
  // 7.4 Operations on Iterator Objects
  //----------------------------------------

  // 7.4.1 GetIterator ( obj, method )
  function GetIterator(obj, method) {
    if (arguments.length < 2)
      method = GetMethod(obj, $$iterator);
    var iterator = method.call(obj);
    if (Type(iterator) !== 'object') throw TypeError();
    return iterator;
  }

  // 7.4.2 IteratorNext ( iterator, value )
  function IteratorNext(iterator, value) {
    if (arguments.length < 2)
      var result = iterator.next();
    else
      result = iterator.next(value);
    if (Type(result) !== 'object') throw TypeError();
    return result;
  }

  // 7.4.3 IteratorComplete ( iterResult )
  function IteratorComplete(iterResult) {
    console.assert(Type(iterResult) === 'object');
    return Boolean(iterResult.done);
  }

  // 7.4.4 IteratorValue ( iterResult )
  function IteratorValue(iterResult) {
    console.assert(Type(iterResult) === 'object');
    return iterResult.value;
  }

  // 7.4.5 IteratorStep ( iterator )
  function IteratorStep( iterator, value ) {
    var result = IteratorNext(iterator, value);
    var done = result['done'];
    if (Boolean(done) === true) return false;
    return result;
  }

  // 7.4.6 IteratorClose( iterator, completion )
  function IteratorClose( iterator, completion ) {
    console.assert(Type(iterator) === 'object');
    var _return = GetMethod(iterator, 'return');
    if (_return === undefined) return completion;
    try {
      var innerResult = _return[iterator]();
    } catch (result) {
      // TODO: If completion.[[type]] is throw, return completion
      return result;
    }
    if (Type(innerResult) !== 'object') throw TypeError();
    return completion;
  }

  // 7.4.7 CreateIterResultObject (value, done)
  function CreateIterResultObject(value, done) {
    console.assert(Type(done) === 'boolean');
    var obj = {};
    obj["value"] = value;
    obj["done"] = done;
    return obj;
  }

  // 7.4.8 CreateListIterator (list)
  // 7.4.8.1 ListIterator next( )

  //----------------------------------------
  // 8 Executable Code and Execution Contexts
  //----------------------------------------

  //----------------------------------------
  // 8.4 Jobs and Job Queues
  //----------------------------------------

  // 8.4.1 EnqueueJob ( queueName, job, arguments)
  function EnqueueJob(queueName, job, args) {
    var fn = function() { job.apply(undefined, args); };
    enqueue(fn);
  }

  // 8.4.2 NextJob result
  function NextJob(result) {
    // no-op
  }

  //----------------------------------------
  // 9 Ordinary and Exotic Objects Behaviors
  //----------------------------------------

  // 9.1.11 [[Enumerate]] ()
  function Enumerate(obj) {
    var e = [];
    if (Object(obj) !== obj) return e;
    var visited = new Set;
    while (obj !== null) {
      Object.getOwnPropertyNames(obj).forEach(function(name) {
        if (!visited.has(name)) {
          var desc = Object.getOwnPropertyDescriptor(obj, name);
          if (desc) {
            visited.add(name);
            if (desc.enumerable) e.push(name);
          }
        }
      });
      obj = Object.getPrototypeOf(obj);
    }
    return e[$$iterator]();
  }

  // 9.1.12 [[OwnPropertyKeys]] ( )
  function OwnPropertyKeys(o) {
    return Object.getOwnPropertyNames(o);
  }

  // 9.1.13 ObjectCreate(proto, internalSlotsList)
  function ObjectCreate(proto, internalSlotsList) {
    return Object.create(proto, internalSlotsList);
  }

  // ---------------------------------------
  // 19 Fundamental Objects
  // ---------------------------------------

  // ---------------------------------------
  // 19.1 Object Objects
  // ---------------------------------------

  // 19.1.1 The Object Constructor
  // 19.1.1.1 Object ( [ value ] )
  // 19.1.2 Properties of the Object Constructor
  // 19.1.2.1 Object.assign ( target, ...sources )
  define(
    Object, 'assign',
    function assign(target, /*...*/sources) {
      var to = ToObject(target);
      if (arguments.length < 2) return to;

      var sourcesIndex = 1;
      while (sourcesIndex < arguments.length) {
        var nextSource = arguments[sourcesIndex++];
        if (nextSource === undefined || nextSource === null) {
          var keys = [];
        } else {
          var from = ToObject(nextSource);
          keys = OwnPropertyKeys(from);
        }
        for (var keysIndex = 0; keysIndex < keys.length; ++keysIndex) {
          var nextKey = keys[keysIndex];
          var desc = Object.getOwnPropertyDescriptor(from, nextKey);
          if (desc !== undefined && desc.enumerable) {
            var propValue = from[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    });

  // 19.1.2.2 Object.create ( O [ , Properties ] )
  // 19.1.2.3 Object.defineProperties ( O, Properties )
  // 19.1.2.4 Object.defineProperty ( O, P, Attributes )
  // 19.1.2.5 Object.freeze ( O )
  // 19.1.2.6 Object.getOwnPropertyDescriptor ( O, P )

  (function() {
    var nativeSymbols = (typeof global.Symbol() === 'symbol'),
        $getOwnPropertyNames = Object.getOwnPropertyNames,
        $keys = Object.keys,
        $window_names = (typeof window === 'object' ? $getOwnPropertyNames(window) : []);

    function isStringKey(k) { return !symbolForKey(k); }

    // 19.1.2.7 Object.getOwnPropertyNames ( O )
    define(
      Object, 'getOwnPropertyNames',
      function getOwnPropertyNames(o) {
        if (Object.prototype.toString.call(o) === '[object Window]') {
          // Workaround for cross-realm calling by IE itself.
          // https://github.com/inexorabletash/polyfill/issues/96
          try {
            return $getOwnPropertyNames(o).filter(isStringKey);
          } catch (_) {
            return $window_names.slice();
          }
        }
        return $getOwnPropertyNames(o).filter(isStringKey);
      }, !nativeSymbols);

    // 19.1.2.8 Object.getOwnPropertySymbols ( O )
    define(
      Object, 'getOwnPropertySymbols',
      function getOwnPropertySymbols(o) {
        return $getOwnPropertyNames(o).filter(symbolForKey).map(symbolForKey);
      }, !nativeSymbols);

    // 19.1.2.14 Object.keys ( O )
    define(
      Object, 'keys',
      function keys(o) {
        return $keys(o).filter(isStringKey);
      }, !nativeSymbols);
  }());

  // 19.1.2.9 Object.getPrototypeOf ( O )
  // 19.1.2.10 Object.is ( value1, value2 )
  define(
    Object, 'is',
    function is(value1, value2) {
      return SameValue(value1, value2);
    });

  // 19.1.2.11 Object.isExtensible ( O )
  // 19.1.2.12 Object.isFrozen ( O )
  // 19.1.2.13 Object.isSealed ( O )

  // 19.1.2.14 Object.keys ( O )
  // see above

  // 19.1.2.15 Object.preventExtensions ( O )
  // 19.1.2.16 Object.prototype
  // 19.1.2.17 Object.seal ( O )

  // 19.1.2.18 Object.setPrototypeOf ( O, proto )
  define(
    Object, 'setPrototypeOf',
    function setPrototypeOf(o, proto) {
      if (Type(o) !== 'object') throw TypeError();
      if (Type(proto) !== 'object' && Type(proto) !== 'null') throw TypeError();
      o.__proto__ = proto;
      return o;
    }
  );

  // 19.1.3 Properties of the Object Prototype Object
  // 19.1.3.1 Object.prototype.constructor
  // 19.1.3.2 Object.prototype.hasOwnProperty ( V )
  // 19.1.3.3 Object.prototype.isPrototypeOf ( V )
  // 19.1.3.4 Object.prototype.propertyIsEnumerable ( V )
  // 19.1.3.5 Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )
  // 19.1.3.6 Object.prototype.toString ( )
  var o_p_ts = Object.prototype.toString;
  define(Object.prototype, 'toString',
       function() {
         var o = strict(this);
         if (o === Object(o) && $$toStringTag in o) {
           return '[object ' + o[$$toStringTag] + ']';
         }
         return o_p_ts.apply(o, arguments);
       });

  // 19.1.3.7 Object.prototype.valueOf ( )
  // 19.1.4 Properties of Object Instances

  // ---------------------------------------
  // 19.2 Function Objects
  // ---------------------------------------

  // 19.2.1 The Function Constructor
  // 19.2.1.1 Function ( p1, p2, … , pn, body )
  // 19.2.2 Properties of the Function Constructor
  // 19.2.2.1 Function.length
  // 19.2.2.2 Function.prototype
  // 19.2.3 Properties of the Function Prototype Object
  // 19.2.3.1 Function.prototype.apply ( thisArg, argArray )
  // 19.2.3.2 Function.prototype.bind ( thisArg , ...args)
  // 19.2.3.3 Function.prototype.call (thisArg , ...args)
  // 19.2.3.4 Function.prototype.constructor
  // 19.2.3.5 Function.prototype.toString ( )
  // 19.2.3.6 Function.prototype[@@hasInstance] ( V )
  // 19.2.4 Function Instances
  // 19.2.4.1 length
  // 19.2.4.2 name
  // 19.2.4.3 prototype

  // (No polyfillable changes from ES5)

  // ---------------------------------------
  // 19.3 Boolean Objects
  // ---------------------------------------

  // 19.3.1 The Boolean Constructor
  // 19.3.1.1 Boolean ( value )
  // 19.3.2 Properties of the Boolean Constructor
  // 19.3.2.1 Boolean.prototype
  // 19.3.3 Properties of the Boolean Prototype Object
  // 19.3.3.1 Boolean.prototype.constructor
  // 19.3.3.2 Boolean.prototype.toString ( )
  // 19.3.3.3 Boolean.prototype.valueOf ( )
  // 19.3.4 Properties of Boolean Instances

  // (No polyfillable changes from ES5)

  // ---------------------------------------
  // 19.4 Symbol Objects
  // ---------------------------------------

  // Moved earlier in this script, so that other polyfills can depend on them.

  // 19.4.3.4 Symbol.prototype [ @@toStringTag ]
  define(global.Symbol.prototype, global.Symbol.toStringTag, 'Symbol');

  // ---------------------------------------
  // 19.5 Error Objects
  // ---------------------------------------

  // 19.5.1 The Error Constructor
  // 19.5.1.1 Error ( message )
  // 19.5.1.2 new Error( ...argumentsList )
  // 19.5.2 Properties of the Error Constructor
  // 19.5.2.1 Error.prototype
  // 19.5.3 Properties of the Error Prototype Object
  // 19.5.3.1 Error.prototype.constructor
  // 19.5.3.2 Error.prototype.message
  // 19.5.3.3 Error.prototype.name
  // 19.5.3.4 Error.prototype.toString ( )
  // 19.5.4 Properties of Error Instances
  // 19.5.5 Native Error Types Used in This Standard
  // 19.5.5.1 EvalError
  // 19.5.5.2 RangeError
  // 19.5.5.3 ReferenceError
  // 19.5.5.4 SyntaxError
  // 19.5.5.5 TypeError
  // 19.5.5.6 URIError
  // 19.5.6 NativeError Object Structure
  // 19.5.6.1 NativeError Constructors
  // 19.5.6.1.1 NativeError ( message )
  // 19.5.6.1.2 new NativeError ( ...argumentsList )
  // 19.5.6.2 Properties of the NativeError Constructors
  // 19.5.6.2.1 NativeError.prototype
  // 19.5.6.3 Properties of the NativeError Prototype Objects
  // 19.5.6.4 Properties of NativeError Instances

  // (No polyfillable changes from ES5)

  // ---------------------------------------
  // 20 Numbers and Dates
  // ---------------------------------------

  // ---------------------------------------
  // 20.1 Number Objects
  // ---------------------------------------

  // 20.1.1 The Number Constructor
  // 20.1.1.1 Number ( [ value ] )
  // 20.1.1.2 new Number ( ...argumentsList )
  // 20.1.2 Properties of the Number Constructor

  // 20.1.2.1 Number.EPSILON
  define(
    Number, 'EPSILON',
    (function () {
      var next, result;
      for (next = 1; 1 + next !== 1; next = next / 2)
        result = next;
      return result;
    }()));

  // 20.1.2.2 Number.isFinite ( number )
  define(
    Number, 'isFinite',
    function isFinite(number) {
      if (Type(number) !== 'number') return false;
      if (number !== number || number === +Infinity || number === -Infinity) return false;
      return true;
    });

  // 20.1.2.3 Number.isInteger ( number )
  define(
    Number, 'isInteger',
    function isInteger(number) {
      if (Type(number) !== 'number') return false;
      if (number !== number || number === +Infinity || number === -Infinity) return false;
      var integer = ToInteger(number);
      if (integer !== number) return false;
      return true;
    });

  // 20.1.2.4 Number.isNaN ( number )
  define(
    Number, 'isNaN',
    function isNaN(number) {
      if (Type(number) !== 'number') return false;
      if (number !== number) return true;
      return false;
    });

  // 20.1.2.5 Number.isSafeInteger ( number )
  define(
    Number, 'isSafeInteger',
    function isSafeInteger(number) {
      if (Type(number) !== 'number') return false;
      if (number !== number || number === +Infinity || number === -Infinity) return false;
      var integer = ToInteger(number);
      if (integer !== number) return false;
      if (abs(integer) <= (0x20000000000000 - 1)) // 2^53-1
        return true;
      return false;
    });

  // 20.1.2.6 Number.MAX_SAFE_INTEGER
  define(
    Number, 'MAX_SAFE_INTEGER',
    9007199254740991); // 2^53-1

  // 20.1.2.7 Number.MAX_VALUE

  // 20.1.2.8 Number.MIN_SAFE_INTEGER
  define(
    Number, 'MIN_SAFE_INTEGER',
    -9007199254740991); // -2^53+1

  // 20.1.2.9 Number.MIN_VALUE
  // 20.1.2.10 Number.NaN
  // 20.1.2.11 Number.NEGATIVE_INFINITY

  // 20.1.2.12 Number.parseFloat ( string )
  define(Number, 'parseFloat', $parseFloat);

  // 20.1.2.13 Number.parseInt ( string, radix )
  define(Number, 'parseInt', $parseInt);

  // 20.1.2.14 Number.POSITIVE_INFINITY
  // 20.1.2.15 Number.prototype

  // 20.1.3 Properties of the Number Prototype Object
  // 20.1.3.1 Number.prototype.constructor
  // 20.1.3.2 Number.prototype.toExponential ( fractionDigits )
  // 20.1.3.3 Number.prototype.toFixed ( fractionDigits )
  // 20.1.3.4 Number.prototype.toLocaleString( [ reserved1 [ , reserved2 ] ])
  // 20.1.3.5 Number.prototype.toPrecision ( precision )
  // 20.1.3.6 Number.prototype.toString ( [ radix ] )
  // 20.1.3.7 Number.prototype.valueOf ( )
  // 20.1.4 Properties of Number Instances

  // ---------------------------------------
  // 20.2 The Math Object
  // ---------------------------------------

  // 20.2.1 Value Properties of the Math Object
  // 20.2.1.1 Math.E
  // 20.2.1.2 Math.LN10
  // 20.2.1.3 Math.LN2
  // 20.2.1.4 Math.LOG10E
  // 20.2.1.5 Math.LOG2E
  // 20.2.1.6 Math.PI
  // 20.2.1.7 Math.SQRT1_2
  // 20.2.1.8 Math.SQRT2

  // 20.2.1.9 Math [ @@toStringTag ]
  define(Math, $$toStringTag, 'Math');

  // 20.2.2 Function Properties of the Math Object
  // 20.2.2.1 Math.abs ( x )
  // 20.2.2.2 Math.acos ( x )

  // 20.2.2.3 Math.acosh(x)
  define(
    Math, 'acosh',
    function acosh(x) {
      x = Number(x);
      return log(x + sqrt(x * x - 1));
    });

  // 20.2.2.4 Math.asin ( x )

  // 20.2.2.5 Math.asinh( x )
  define(
    Math, 'asinh',
    function asinh(x) {
      x = Number(x);
      if (SameValue(x, -0)) {
        return x;
      }
      var s = sqrt(x * x + 1);
      return (s === -x) ? log(0) : log(x + s);
    });

  // 20.2.2.6 Math.atan ( x )

  // 20.2.2.7 Math.atanh( x )
  define(
    Math, 'atanh',
    function atanh(x) {
      x = Number(x);
      return (x === 0) ? x : log((1 + x) / (1 - x)) / 2;
    });

  // 20.2.2.8 Math.atan2 ( y, x )

  // 20.2.2.9 Math.cbrt ( x )
  define(
    Math, 'cbrt',
    function cbrt(x) {
      x = Number(x);
      if ($isNaN(x/x)) {
        return x;
      }
      var r = pow(abs(x), 1/3);
      var t = x/r/r;
      return r + (r * (t-r) / (2*r + t));
    });

  // 20.2.2.10 Math.ceil ( x )

  // 20.2.2.11 Math.clz32 ( x )
  define(
    Math, 'clz32',
    function clz32(x) {
      function clz8(x) {
        return (x & 0xf0) ? (x & 0x80 ? 0 : x & 0x40 ? 1 : x & 0x20 ? 2 : 3) :
        (x & 0x08 ? 4 : x & 0x04 ? 5 : x & 0x02 ? 6 : x & 0x01 ? 7 : 8);
      }
      x = ToUint32(x);
      return x & 0xff000000 ? clz8(x >> 24) :
        x & 0xff0000 ? clz8(x >> 16) + 8 :
        x & 0xff00 ? clz8(x >> 8) + 16 : clz8(x) + 24;
    });



  // 20.2.2.12 Math.cos ( x )

  // 20.2.2.13 Math.cosh ( x )
  define(
    Math, 'cosh',
    function cosh(x) {
      x = Number(x);
      return (pow(E, x) + pow(E, -x)) / 2;
    });

  // 20.2.2.14 Math.exp ( x )

  // 20.2.2.15 Math.expm1 ( x )
  define(
    Math, 'expm1',
    function expm1(x) {
      x = Number(x);
      // from: http://www.johndcook.com/cpp_log1p.html
      if (SameValue(x, -0)) {
        return -0;
      } else if (abs(x) < 1e-5) {
        return x + 0.5 * x * x; // two terms of Taylor expansion
      } else {
        return exp(x) - 1;
      }
    });

  // 20.2.2.16 Math.floor ( x )

  // 20.2.2.17 Math.fround ( x )
  define(
    Math, 'fround',
    function fround(x) {
      if ($isNaN(x)) {
        return NaN;
      }
      if (1/x === +Infinity || 1/x === -Infinity || x === +Infinity || x === -Infinity) {
        return x;
      }
      return (new Float32Array([x]))[0];
    });

  // 20.2.2.18 Math.hypot ( value1 [, value2 [ ... ] ] )
  define(
    Math, 'hypot',
    function hypot() {
      var values = [];
      var m = 0, sawNaN = false;
      for (var i = 0; i < arguments.length; ++i) {
        var n = abs(Number(arguments[i]));
        if (n === Infinity) return n;
        if (n !== n) sawNaN = true;
        if (n > m) m = n;
        values[i] = n;
      }
      if (sawNaN) return NaN;
      if (m === 0) return +0;
      var sum = +0;
      for (i = 0; i < values.length; ++i) {
        var r = values[i] / m;
        sum = sum + r * r;
      }
      return m * sqrt(sum);
    });

  // 20.2.2.19 Math.imul ( x, y )
  define(
    Math, 'imul',
    function imul(x, y) {
      var a = ToUint32(x);
      var b = ToUint32(y);
      // (slow but accurate)
      var ah  = (a >>> 16) & 0xffff;
      var al = a & 0xffff;
      var bh  = (b >>> 16) & 0xffff;
      var bl = b & 0xffff;
      return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }, ('imul' in Math && Math.imul(1, 0x80000000) === 0) // Safari 7 bug
  );

  // 20.2.2.20 Math.log ( x )

  // 20.2.2.21 Math.log1p ( x )
  define(
    Math, 'log1p',
    function log1p(x) {
      x = Number(x);
      // from: http://www.johndcook.com/cpp_expm1.html
      if (x < -1) {
        return NaN;
      } else if (SameValue(x, -0)) {
        return -0;
      } else if (abs(x) > 1e-4) {
        return log(1 + x);
      } else {
        return (-0.5 * x + 1) * x;
      }
    });

  // 20.2.2.22 Math.log10 ( x )
  define(
    Math, 'log10',
    function log10(x) {
      x = Number(x);
      return log(x) * LOG10E;
    });

  // 20.2.2.23 Math.log2 ( x )
  define(
    Math, 'log2',
    function log2(x) {
      x = Number(x);
      return log(x) * LOG2E;
    });

  // 20.2.2.24 Math.max ( value1, value2 , ...values )
  // 20.2.2.25 Math.min ( value1, value2 , ...values )
  // 20.2.2.26 Math.pow ( x, y )
  // 20.2.2.27 Math.random ( )
  // 20.2.2.28 Math.round ( x )

  // 20.2.2.29 Math.sign(x)
  define(
    Math, 'sign',
    function sign(x) {
      x = Number(x);
      return x < 0 ? -1 : x > 0 ? 1 : x;
    });

  // 20.2.2.30 Math.sin ( x )

  // 20.2.2.31 Math.sinh( x )
  define(
    Math, 'sinh',
    function sinh(x) {
      x = Number(x);
      return SameValue(x, -0) ? x : (pow(E, x) - pow(E, -x)) / 2;
    });

  // 20.2.2.32 Math.sqrt ( x )
  // 20.2.2.33 Math.tan ( x )

  // 20.2.2.34 Math.tanh ( x )
  define(
    Math, 'tanh',
    function tanh(x) {
      x = Number(x);
      var n = pow(E, 2 * x) - 1,
          d = pow(E, 2 * x) + 1;
      if (SameValue(x, -0))
        return x;
      return (n === d) ? 1 : n / d; // Handle Infinity/Infinity
    });

  // 20.2.2.35 Math.trunc ( x )
  define(
    Math, 'trunc',
    function trunc(x) {
      x = Number(x);
      return $isNaN(x) ? NaN :
        x < 0 ? ceil(x) : floor(x);
    });

  // ---------------------------------------
  // 20.3 Date Objects
  // ---------------------------------------

  // 20.3.1 Overview of Date Objects and Definitions of Abstract Operations
  // 20.3.1.1 Time Values and Time Range
  // 20.3.1.2 Day Number and Time within Day
  // 20.3.1.3 Year Number
  // 20.3.1.4 Month Number
  // 20.3.1.5 Date Number
  // 20.3.1.6 Week Day
  // 20.3.1.7 Local Time Zone Adjustment
  // 20.3.1.8 Daylight Saving Time Adjustment
  // 20.3.1.9 Local Time
  // 20.3.1.10 Hours, Minutes, Second, and Milliseconds
  // 20.3.1.11 MakeTime (hour, min, sec, ms)
  // 20.3.1.12 MakeDay (year, month, date)
  // 20.3.1.13 MakeDate (day, time)
  // 20.3.1.14 TimeClip (time)
  // 20.3.1.15 Date Time String Format
  // 20.3.1.15.1 Extended years
  // 20.3.2 The Date Constructor
  // 20.3.2.1 Date ( year, month [, date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )
  // 20.3.2.2 Date ( value )
  // 20.3.2.3 Date ( )
  // 20.3.3 Properties of the Date Constructor
  // 20.3.3.1 Date.now ( )
  // 20.3.3.2 Date.parse (string)
  // 20.3.3.3 Date.prototype
  // 20.3.3.4 Date.UTC ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )
  // 20.3.4 Properties of the Date Prototype Object
  // 20.3.4.1 Date.prototype.constructor
  // 20.3.4.2 Date.prototype.getDate ( )
  // 20.3.4.3 Date.prototype.getDay ( )
  // 20.3.4.4 Date.prototype.getFullYear ( )
  // 20.3.4.5 Date.prototype.getHours ( )
  // 20.3.4.6 Date.prototype.getMilliseconds ( )
  // 20.3.4.7 Date.prototype.getMinutes ( )
  // 20.3.4.8 Date.prototype.getMonth ( )
  // 20.3.4.9 Date.prototype.getSeconds ( )
  // 20.3.4.10 Date.prototype.getTime ( )
  // 20.3.4.11 Date.prototype.getTimezoneOffset ( )
  // 20.3.4.12 Date.prototype.getUTCDate ( )
  // 20.3.4.13 Date.prototype.getUTCDay ( )
  // 20.3.4.14 Date.prototype.getUTCFullYear ( )
  // 20.3.4.15 Date.prototype.getUTCHours ( )
  // 20.3.4.16 Date.prototype.getUTCMilliseconds ( )
  // 20.3.4.17 Date.prototype.getUTCMinutes ( )
  // 20.3.4.18 Date.prototype.getUTCMonth ( )
  // 20.3.4.19 Date.prototype.getUTCSeconds ( )
  // 20.3.4.20 Date.prototype.setDate ( date )
  // 20.3.4.21 Date.prototype.setFullYear ( year [ , month [ , date ] ] )
  // 20.3.4.22 Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )
  // 20.3.4.23 Date.prototype.setMilliseconds ( ms )
  // 20.3.4.24 Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )
  // 20.3.4.25 Date.prototype.setMonth ( month [ , date ] )
  // 20.3.4.26 Date.prototype.setSeconds ( sec [ , ms ] )
  // 20.3.4.27 Date.prototype.setTime ( time )
  // 20.3.4.28 Date.prototype.setUTCDate ( date )
  // 20.3.4.29 Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )
  // 20.3.4.30 Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )
  // 20.3.4.31 Date.prototype.setUTCMilliseconds ( ms )
  // 20.3.4.32 Date.prototype.setUTCMinutes ( min [ , sec [, ms ] ] )
  // 20.3.4.33 Date.prototype.setUTCMonth ( month [ , date ] )
  // 20.3.4.34 Date.prototype.setUTCSeconds ( sec [ , ms ] )
  // 20.3.4.35 Date.prototype.toDateString ( )
  // 20.3.4.36 Date.prototype.toISOString ( )
  // 20.3.4.37 Date.prototype.toJSON ( key )
  // 20.3.4.38 Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )
  // 20.3.4.39 Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )
  // 20.3.4.40 Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )
  // 20.3.4.41 Date.prototype.toString ( )
  // 20.3.4.42 Date.prototype.toTimeString ( )
  // 20.3.4.43 Date.prototype.toUTCString ( )
  // 20.3.4.44 Date.prototype.valueOf ( )
  // 20.3.4.45 Date.prototype [ @@toPrimitive ] ( hint )
  // 20.3.5 Properties of Date Instances

  // (No polyfillable changes from ES5)

  // ---------------------------------------
  // 21 Text Processing
  // ---------------------------------------

  var string_regexp_dispatch = (function() {
    var faux = {}, secret = Symbol();
    faux[Symbol.match] = function() { return secret; };
    return ("").match(faux) === secret;
  }());

  // 21.1 String Objects
  // 21.1.1 The String Constructor
  // 21.1.1.1 String ( value )
  // 21.1.2 Properties of the String Constructor
  // 21.1.2.1 String.fromCharCode ( ...codeUnits )

  // 21.1.2.2 String.fromCodePoint ( ...codePoints )
  define(
    String, 'fromCodePoint',
    function fromCodePoint(/*...codePoints*/) {
      var codePoints = arguments,
          length = codePoints.length,
          elements = [],
          nextIndex = 0;
      while (nextIndex < length) {
        var next = codePoints[nextIndex];
        var nextCP = Number(next);
        if (!SameValue(nextCP, ToInteger(nextCP)) ||
            nextCP < 0 || nextCP > 0x10FFFF) {
          throw RangeError('Invalid code point ' + nextCP);
        }
        if (nextCP < 0x10000) {
          elements.push(String.fromCharCode(nextCP));
        } else {
          nextCP -= 0x10000;
          elements.push(String.fromCharCode((nextCP >> 10) + 0xD800));
          elements.push(String.fromCharCode((nextCP % 0x400) + 0xDC00));
        }
        nextIndex += 1;
      }
      return elements.join('');
    });

  // 21.1.2.3 String.prototype

  // 21.1.2.4 String.raw ( template , ...substitutions )
  define(
    String, 'raw',
    function raw(template /*, ...substitutions*/) {
      var substitutions = [].slice.call(arguments, 1);

      var cooked = Object(template);
      var rawValue = cooked['raw'];
      var raw = Object(rawValue);
      var len = raw['length'];
      var literalSegments = ToLength(len);
      if (literalSegments <= 0) return '';
      var stringElements = [];
      var nextIndex = 0;
      while (true) {
        var next = raw[nextIndex];
        var nextSeg = String(next);
        stringElements.push(nextSeg);
        if (nextIndex + 1 === literalSegments)
          return stringElements.join('');
        next = substitutions[nextIndex];
        var nextSub = String(next);
        stringElements.push(nextSub);
        nextIndex = nextIndex + 1;
      }
    });

  // See https://githib.com/inexorabletash/uate for a more useful version.

  // 21.1.3 Properties of the String Prototype Object
  // 21.1.3.1 String.prototype.charAt ( pos )
  // 21.1.3.2 String.prototype.charCodeAt ( pos )

  // 21.1.3.3 String.prototype.codePointAt ( pos )
  define(
    String.prototype, 'codePointAt',
    function codePointAt(pos) {
      var o = strict(this);
      var s = String(o);
      var position = ToInteger(pos);
      var size = s.length;
      if (position < 0 || position >= size) return undefined;
      var first = s.charCodeAt(position);
      if (first < 0xD800 || first > 0xDBFF || position + 1 === size) return first;
      var second = s.charCodeAt(position + 1);
      if (second < 0xDC00 || second > 0xDFFF) return first;
      return ((first - 0xD800) * 1024) + (second - 0xDC00) + 0x10000;
    });

  // 21.1.3.4 String.prototype.concat ( ...args )
  // 21.1.3.5 String.prototype.constructor

  // 21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition] )
  define(
    String.prototype, 'endsWith',
    function endsWith(searchString) {
      var endPosition = arguments[1];

      var o = strict(this);
      var s = String(o);
      var searchStr = String(searchString);
      var len = s.length;
      var pos = (endPosition === undefined) ? len : ToInteger(endPosition);
      var end = min(max(pos, 0), len);
      var searchLength = searchStr.length;
      var start = end - searchLength;
      if (start < 0) return false;
      if (s.substring(start, start + searchLength) === searchStr) return true;
      return false;
    });

  // 21.1.3.7 String.prototype.includes ( searchString [ , position ] )
  define(
    String.prototype, 'includes',
    function includes(searchString) {
      var position = arguments[1];

      var o = strict(this);
      var s = String(o);
      var searchStr = String(searchString);
      var pos = ToInteger(position);
      var len = s.length;
      var start = min(max(pos, 0), len);
      return s.indexOf(searchStr, start) !== -1;
    });

  // 21.1.3.8 String.prototype.indexOf ( searchString [ , position ] )
  // 21.1.3.9 String.prototype.lastIndexOf ( searchString [ , position ] )
  // 21.1.3.10 String.prototype.localeCompare ( that [, reserved1 [ , reserved2 ] ] )
  // 21.1.3.11 String.prototype.match ( regexp )
  define(
    String.prototype, 'match',
    function match(regexp) {
      var o = strict(this);
      var s = String(o);
      if (HasProperty(regexp, $$match)) var rx = regexp;
      else rx = new RegExp(regexp);
      return rx[$$match](s);
    }, !string_regexp_dispatch);

  // 21.1.3.12 String.prototype.normalize ( [ form ] )

  // Not practical due to table sizes; if needed, pull in:
  // https://github.com/walling/unorm/

  // 21.1.3.13 String.prototype.repeat ( count )
  define(
    String.prototype, 'repeat',
    function repeat(count) {
      var o = strict(this);
      var s = String(o);
      var n = ToInteger(count);
      if (n < 0) throw RangeError();
      if (n === Infinity) throw RangeError();
      var t = new Array(n + 1).join(s);
      return t;
    });

  // 21.1.3.14 String.prototype.replace (searchValue, replaceValue )
  define(
    String.prototype, 'replace',
    function replace(searchValue, replaceValue) {
      var o = strict(this);
      if (HasProperty(searchValue, $$replace))
        return searchValue[$$replace](o, replaceValue);
      return orig_replace.call(o, searchValue, replaceValue);
    }, !string_regexp_dispatch);

  // 21.1.3.15 String.prototype.search ( regexp )
  define(
    String.prototype, 'search',
    function search(regexp) {
      var o = strict(this);
      var string = String(o);
      if (HasProperty(regexp, $$search)) var rx = regexp;
      else rx = new RegExp(regexp);
      return rx[$$search](string);
    }, !string_regexp_dispatch);

  // 21.1.3.16 String.prototype.slice ( start, end )
  // 21.1.3.17 String.prototype.split ( separator, limit )
  define(
    String.prototype, 'split',
    function split(separator, limit) {
      var o = strict(this);
      if (HasProperty(separator, $$split))
        return separator[$$split](o, limit);
      return orig_split.call(o, separator, limit);
    }, !string_regexp_dispatch);

  // 21.1.3.18 String.prototype.startsWith ( searchString [, position ] )
  define(
    String.prototype, 'startsWith',
    function startsWith(searchString) {
      var position = arguments[1];

      var o = strict(this);
      var s = String(o);
      var searchStr = String(searchString);
      var pos = ToInteger(position);
      var len = s.length;
      var start = min(max(pos, 0), len);
      var searchLength = searchStr.length;
      if (searchLength + start > len) return false;
      if (s.substring(start, start + searchLength) === searchStr) return true;
      return false;
    });

  // 21.1.3.19 String.prototype.substring ( start, end )
  // 21.1.3.20 String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )
  // 21.1.3.21 String.prototype.toLocaleUpperCase ([ reserved1 [ , reserved2 ] ] )
  // 21.1.3.22 String.prototype.toLowerCase ( )
  // 21.1.3.23 String.prototype.toString ( )
  // 21.1.3.24 String.prototype.toUpperCase ( )
  // 21.1.3.25 String.prototype.trim ( )
  // 21.1.3.26 String.prototype.valueOf ( )

  // 21.1.3.27 String.prototype [ @@iterator ]( )
  define(
    String.prototype, $$iterator,
    function entries() {
      return CreateStringIterator(this, 'value');
    });

  // 21.1.4 Properties of String Instances
  // 21.1.4.1 length

  // 21.1.5 String Iterator Objects
  /** @constructor */
  function StringIterator() {}

  // 21.1.5.1 CreateStringIterator Abstract Operation
  function CreateStringIterator(string, kind) {
    var s = String(string);
    var iterator = new StringIterator;
    set_internal(iterator, '[[IteratedString]]', s);
    set_internal(iterator, '[[StringIteratorNextIndex]]', 0);
    set_internal(iterator, '[[StringIterationKind]]', kind);
    return iterator;
  }

  // 21.1.5.2 The %StringIteratorPrototype% Object
  var $StringIteratorPrototype$ = Object.create($IteratorPrototype$);
  StringIterator.prototype = $StringIteratorPrototype$;

  // 21.1.5.2.1 %StringIteratorPrototype%.next ( )
  define(
    $StringIteratorPrototype$, 'next',
    function next() {
      var o = ToObject(this);
      var s = String(o['[[IteratedString]]']),
          index = o['[[StringIteratorNextIndex]]'],
          len = s.length;
      if (index >= len) {
        set_internal(o, '[[StringIteratorNextIndex]]', Infinity);
        return CreateIterResultObject(undefined, true);
      }
      var cp = s.codePointAt(index);
      set_internal(o, '[[StringIteratorNextIndex]]', index + (cp > 0xFFFF ? 2 : 1));
      return CreateIterResultObject(String.fromCodePoint(cp), false);
    });

  // 21.1.5.2.2 %StringIteratorPrototype% [ @@toStringTag ]
  define($StringIteratorPrototype$, $$toStringTag, 'String Iterator');

  // 21.1.5.3 Properties of String Iterator Instances

  // ---------------------------------------
  // 21.2 RegExp (Regular Expression) Objects
  // ---------------------------------------

  // 21.2.1 Patterns
  // 21.2.2 Pattern Semantics
  // 21.2.2.1 Notation
  // 21.2.2.2 Pattern
  // 21.2.2.3 Disjunction
  // 21.2.2.4 Alternative
  // 21.2.2.5 Term
  // 21.2.2.6 Assertion
  // 21.2.2.7 Quantifier
  // 21.2.2.8 Atom
  // 21.2.2.9 AtomEscape
  // 21.2.2.10 CharacterEscape
  // 21.2.2.11 DecimalEscape
  // 21.2.2.12 CharacterClassEscape
  // 21.2.2.13 CharacterClass
  // 21.2.2.14 ClassRanges
  // 21.2.2.15 NonemptyClassRanges
  // 21.2.2.16 NonemptyClassRangesNoDash
  // 21.2.2.17 ClassAtom
  // 21.2.2.18 ClassAtomNoDash
  // 21.2.2.19 ClassEscape
  // 21.2.3 The RegExp Constructor
  // 21.2.3.1 RegExp ( pattern, flags )
  // 21.2.3.2 new RegExp( ...argumentsList )
  // 21.2.3.3 Abstract Operations for the RegExp Constructor
  // 21.2.4 Properties of the RegExp Constructor
  // 21.2.4.1 RegExp.prototype
  // 21.2.5 Properties of the RegExp Prototype Object
  // 21.2.5.1 RegExp.prototype.constructor
  // 21.2.5.2 RegExp.prototype.exec ( string )

  // 21.2.5.3 get RegExp.prototype.flags
  if (!('flags' in RegExp.prototype)) {
    Object.defineProperty(
      RegExp.prototype, 'flags', {
        get: function() {
          var s = String(this);
          return s.substring(s.lastIndexOf('/') + 1);
        }
      });
  }

  // 21.2.5.4 get RegExp.prototype.global
  // 21.2.5.5 get RegExp.prototype.ignoreCase

  // 21.2.5.6 RegExp.prototype [ @@match ] ( string )
  define(RegExp.prototype, $$match, function(string) {
    var o = strict(this);
    return orig_match.call(string, o);
  });

  // 21.2.5.7 get RegExp.prototype.multiline

  // 21.2.5.8 RegExp.prototype [ @@replace ] ( string, replaceValue )
  define(RegExp.prototype, $$replace, function(string, replaceValue) {
    var o = strict(this);
    return orig_replace.call(string, o, replaceValue);
  });

  // 21.2.5.9 RegExp.prototype [ @@search ] ( string )
  define(RegExp.prototype, $$search, function(string) {
    var o = strict(this);
    return orig_search.call(string, o);
  });

  // 21.2.5.10 get RegExp.prototype.source

  // 21.2.5.11 RegExp.prototype [ @@split ] ( string, limit )
  define(RegExp.prototype, $$split, function(string, limit) {
    var o = strict(this);
    return orig_split.call(string, o, limit);
  });

  // 21.2.5.12 get RegExp.prototype.sticky
  // 21.2.5.13 RegExp.prototype.test( S )
  // 21.2.5.14 RegExp.prototype.toString ( )
  // 21.2.5.15 get RegExp.prototype.unicode

  // 21.2.6 Properties of RegExp Instances
  // 21.2.6.1 lastIndex

  // (No polyfillable changes from ES5)

  // ---------------------------------------
  // 22 Indexed Collections
  // ---------------------------------------

  // ---------------------------------------
  // 22.1 Array Objects
  // ---------------------------------------

  // 22.1.1 The Array Constructor
  // 22.1.1.1 Array ( )
  // 22.1.1.2 Array (len)
  // 22.1.1.3 Array (...items )

  // 22.1.2 Properties of the Array Constructor

  // 22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )
  define(
    Array, 'from',
    function from(items) {
      var mapfn = arguments[1];
      var thisArg = arguments[2];

      var c = strict(this);
      if (mapfn === undefined) {
        var mapping = false;
      } else {
        if (!IsCallable(mapfn)) throw TypeError();
        var t = thisArg;
        mapping = true;
      }
      var usingIterator = GetMethod(items, $$iterator);
      if (usingIterator !== undefined) {
         if (IsConstructor(c)) {
          var a = new c();
        } else {
          a = new Array(0);
        }
        var iterator = GetIterator(items, usingIterator);
        var k = 0;
        while (true) {
          var next = IteratorStep(iterator);
          if (next === false) {
            a.length = k;
            return a;
          }
          var nextValue = IteratorValue(next);
          if (mapping)
            var mappedValue = mapfn.call(t, nextValue);
          else
            mappedValue = nextValue;
          a[k] = mappedValue;
          k += 1;
        }
      }
      var arrayLike = ToObject(items);
      var lenValue = arrayLike.length;
      var len = ToLength(lenValue);
      if (IsConstructor(c)) {
        a = new c(len);
      } else {
        a = new Array(len);
      }
      k = 0;
      while (k < len) {
        var kValue = arrayLike[k];
        if (mapping)
          mappedValue = mapfn.call(t, kValue, k);
        else
          mappedValue = kValue;
        a[k] = mappedValue;
        k += 1;
      }
      a.length = len;
      return a;
    });

  // 22.1.2.2 Array.isArray ( arg )

  // 22.1.2.3 Array.of ( ...items )
  define(
    Array, 'of',
    function of() {
      var items = arguments;

      var lenValue = items.length;
      var len = ToUint32(lenValue);
      var c = strict(this), a;
      if (IsConstructor(c)) {
        a = new c(len);
        a = ToObject(a);
      } else {
        a = new Array(len);
      }
      var k = 0;
      while (k < len) {
        a[k] = items[k];
        k += 1;
      }
      a.length = len;
      return a;
    });

  // 22.1.2.4 Array.prototype
  // 22.1.2.5 get Array [ @@species ]
  // 22.1.3 Properties of the Array Prototype Object
  // 22.1.3.1 Array.prototype.concat ( ...arguments )
  // 22.1.3.1.1 Runtime Semantics: IsConcatSpreadable ( O )
  // 22.1.3.2 Array.prototype.constructor
  // 22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )
  define(
    Array.prototype, 'copyWithin',
    function copyWithin(target, start/*, end*/) {
      var end = arguments[2];

      var o = ToObject(this);
      var lenVal = o.length;
      var len = ToLength(lenVal);
      len = max(len, 0);
      var relativeTarget = ToInteger(target);
      var to;
      if (relativeTarget < 0)
        to = max(len + relativeTarget, 0);
      else
        to = min(relativeTarget, len);
      var relativeStart = ToInteger(start);
      var from;
      if (relativeStart < 0)
        from = max(len + relativeStart, 0);
      else
        from = min(relativeStart, len);
      var relativeEnd;
      if (end === undefined)
        relativeEnd = len;
      else
        relativeEnd = ToInteger(end);
      var final;
      if (relativeEnd < 0)
        final = max(len + relativeEnd, 0);
      else
        final = min(relativeEnd, len);
      var count = min(final - from, len - to);
      var direction;
      if (from < to && to < from + count) {
        direction = -1;
        from = from + count - 1;
        to = to + count - 1;
      } else {
        direction = 1;
      }
      while (count > 0) {
        var fromKey = String(from);
        var toKey = String(to);
        var fromPresent = HasProperty(o, fromKey);
        if (fromPresent) {
          var fromVal = o[fromKey];
          o[toKey] = fromVal;
        } else {
          delete o[toKey];
        }
        from = from + direction;
        to = to + direction;
        count = count - 1;
      }
      return o;
    });

  // 22.1.3.4 Array.prototype.entries ( )
  var nativeArrayIteratorMethods =
        ('entries' in Array.prototype && 'next' in [].entries());

  define(
    Array.prototype, 'entries',
    function entries() {
      return CreateArrayIterator(this, 'key+value');
    }, !nativeArrayIteratorMethods);

  // 22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg] )

  // 22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )
  define(
    Array.prototype, 'fill',
    function fill(value/*, start, end*/) {
      var start = arguments[1],
          end = arguments[2];

      var o = ToObject(this);
      var lenVal = o.length;
      var len = ToLength(lenVal);
      len = max(len, 0);
      var relativeStart = ToInteger(start);
      var k;
      if (relativeStart < 0)
        k = max((len + relativeStart), 0);
      else
        k = min(relativeStart, len);
      var relativeEnd;
      if (end === undefined)
        relativeEnd = len;
      else
        relativeEnd = ToInteger(end);
      var final;
      if (relativeEnd < 0)
        final = max((len + relativeEnd), 0);
      else
        final = min(relativeEnd, len);
      while (k < final) {
        var pk = String(k);
        o[pk] = value;
        k += 1;
      }
      return o;
    });

  // 22.1.3.7 Array.prototype.filter ( callbackfn [ , thisArg ] )

  // 22.1.3.8 Array.prototype.find ( predicate [ , thisArg ] )
  define(
    Array.prototype, 'find',
    function find(predicate) {
      var o = ToObject(this);
      var lenValue = o.length;
      var len = ToInteger(lenValue);
      if (!IsCallable(predicate)) throw TypeError();
      var t = arguments.length > 1 ? arguments[1] : undefined;
      var k = 0;
      while (k < len) {
        var pk = String(k);
        var kPresent = HasProperty(o, pk);
        if (kPresent) {
          var kValue = o[pk];
          var testResult = predicate.call(t, kValue, k, o);
          if (Boolean(testResult)) {
            return kValue;
          }
        }
        ++k;
      }
      return undefined;
    });

  // 22.1.3.9 Array.prototype.findIndex ( predicate [ , thisArg ] )
  define(
    Array.prototype, 'findIndex',
    function findIndex(predicate) {
      var o = ToObject(this);
      var lenValue = o.length;
      var len = ToLength(lenValue);
      if (!IsCallable(predicate)) throw TypeError();
      var t = arguments.length > 1 ? arguments[1] : undefined;
      var k = 0;
      while (k < len) {
        var pk = String(k);
        var kPresent = HasProperty(o, pk);
        if (kPresent) {
          var kValue = o[pk];
          var testResult = predicate.call(t, kValue, k, o);
          if (Boolean(testResult)) {
            return k;
          }
        }
        ++k;
      }
      return -1;
    });

  // 22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )
  // 22.1.3.11 Array.prototype.indexOf ( searchElement [ , fromIndex ] )
  // 22.1.3.12 Array.prototype.join (separator)

  // 22.1.3.13 Array.prototype.keys ( )
  define(
    Array.prototype, 'keys',
    function keys() {
      return CreateArrayIterator(this, 'key');
    }, !nativeArrayIteratorMethods);

  // 22.1.3.14 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )
  // 22.1.3.15 Array.prototype.map ( callbackfn [ , thisArg ] )
  // 22.1.3.16 Array.prototype.pop ( )
  // 22.1.3.17 Array.prototype.push ( ...items )
  // 22.1.3.18 Array.prototype.reduce ( callbackfn [ , initialValue ] )
  // 22.1.3.19 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )
  // 22.1.3.20 Array.prototype.reverse ( )
  // 22.1.3.21 Array.prototype.shift ( )
  // 22.1.3.22 Array.prototype.slice (start, end)
  // 22.1.3.23 Array.prototype.some ( callbackfn [ , thisArg ] )
  // 22.1.3.24 Array.prototype.sort (comparefn)
  // 22.1.3.25 Array.prototype.splice (start, deleteCount , ...items )
  // 22.1.3.26 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )
  // 22.1.3.27 Array.prototype.toString ( )
  // 22.1.3.28 Array.prototype.unshift ( ...items )

  // 22.1.3.29 Array.prototype.values ( )
  define(
    Array.prototype, 'values',
    function values() {
      return CreateArrayIterator(this, 'value');
    }, !nativeArrayIteratorMethods);

  // 22.1.3.30 Array.prototype [ @@iterator ] ( )
  define(
    Array.prototype, $$iterator,
    Array.prototype.values
    );

  // 22.1.3.31 Array.prototype [ @@unscopables ]
  // 22.1.4 Properties of Array Instances
  // 22.1.4.1 length

  // 22.1.5 Array Iterator Objects
  function ArrayIterator() {}

  // 22.1.5.1 CreateArrayIterator Abstract Operation
  function CreateArrayIterator(array, kind) {
    var o = ToObject(array);
    var iterator = new ArrayIterator;
    set_internal(iterator, '[[IteratedObject]]', o);
    set_internal(iterator, '[[ArrayIteratorNextIndex]]', 0);
    set_internal(iterator, '[[ArrayIterationKind]]', kind);
    return iterator;
  }

  // 22.1.5.2 The %ArrayIteratorPrototype% Object
  var $ArrayIteratorPrototype$ = Object.create($IteratorPrototype$);
  ArrayIterator.prototype = $ArrayIteratorPrototype$;

  // 22.1.5.2.1 %ArrayIteratorPrototype%. next( )
  define(
    $ArrayIteratorPrototype$, 'next',
    function next() {
      var o = strict(this);
      if (Type(o) !== 'object') throw TypeError();
      var a = o['[[IteratedObject]]'],
          index = o['[[ArrayIteratorNextIndex]]'],
          itemKind = o['[[ArrayIterationKind]]'],
          lenValue = a.length,
          len = ToUint32(lenValue),
          elementKey,
          elementValue;
      if (itemKind.indexOf('sparse') !== -1) {
        var found = false;
        while (!found && index < len) {
          elementKey = String(index);
          found = HasProperty(a, elementKey);
          if (!found) {
            index += 1;
          }
        }
      }
      if (index >= len) {
        set_internal(o, '[[ArrayIteratorNextIndex]]', Infinity);
        return CreateIterResultObject(undefined, true);
      }
      elementKey = index;
      set_internal(o, '[[ArrayIteratorNextIndex]]', index + 1);
      if (itemKind.indexOf('value') !== -1)
        elementValue = a[elementKey];
      if (itemKind.indexOf('key+value') !== -1)
        return CreateIterResultObject([elementKey, elementValue], false);
      if (itemKind.indexOf('key') !== -1)
        return CreateIterResultObject(elementKey, false);
      if (itemKind === 'value')
        return CreateIterResultObject(elementValue, false);
      throw Error('Internal error');
    });

  // 22.1.5.2.2 %ArrayIteratorPrototype% [ @@toStringTag ]
  define($ArrayIteratorPrototype$, $$toStringTag, 'Array Iterator');

  // 22.1.5.3 Properties of Array Iterator Instances


  // ---------------------------------------
  // 22.2 TypedArray Objects
  // ---------------------------------------

  // See typedarray.js for TypedArray polyfill

  ['Int8Array', 'Uint8Array', 'Uint8ClampedArray',
   'Int16Array', 'Uint16Array',
   'Int32Array', 'Uint32Array',
   'Float32Array', 'Float64Array'].forEach(function ($TypedArrayName$) {
     if (!($TypedArrayName$ in global))
       return;
     var $TypedArray$ = global[$TypedArrayName$];

     // 22.2.1 The %TypedArray% Intrinsic Object
     // 22.2.1.1 %TypedArray% ( length )
     // 22.2.1.2 %TypedArray% ( typedArray )
     // 22.2.1.3 %TypedArray% ( object )
     // 22.2.1.4 %TypedArray% ( buffer [ , byteOffset [ , length ] ] )
     // 22.2.1.5 %TypedArray% ( all other argument combinations )
     // 22.2.2 Properties of the %TypedArray% Intrinsic Object

     // 22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )
     define(
       $TypedArray$, 'from',
       function from(source) {
         var mapfn = arguments[1];
         var thisArg = arguments[2];

         var c = strict(this);
         if (!IsConstructor(c)) throw TypeError();
         if (mapfn === undefined) {
           var mapping = false;
         } else {
           if (IsCallable(mapfn)) throw TypeError();
           var t = thisArg;
           mapping = true;
         }
         var usingIterator = GetMethod(source, $$iterator);
         if (usingIterator !== undefined) {
           var iterator = GetIterator(source, usingIterator);
           var values = [];
           var next = true;
           while (next !== false) {
             next = IteratorStep(iterator);
             if (next !== false) {
               var nextValue = IteratorValue(next);
               values.push(nextValue);
             }
           }
           var len = values.length;
           var newObj = new c(len);
           var k = 0;
           while (k < len) {
             var kValue = values.shift();
             if (mapping) {
               var mappedValue = mapfn.call(t, kValue);
             } else {
               mappedValue = kValue;
             }
             newObj[k] = mappedValue;
             ++k;
           }
           console.assert(values.length === 0);
           return newObj;
         }
         var arrayLike = ToObject(source);
         var lenValue = arrayLike.length;
         len = ToLength(lenValue);
         newObj = new c(len);
         k = 0;
         while (k < len) {
           kValue = arrayLike[k];
           if (mapping) {
             mappedValue = mapfn.call(t, kValue, k);
           } else {
             mappedValue = kValue;
           }
           newObj[k] = mappedValue;
           ++k;
         }
         return newObj;
       });

     // 22.2.2.2 %TypedArray%.of ( ...items )
     define(
       $TypedArray$, 'of',
       function of() {
         var items = arguments;

         var len = items.length;
         var c = strict(this);
         var newObj = new c(len);
         var k = 0;
         while (k < len) {
           newObj[k] = items[k];
           ++k;
         }
         return newObj;
       });

     // 22.2.2.3 %TypedArray%.prototype
     // 22.2.2.4 get %TypedArray% [ @@species ]
     // 22.2.3 Properties of the %TypedArrayPrototype% Object
     // 22.2.3.1 get %TypedArray%.prototype.buffer
     // 22.2.3.2 get %TypedArray%.prototype.byteLength
     // 22.2.3.3 get %TypedArray%.prototype.byteOffset
     // 22.2.3.4 %TypedArray%.prototype.constructor

     // 22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [, end ] )
     define($TypedArray$.prototype, 'copyWithin', Array.prototype.copyWithin);

     // 22.2.3.6 %TypedArray%.prototype.entries ( )
     define($TypedArray$.prototype, 'entries', Array.prototype.entries);

     // 22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )
     define($TypedArray$.prototype, 'every', Array.prototype.every);

     // 22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )
     define(
       $TypedArray$.prototype, 'fill',
       //Array.prototype.fill // Doesn't work in Safari 7
       function fill(value/*, start, end*/) {
         var start = arguments[1],
             end = arguments[2];

         var o = ToObject(this);
         var lenVal = o.length;
         var len = ToLength(lenVal);
         len = max(len, 0);
         var relativeStart = ToInteger(start);
         var k;
         if (relativeStart < 0) k = max((len + relativeStart), 0);
         else k = min(relativeStart, len);
         var relativeEnd;
         if (end === undefined) relativeEnd = len;
         else relativeEnd = ToInteger(end);
         var final;
         if (relativeEnd < 0) final = max((len + relativeEnd), 0);
         else final = min(relativeEnd, len);
         while (k < final) {
           var pk = String(k);
           o[pk] = value;
           k += 1;
         }
         return o;
       });

     // 22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )
     define(
       $TypedArray$.prototype, 'filter',
       function filter(callbackfn) {
         var thisArg = arguments[1];

         var o = ToObject(this);
         var lenVal = o.length;
         var len = ToLength(lenVal);
         if (!IsCallable(callbackfn)) throw TypeError();
         var t = thisArg;
         var c = o.constructor;
         var kept = [];
         var k = 0;
         var captured = 0;
         while (k < len) {
           var kValue = o[k];
           var selected = callbackfn.call(t, kValue, k, o);
           if (selected) {
             kept.push(kValue);
             ++captured;
           }
           ++k;
         }
         var a = new c(captured);
         var n = 0;
         for (var i = 0; i < kept.length; ++i) {
           var e = kept[i];
           a[n] = e;
           ++n;
         }
         return a;
       });

     // 22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )
     define($TypedArray$.prototype, 'find', Array.prototype.find);

     // 22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )
     define($TypedArray$.prototype, 'findIndex', Array.prototype.findIndex);

     // 22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )
     define($TypedArray$.prototype, 'forEach', Array.prototype.forEach);

     // 22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )
     define($TypedArray$.prototype, 'indexOf', Array.prototype.indexOf);

     // 22.2.3.14 %TypedArray%.prototype.join ( separator )
     define($TypedArray$.prototype, 'join', Array.prototype.join);

     // 22.2.3.15 %TypedArray%.prototype.keys ( )
     define($TypedArray$.prototype, 'keys', Array.prototype.keys);

     // 22.2.3.16 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )
     define($TypedArray$.prototype, 'lastIndexOf', Array.prototype.lastIndexOf);

     // 22.2.3.17 get %TypedArray%.prototype.length

     // 22.2.3.18 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )
     define(
       $TypedArray$.prototype, 'map',
       function map(callbackfn) {
         var thisArg = arguments[1];

         var o = ToObject(this);
         var lenValue = o.length;
         var len = ToLength(lenValue);
         if (!IsCallable(callbackfn)) throw TypeError();
         var t = thisArg;
         var a = undefined;
         var c = o.constructor;
         if (IsConstructor(c))
           a = new c(len);
         if (a === undefined)
           a = new Array(len);
         var k = 0;
         while (k < len) {
           var kPresent = HasProperty(o, k);
           if (kPresent) {
             var kValue = o[k];
             var mappedValue = callbackfn.call(t, kValue, k, o);
             a[k] = mappedValue;
           }
           ++k;
         }
         return a;
       });

     // 22.2.3.19 %TypedArray%.prototype.reduce ( callbackfn [, initialValue] )
     define($TypedArray$.prototype, 'reduce', Array.prototype.reduce);

     // 22.2.3.20 %TypedArray%.prototype.reduceRight ( callbackfn [, initialValue] )
     define($TypedArray$.prototype, 'reduceRight', Array.prototype.reduceRight);

     // 22.2.3.21 %TypedArray%.prototype.reverse ( )
     define($TypedArray$.prototype, 'reverse', Array.prototype.reverse);

     // 22.2.3.22 %TypedArray%.prototype.set ( overloaded [ , offset ])
     // 22.2.3.22.1 %TypedArray%.prototype.set (array [ , offset ] )
     // 22.2.3.22.2 %TypedArray%.prototype.set(typedArray [, offset ] )

     // 22.2.3.23 %TypedArray%.prototype.slice ( start, end )
     define(
       $TypedArray$.prototype, 'slice',
       function slice(start, end) {
         var o = ToObject(this);
         var lenVal = o.length;
         var len = ToLength(lenVal);
         var relativeStart = ToInteger(start);
         var k = (relativeStart < 0) ? max(len + relativeStart, 0) : min(relativeStart, len);
         var relativeEnd = (end === undefined) ? len : ToInteger(end);
         var final = (relativeEnd < 0) ? max(len + relativeEnd, 0) : min(relativeEnd, len);
         var count = final - k;
         var c = o.constructor;
         if (IsConstructor(c)) {
           var a = new c(count);
         } else {
           throw TypeError();
         }
         var n = 0;
         while (k < final) {
           var kValue = o[k];
           a[n] = kValue;
           ++k;
           ++n;
         }
         return a;
       });

     // 22.2.3.24 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )
     define($TypedArray$.prototype, 'some', Array.prototype.some);

     // 22.2.3.25 %TypedArray%.prototype.sort ( comparefn )
     define(
       $TypedArray$.prototype, 'sort',
       function sort() {
         var comparefn = arguments[0];

         function sortCompare(x, y) {
           console.assert(Type(x) === 'number' && Type(y) === 'number');
           if (x !== x && y !== y) return +0;
           if (x !== x) return 1;
           if (y !== y) return -1;
           if (comparefn !== undefined) {
             return comparefn(x, y);
           }
           if (x < y) return -1;
           if (x > y) return 1;
           return +0;
         }
         return Array.prototype.sort.call(this, sortCompare);
       });

     // 22.2.3.26 %TypedArray%.prototype.subarray( [ begin [ , end ] ] )
     // 22.2.3.27 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])
     // 22.2.3.28 %TypedArray%.prototype.toString ( )

     // 22.2.3.29 %TypedArray%.prototype.values ( )
     define($TypedArray$.prototype, 'values', Array.prototype.values);

     // 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
     define(
       $TypedArray$.prototype, $$iterator,
       $TypedArray$.prototype.values
     );

     // 22.2.3.31 get %TypedArray%.prototype [ @@toStringTag ]
     define($TypedArray$.prototype, $$toStringTag, $TypedArrayName$);

     // 22.2.4 The TypedArray Constructors
     // 22.2.4.1TypedArray( ... argumentsList)
     // 22.2.5 Properties of the TypedArray Constructors
     // 22.2.5.1 TypedArray.BYTES_PER_ELEMENT
     // 22.2.5.2 TypedArray.prototype
     // 22.2.6 Properties of TypedArray Prototype Objects
     // 22.2.6.1 TypedArray.prototype.BYTES_PER_ELEMENT
     // 22.2.6.2 TypedArray.prototype.constructor
     // 22.2.7 Properties of TypedArray Instances
   });

  // ---------------------------------------
  // 23 Keyed Collection
  // ---------------------------------------

  // ---------------------------------------
  // 23.1 Map Objects
  // ---------------------------------------

  (function() {
    // 23.1.1 The Map Constructor

    // 23.1.1.1 Map ( [ iterable ] )
    /** @constructor */
    function Map(/*iterable*/) {
      var map = strict(this);
      var iterable = arguments[0];

      if (Type(map) !== 'object') throw TypeError();
      if ('[[MapData]]' in map) throw TypeError();

      if (iterable !== undefined) {
        var adder = map['set'];
        if (!IsCallable(adder)) throw TypeError();
        var iter = GetIterator(ToObject(iterable));
      }
      set_internal(map, '[[MapData]]', { keys: [], values: [] });
      if (iter === undefined) return map;
      while (true) {
        var next = IteratorStep(iter);
        if (next === false)
          return map;
        var nextItem = IteratorValue(next);
        if (Type(nextItem) !== 'object') throw TypeError();
        var k = nextItem[0];
        var v = nextItem[1];
        adder.call(map, k, v);
      }

      return map;
    }

    if (!('Map' in global) || OVERRIDE_NATIVE_FOR_TESTING ||
        (function() { try { new global.Map([]); return false; } catch (_) { return true; } }()) ||
        (function() { try { return !new global.Map().entries().next; } catch (_) { return true; } }()) ||
        (new global.Map([['a', 1]]).size !== 1))
      global.Map = Map;


    function MapDataIndexOf(mapData, key) {
      var i;
      if (key === key) return mapData.keys.indexOf(key);
      // Slow case for NaN
      for (i = 0; i < mapData.keys.length; i += 1)
        if (SameValueZero(mapData.keys[i], key)) return i;
      return -1;
    }

    // 23.1.1.2 new Map ( ... argumentsList )
    // 23.1.2 Properties of the Map Constructor
    // 23.1.2.1 Map.prototype
    var $MapPrototype$ = {};
    Map.prototype = $MapPrototype$;

    // 23.1.2.2 get Map [ @@species ]

    // 23.1.3 Properties of the Map Prototype Object
    // 23.1.3.1 Map.prototype.clear ()
    define(
      Map.prototype, 'clear',
      function clear() {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        if (!('[[MapData]]' in m)) throw TypeError();
        if (m['[[MapData]]'] === undefined) throw TypeError();
        var entries = m['[[MapData]]'];
        entries.keys.length = 0;
        entries.values.length = 0;
        return undefined;
      });

    // 23.1.3.2 Map.prototype.constructor

    // 23.1.3.3 Map.prototype.delete ( key )
    define(
      Map.prototype, 'delete',
      function delete_(key) {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        if (!('[[MapData]]' in m)) throw TypeError();
        if (m['[[MapData]]'] === undefined) throw TypeError();
        var entries = m['[[MapData]]'];
        var i = MapDataIndexOf(entries, key);
        if (i < 0) return false;
        entries.keys[i] = empty;
        entries.values[i] = empty;
        return true;
      });

    // 23.1.3.4 Map.prototype.entries ( )
    define(
      Map.prototype, 'entries',
      function entries() {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        return CreateMapIterator(m, 'key+value');
      });

    // 23.1.3.5 Map.prototype.forEach ( callbackfn [ , thisArg ] )
    define(
      Map.prototype, 'forEach',
      function forEach(callbackfn /*, thisArg*/) {
        var thisArg = arguments[1];

        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        if (!('[[MapData]]' in m)) throw TypeError();
        if (m['[[MapData]]'] === undefined) throw TypeError();
        var entries = m['[[MapData]]'];

        if (!IsCallable(callbackfn)) {
          throw TypeError('First argument to forEach is not callable.');
        }
        for (var i = 0; i < entries.keys.length; ++i) {
          if (entries.keys[i] !== empty) {
            callbackfn.call(thisArg, entries.values[i], entries.keys[i], m);
          }
        }
        return undefined;
      });

    // 23.1.3.6 Map.prototype.get ( key )
    define(
      Map.prototype, 'get',
      function get(key) {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        if (!('[[MapData]]' in m)) throw TypeError();
        if (m['[[MapData]]'] === undefined) throw TypeError();
        var entries = m['[[MapData]]'];
        var i = MapDataIndexOf(entries, key);
        if (i >= 0) return entries.values[i];
        return undefined;
      });

    // 23.1.3.7 Map.prototype.has ( key )
    define(
      Map.prototype, 'has',
      function has(key) {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        if (!('[[MapData]]' in m)) throw TypeError();
        if (m['[[MapData]]'] === undefined) throw TypeError();
        var entries = m['[[MapData]]'];
        if (MapDataIndexOf(entries, key) >= 0) return true;
        return false;
      });

    // 23.1.3.8 Map.prototype.keys ( )
    define(
      Map.prototype, 'keys',
      function keys() {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        return CreateMapIterator(m, 'key');
      });

    // 23.1.3.9 Map.prototype.set ( key , value )
    define(
      Map.prototype, 'set',
      function set(key, value) {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        if (!('[[MapData]]' in m)) throw TypeError();
        if (m['[[MapData]]'] === undefined) throw TypeError();
        var entries = m['[[MapData]]'];
        var i = MapDataIndexOf(entries, key);
        if (i < 0) i = entries.keys.length;
        if (SameValue(key, -0)) key = 0;
        entries.keys[i] = key;
        entries.values[i] = value;
        return m;
      });

    // 23.1.3.10 get Map.prototype.size
    Object.defineProperty(
      Map.prototype, 'size', {
        get: function() {
          var m = strict(this);
          if (Type(m) !== 'object') throw TypeError();
          if (!('[[MapData]]' in m)) throw TypeError();
          if (m['[[MapData]]'] === undefined) throw TypeError();
          var entries = m['[[MapData]]'];
          var count = 0;
          for (var i = 0; i < entries.keys.length; ++i) {
            if (entries.keys[i] !== empty)
              count = count + 1;
          }
          return count;
        }
      });

    // 23.1.3.11 Map.prototype.values ( )
    define(
      Map.prototype, 'values',
      function values() {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        return CreateMapIterator(m, 'value');
      });

    // 23.1.3.12 Map.prototype [ @@iterator ]( )
    define(
      Map.prototype, $$iterator,
      function() {
        var m = strict(this);
        if (Type(m) !== 'object') throw TypeError();
        return CreateMapIterator(m, 'key+value');
      });

    // 23.1.3.13 Map.prototype [ @@toStringTag ]
    define(global.Map.prototype, $$toStringTag, 'Map');

    // 23.1.4 Properties of Map Instances
    // 23.1.5 Map Iterator Objects

    /** @constructor */
    function MapIterator() {}

    // 23.1.5.1 CreateMapIterator Abstract Operation
    function CreateMapIterator(map, kind) {
      if (Type(map) !== 'object') throw TypeError();
      if (!('[[MapData]]' in map)) throw TypeError();
      if (map['[[MapData]]'] === undefined) throw TypeError();
      var iterator = new MapIterator;
      set_internal(iterator, '[[Map]]', map);
      set_internal(iterator, '[[MapNextIndex]]', 0);
      set_internal(iterator, '[[MapIterationKind]]', kind);
      return iterator;
    }

    // 23.1.5.2 The %MapIteratorPrototype% Object
    var $MapIteratorPrototype$ = Object.create($IteratorPrototype$);
    MapIterator.prototype = $MapIteratorPrototype$;

    // 23.1.5.2.1 %MapIteratorPrototype%.next ( )
    define(
      $MapIteratorPrototype$, 'next',
      function next() {
        var o = strict(this);
        if (Type(o) !== 'object') throw TypeError();
        var m = o['[[Map]]'],
            index = o['[[MapNextIndex]]'],
            itemKind = o['[[MapIterationKind]]'],
            entries = m['[[MapData]]'];
        while (index < entries.keys.length) {
          var e = {key: entries.keys[index], value: entries.values[index]};
          index = index += 1;
          set_internal(o, '[[MapNextIndex]]', index);
          if (e.key !== empty) {
            if (itemKind === 'key') {
              return CreateIterResultObject(e.key, false);
            } else if (itemKind === 'value') {
              return CreateIterResultObject(e.value, false);
            } else {
              return CreateIterResultObject([e.key, e.value], false);
            }
          }
        }
        return CreateIterResultObject(undefined, true);
      });

    // 23.1.5.2.2 %MapIteratorPrototype% [ @@toStringTag ]
    define($MapIteratorPrototype$, $$toStringTag, 'Map Iterator');

    // 23.1.5.3 Properties of Map Iterator Instances
  }());

  // ---------------------------------------
  // 23.2 Set Objects
  // ---------------------------------------

  (function() {
    // 23.2.1 The Set Constructor
    // 23.2.1.1 Set ( [ iterable ] )

    /** @constructor */
    function Set(/*iterable*/) {
      var set = strict(this);
      var iterable = arguments[0];

      if (Type(set) !== 'object') throw TypeError();
      if ('[[SetData]]' in set) throw TypeError();

      if (iterable !== undefined) {
        var adder = set['add'];
        if (!IsCallable(adder)) throw TypeError();
        var iter = GetIterator(ToObject(iterable));
      }
      set_internal(set, '[[SetData]]', []);
      if (iter === undefined) return set;
      while (true) {
        var next = IteratorStep(iter);
        if (next === false)
          return set;
        var nextValue = IteratorValue(next);
        adder.call(set, nextValue);
      }

      return set;
    }

    if (!('Set' in global) || OVERRIDE_NATIVE_FOR_TESTING ||
        (function() { try { return !new global.Set().entries().next; } catch (_) { return true; } }()) ||
        (new global.Set([1]).size !== 1))
      global.Set = Set;

    function SetDataIndexOf(setData, key) {
      var i;
      if (key === key)
        return setData.indexOf(key);
      // Slow case for NaN
      for (i = 0; i < setData.length; i += 1)
        if (SameValueZero(setData[i], key)) return i;
      return -1;
    }

    // 23.2.1.2 new Set ( ...argumentsList )
    // 23.2.2 Properties of the Set Constructor

    // 23.2.2.1 Set.prototype
    var $SetPrototype$ =  {};
    Set.prototype = $SetPrototype$;

    // 23.2.2.2 get Set [ @@species ]
    // 23.2.3 Properties of the Set Prototype Object

    // 23.2.3.1 Set.prototype.add (value )
    define(
      Set.prototype, 'add',
      function add(value) {
        var s = strict(this);
        if (Type(s) !== 'object') throw TypeError();
        if (!('[[SetData]]' in s)) throw TypeError();
        if (s['[[SetData]]'] === undefined) throw TypeError();
        if (SameValue(value, -0)) value = 0;
        var entries = s['[[SetData]]'];
        var i = SetDataIndexOf(entries, value);
        if (i < 0) i = s['[[SetData]]'].length;
        s['[[SetData]]'][i] = value;

        return s;
      });

    // 23.2.3.2 Set.prototype.clear ()
    define(
      Set.prototype, 'clear',
      function clear() {
        var s = strict(this);
        if (Type(s) !== 'object') throw TypeError();
        if (!('[[SetData]]' in s)) throw TypeError();
        if (s['[[SetData]]'] === undefined) throw TypeError();
        var entries = s['[[SetData]]'];
        entries.length = 0;
        return undefined;
      });

    // 23.2.3.3 Set.prototype.constructor
    // 23.2.3.4 Set.prototype.delete ( value )
    define(
      Set.prototype, 'delete',
      function delete_(value) {
        var s = strict(this);
        if (Type(s) !== 'object') throw TypeError();
        if (!('[[SetData]]' in s)) throw TypeError();
        if (s['[[SetData]]'] === undefined) throw TypeError();
        var entries = s['[[SetData]]'];
        var i = SetDataIndexOf(entries, value);
        if (i < 0) return false;
        entries[i] = empty;
        return true;
      });

    // 23.2.3.5 Set.prototype.entries ( )
    define(
      Set.prototype, 'entries',
      function entries() {
        var s = strict(this);
        if (Type(s) !== 'object') throw TypeError();
        return CreateSetIterator(s, 'key+value');
      });

    // 23.2.3.6 Set.prototype.forEach ( callbackfn [ , thisArg ] )
    define(
      Set.prototype, 'forEach',
      function forEach(callbackfn/*, thisArg*/) {
        var thisArg = arguments[1];

        var s = strict(this);
        if (Type(s) !== 'object') throw TypeError();
        if (!('[[SetData]]' in s)) throw TypeError();
        if (s['[[SetData]]'] === undefined) throw TypeError();
        var entries = s['[[SetData]]'];

        if (!IsCallable(callbackfn)) {
          throw TypeError('First argument to forEach is not callable.');
        }
        for (var i = 0; i < entries.length; ++i) {
          if (entries[i] !== empty) {
            callbackfn.call(thisArg, entries[i], entries[i], s);
          }
        }
      });

    // 23.2.3.7 Set.prototype.has ( value )
    define(
      Set.prototype, 'has',
      function has(key) {
        var s = strict(this);
        if (Type(s) !== 'object') throw TypeError();
        if (!('[[SetData]]' in s)) throw TypeError();
        if (s['[[SetData]]'] === undefined) throw TypeError();
        var entries = s['[[SetData]]'];
        return SetDataIndexOf(entries, key) !== -1;
      });

    // 23.2.3.8 Set.prototype.keys ( )
    // See Set.prototype.values

    // 23.2.3.9 get Set.prototype.size
    Object.defineProperty(
      Set.prototype, 'size', {
        get: function() {
          var s = strict(this);
          if (Type(s) !== 'object') throw TypeError();
          if (!('[[SetData]]' in s)) throw TypeError();
          if (s['[[SetData]]'] === undefined) throw TypeError();
          var entries = s['[[SetData]]'];
          var count = 0;
          for (var i = 0; i < entries.length; ++i) {
            if (entries[i] !== empty)
              count = count + 1;
          }
          return count;
        }
      });

    // 23.2.3.10 Set.prototype.values ( )
    define(
      Set.prototype, 'values',
      function values() {
        var s = strict(this);
        if (Type(s) !== 'object') throw TypeError();
        return CreateSetIterator(s, 'value');
      });
    // NOTE: function name is still 'values':
    Set.prototype.keys = Set.prototype.values;

    // 23.2.3.11 Set.prototype [@@iterator ] ( )
    define(
      Set.prototype, $$iterator,
      function() {
        var s = strict(this);
        if (Type(s) !== 'object') throw TypeError();
        return CreateSetIterator(s);
      });

    // 23.2.3.12 Set.prototype [ @@toStringTag ]
    define(global.Set.prototype, $$toStringTag, 'Set');

    // 23.2.4 Properties of Set Instances
    // 23.2.5 Set Iterator Objects
    /** @constructor */
    function SetIterator() {}

    // 23.2.5.1 CreateSetIterator Abstract Operation
    function CreateSetIterator(set, kind) {
      if (Type(set) !== 'object') throw TypeError();
      if (!('[[SetData]]' in set)) throw TypeError();
      if (set['[[SetData]]'] === undefined) throw TypeError();
      var iterator = new SetIterator;
      set_internal(iterator, '[[IteratedSet]]', set);
      set_internal(iterator, '[[SetNextIndex]]', 0);
      set_internal(iterator, '[[SetIterationKind]]', kind);
      return iterator;
    }

    // 23.2.5.2 The %SetIteratorPrototype% Object
    var $SetIteratorPrototype$ = Object.create($IteratorPrototype$);
    SetIterator.prototype = $SetIteratorPrototype$;

    // 23.2.5.2.1 %SetIteratorPrototype%.next( )
    define(
      $SetIteratorPrototype$, 'next',
      function next() {
        var o = strict(this);
        if (Type(o) !== 'object') throw TypeError();
        var s = o['[[IteratedSet]]'],
            index = o['[[SetNextIndex]]'],
            itemKind = o['[[SetIterationKind]]'],
            entries = s['[[SetData]]'];
        while (index < entries.length) {
          var e = entries[index];
          index = index += 1;
          set_internal(o, '[[SetNextIndex]]', index);
          if (e !== empty) {
            if (itemKind === 'key+value')
              return CreateIterResultObject([e, e], false);
            return CreateIterResultObject(e, false);
          }
        }
        return CreateIterResultObject(undefined, true);
      });

    // 23.2.5.2.2 %SetIteratorPrototype% [ @@toStringTag ]
    define($SetIteratorPrototype$, $$toStringTag, 'Set Iterator');

    // 23.2.5.3 Properties of Set Iterator Instances

  }());

  // ---------------------------------------
  // 23.3 WeakMap Objects
  // ---------------------------------------

  (function() {
    // 23.3.1 The WeakMap Constructor
    // 23.3.1.1 WeakMap ( [ iterable ] )
    /** @constructor */
    function WeakMap(/*iterable*/) {
      var map = strict(this);
      var iterable = arguments[0];

      if (Type(map) !== 'object') throw TypeError();
      if ('[[WeakMapData]]' in map) throw TypeError();

      if (iterable !== undefined) {
        var adder = map['set'];
        if (!IsCallable(adder)) throw TypeError();
        var iter = GetIterator(ToObject(iterable));
      }
      set_internal(map, '[[WeakMapData]]', new EphemeronTable);
      if (iter === undefined) return map;
      while (true) {
        var next = IteratorStep(iter);
        if (next === false)
          return map;
        var nextValue = IteratorValue(next);
        if (Type(nextValue) !== 'object') throw TypeError();
        var k = nextValue[0];
        var v = nextValue[1];
        adder.call(map, k, v);
      }

      return map;
    }

    if (!('WeakMap' in global) || OVERRIDE_NATIVE_FOR_TESTING)
      global.WeakMap = WeakMap;

    // 23.3.2 Properties of the WeakMap Constructor
    // 23.3.2.1 WeakMap.prototype
    var $WeakMapPrototype$ = {};
    WeakMap.prototype = $WeakMapPrototype$;



   // 23.3.2.2 WeakMap[ @@create ] ( )
    // 23.3.3 Properties of the WeakMap Prototype Object

    // 23.3.3.1 WeakMap.prototype.constructor

    // 23.3.3.2 WeakMap.prototype.delete ( key )
    define(
      WeakMap.prototype, 'delete',
      function delete_(key) {
        var M = strict(this);
        if (Type(M) !== 'object') throw TypeError();
        if (M['[[WeakMapData]]'] === undefined) throw TypeError();
        if (Type(key) !== 'object') throw TypeError('Expected object');
        return M['[[WeakMapData]]'].remove(key);
      });

    // 23.3.3.3 WeakMap.prototype.get ( key )
    define(
      WeakMap.prototype, 'get',
      function get(key, defaultValue) {
        var M = strict(this);
        if (Type(M) !== 'object') throw TypeError();
        if (M['[[WeakMapData]]'] === undefined) throw TypeError();
        if (Type(key) !== 'object') throw TypeError('Expected object');
        return M['[[WeakMapData]]'].get(key, defaultValue);
      });

    // 23.3.3.4 WeakMap.prototype.has ( key )
    define(
      WeakMap.prototype, 'has',
      function has(key) {
        var M = strict(this);
        if (Type(M) !== 'object') throw TypeError();
        if (M['[[WeakMapData]]'] === undefined) throw TypeError();
        if (Type(key) !== 'object') throw TypeError('Expected object');
        return M['[[WeakMapData]]'].has(key);
      });

    // 23.3.3.5 WeakMap.prototype.set ( key , value )
    define(
      WeakMap.prototype, 'set',
      function set(key, value) {
        var M = strict(this);
        if (Type(M) !== 'object') throw TypeError();
        if (M['[[WeakMapData]]'] === undefined) throw TypeError();
        if (Type(key) !== 'object') throw TypeError('Expected object');
        M['[[WeakMapData]]'].set(key, value);
        return M;
      });

    // 23.3.3.6 WeakMap.prototype [ @@toStringTag ]
    define(global.WeakMap.prototype, $$toStringTag, 'WeakMap');

    // 23.3.4 Properties of WeakMap Instances

    // Polyfills for incomplete native implementations:
    (function() {
      var wm = new global.WeakMap();
      var orig = global.WeakMap.prototype.set;
      define(global.WeakMap.prototype, 'set', function set() {
        orig.apply(this, arguments);
        return this;
      }, wm.set({}, 0) !== wm);
    }());
  }());

  // ---------------------------------------
  // 23.4 WeakSet Objects
  // ---------------------------------------

  (function() {
    // 23.4.1 The WeakSet Constructor
    // 23.4.1.1 WeakSet ( [ iterable ] )
    /** @constructor */
    function WeakSet(/*iterable*/) {
      var set = strict(this);
      var iterable = arguments[0];

      if (Type(set) !== 'object') throw TypeError();
      if ('[[WeakSetData]]' in set) throw TypeError();

      if (iterable !== undefined) {
        var adder = set['add'];
        if (!IsCallable(adder)) throw TypeError();
        var iter = GetIterator(ToObject(iterable));
      }
      set_internal(set, '[[WeakSetData]]', new EphemeronTable);
      if (iter === undefined) return set;
      while (true) {
        var next = IteratorStep(iter);
        if (next === false)
          return set;
        var nextValue = IteratorValue(next);
        adder.call(set, nextValue);
      }

      return set;
    }

    if (!('WeakSet' in global) || OVERRIDE_NATIVE_FOR_TESTING)
      global.WeakSet = WeakSet;

    // 23.4.2 Properties of the WeakSet Constructor
    // 23.4.2.1 WeakSet.prototype
    var $WeakSetPrototype$ = {};
    WeakSet.prototype = $WeakSetPrototype$;

    // 23.4.3 Properties of the WeakSet Prototype Object
    // 23.4.3.1 WeakSet.prototype.add (value )
    define(
      WeakSet.prototype, 'add',
      function add(value) {
        var S = strict(this);
        if (Type(S) !== 'object') throw TypeError();
        if (S['[[WeakSetData]]'] === undefined) throw TypeError();
        if (Type(value) !== 'object') throw TypeError('Expected object');
        S['[[WeakSetData]]'].set(value, true);
        return S;
      });

    // 23.4.3.2 WeakSet.prototype.constructor
    // 23.4.3.3 WeakSet.prototype.delete ( value )
    define(
      WeakSet.prototype, 'delete',
      function delete_(value) {
        var S = strict(this);
        if (Type(S) !== 'object') throw TypeError();
        if (S['[[WeakSetData]]'] === undefined) throw TypeError();
        if (Type(value) !== 'object') throw TypeError('Expected object');
        return S['[[WeakSetData]]'].remove(value);
      });

    // 23.4.3.4 WeakSet.prototype.has ( value )
    define(
      WeakSet.prototype, 'has',
      function has(key) {
        var S = strict(this);
        if (Type(S) !== 'object') throw TypeError();
        if (S['[[WeakSetData]]'] === undefined) throw TypeError();
        if (Type(key) !== 'object') throw TypeError('Expected object');
        return S['[[WeakSetData]]'].has(key);
      });

    // 23.4.3.5 WeakSet.prototype [ @@toStringTag ]
    define(global.WeakSet.prototype, $$toStringTag, 'WeakSet');

    // 23.4.4 Properties of WeakSet Instances

    // Polyfills for incomplete native implementations:
    (function() {
      var ws = new global.WeakSet();
      var orig = global.WeakSet.prototype.add;
      define(global.WeakSet.prototype, 'add', function add() {
        orig.apply(this, arguments);
        return this;
      }, ws.add({}) !== ws);
    }());
  }());

  // ---------------------------------------
  // 24 Structured Data
  // ---------------------------------------

  // ---------------------------------------
  // 24.1 ArrayBuffer Objects
  // ---------------------------------------

  // See typedarray.js for TypedArray polyfill

  (function() {
    if (!('ArrayBuffer' in global))
      return;

    // 24.1.1 Abstract Operations For ArrayBuffer Objects
    // 24.1.1.1 AllocateArrayBuffer( constructor, byteLength )
    // 24.1.1.2 IsDetachedBuffer( arrayBuffer )
    // 24.1.1.3 DetachArrayBuffer( arrayBuffer )
    // 24.1.1.4 CloneArrayBuffer( srcBuffer, srcByteOffset [, cloneConstructor] )
    // 24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type, isLittleEndian )
    // 24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isLittleEndian )
    // 24.1.2 The ArrayBuffer Constructor
    // 24.1.2.1 ArrayBuffer( length )
    // 24.1.3 Properties of the ArrayBuffer Constructor

    // 24.1.3.1 ArrayBuffer.isView ( arg )
    define(
      ArrayBuffer, 'isView',
      function isView(arg) {
        if (Type(arg) !== 'object') return false;
        if ('buffer' in arg && arg.buffer instanceof ArrayBuffer) return true;
        return false;
      });

    // 24.1.3.2 ArrayBuffer.prototype
    // 24.1.3.3 get ArrayBuffer [ @@species ]
    // 24.1.4 Properties of the ArrayBuffer Prototype Object
    // 24.1.4.1 get ArrayBuffer.prototype.byteLength
    // 24.1.4.2 ArrayBuffer.prototype.constructor
    // 24.1.4.3 ArrayBuffer.prototype.slice ( start , end)

    // 24.1.4.4 ArrayBuffer.prototype [ @@toStringTag ]
    define(ArrayBuffer.prototype, $$toStringTag, 'ArrayBuffer');

    // 24.1.5 Properties of the ArrayBuffer Instances
  }());

  // ---------------------------------------
  // 24.2 DataView Objects
  // ---------------------------------------

  // See typedarray.js for TypedArray polyfill

  (function() {
    if (!('DataView' in global))
      return;

    // 24.2.1 Abstract Operations For DataView Objects
    // 24.2.1.1 GetViewValue(view, requestIndex, isLittleEndian, type)
    // 24.2.1.2 SetViewValue(view, requestIndex, isLittleEndian, type, value)
    // 24.2.2 The DataView Constructor
    // 24.2.2.1 DataView (buffer [ , byteOffset [ , byteLength ] ] )
    // 24.2.3 Properties of the DataView Constructor
    // 24.2.3.1 DataView.prototype
    // 24.2.4 Properties of the DataView Prototype Object
    // 24.2.4.1 get DataView.prototype.buffer
    // 24.2.4.2 get DataView.prototype.byteLength
    // 24.2.4.3 get DataView.prototype.byteOffset
    // 24.2.4.4 DataView.prototype.constructor
    // 24.2.4.5 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )
    // 24.2.4.6 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )
    // 24.2.4.7 DataView.prototype.getInt8 ( byteOffset )
    // 24.2.4.8 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )
    // 24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )
    // 24.2.4.10 DataView.prototype.getUint8 ( byteOffset )
    // 24.2.4.11 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )
    // 24.2.4.12 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )
    // 24.2.4.13 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )
    // 24.2.4.14 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )
    // 24.2.4.15 DataView.prototype.setInt8 ( byteOffset, value )
    // 24.2.4.16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )
    // 24.2.4.17 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )
    // 24.2.4.18 DataView.prototype.setUint8 ( byteOffset, value )
    // 24.2.4.19 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )
    // 24.2.4.20 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )

    // 24.2.4.21 DataView.prototype[ @@toStringTag ]
    define(DataView.prototype, $$toStringTag, 'DataView');

    // 24.2.5 Properties of DataView Instances
  }());

  // ---------------------------------------
  // 24.3 The JSON Object
  // ---------------------------------------

  // 24.3.1 JSON.parse ( text [ , reviver ] )
  // 24.3.2 JSON.stringify ( value [ , replacer [ , space ] ] )
  // 24.3.3 JSON [ @@toStringTag ]
  define(JSON, $$toStringTag, 'JSON');

  // ---------------------------------------
  // 25.1 Iteration
  // ---------------------------------------

  // 25.1.1 Common Iteration Interfaces
  // 25.1.1.1 The Iterable Interface
  // 25.1.1.2 The Iterator Interface
  // 25.1.1.3 The IteratorResult Interface

  // 25.1.2 The %IteratorPrototype% Object
  // Defined earlier, so other prototypes can reference it.
  // 25.1.2.1 %IteratorPrototype% [ @@iterator ] ( )
  define($IteratorPrototype$, $$iterator, function() {
    return this;
  });


  // ---------------------------------------
  // 25.4 Promise Objects
  // ---------------------------------------

  (function() {
    // 25.4 Promise Objects

    // 25.4.1 Promise Abstract Operations

    // 25.4.1.1 PromiseCapability Records
    // 25.4.1.1.1 IfAbruptRejectPromise ( value, capability )

    function IfAbruptRejectPromise(value, capability) {
      var rejectResult = capability['[[Reject]]'].call(undefined, value);
      return capability['[[Promise]]'];
    }

    // 25.4.1.2 PromiseReaction Records

    // 25.4.1.3 CreateResolvingFunctions ( promise )

    function CreateResolvingFunctions(promise) {
      var alreadyResolved = {'[[value]]': false};
      var resolve = PromiseResolveFunction();
      set_internal(resolve, '[[Promise]]',  promise);
      set_internal(resolve, '[[AlreadyResolved]]', alreadyResolved);
      var reject = PromiseRejectFunction();
      set_internal(reject, '[[Promise]]', promise);
      set_internal(reject, '[[AlreadyResolved]]', alreadyResolved);
      return { '[[Resolve]]': resolve, '[[Reject]]': reject};
    }

    // 25.4.1.3.1 Promise Reject Functions

    function PromiseRejectFunction() {
      var F = function(reason) {
        console.assert(Type(F['[[Promise]]']) === 'object');
        var promise = F['[[Promise]]'];
        var alreadyResolved = F['[[AlreadyResolved]]'];
        if (alreadyResolved['[[value]]']) return undefined;
        set_internal(alreadyResolved, '[[value]]', true);
        return RejectPromise(promise, reason);
      };
      return F;
    }

    // 25.4.1.3.2 Promise Resolve Functions

    function PromiseResolveFunction() {
      var F = function(resolution) {
        console.assert(Type(F['[[Promise]]']) === 'object');
        var promise = F['[[Promise]]'];
        var alreadyResolved = F['[[AlreadyResolved]]'];
        if (alreadyResolved['[[value]]']) return undefined;
        set_internal(alreadyResolved, '[[value]]', true);

        if (SameValue(resolution, promise))  {
          var selfResolutionError = TypeError();
          return RejectPromise(promise, selfResolutionError);
        }
        if (Type(resolution) !== 'object')
          return FulfillPromise(promise, resolution);
        try {
          var then = resolution['then'];
        } catch(then) {
          return RejectPromise(promise, then);
        }
        if (!IsCallable(then))
          return FulfillPromise(promise, resolution);
        EnqueueJob('PromiseJobs', PromiseResolveThenableJob, [promise, resolution, then]);
        return undefined;
      };
      return F;
    }

    // 25.4.1.4 FulfillPromise ( promise, value )

    function FulfillPromise(promise, value) {
      console.assert(promise['[[PromiseState]]'] === 'pending');
      var reactions = promise['[[PromiseFulfillReactions]]'];
      set_internal(promise, '[[PromiseResult]]', value);
      set_internal(promise, '[[PromiseFulfillReactions]]', undefined);
      set_internal(promise, '[[PromiseRejectReactions]]', undefined);
      set_internal(promise, '[[PromiseState]]', 'fulfilled');
      return TriggerPromiseReactions(reactions, value);
    }

    // 25.4.1.5 NewPromiseCapability ( C )

    function NewPromiseCapability(c) {
      // To keep Promise hermetic, this doesn't look much like the spec.
      return CreatePromiseCapabilityRecord(undefined, c);
    }

    // 25.4.1.5.1 CreatePromiseCapabilityRecord ( promise, constructor )

    function CreatePromiseCapabilityRecord(promise, constructor) {
      // To keep Promise hermetic, this doesn't look much like the spec.
      console.assert(IsConstructor(constructor));
      var promiseCapability = {};
      set_internal(promiseCapability, '[[Promise]]', promise);
      set_internal(promiseCapability, '[[Resolve]]', undefined);
      set_internal(promiseCapability, '[[Reject]]', undefined);
      var executor = GetCapabilitiesExecutor();
      set_internal(executor, '[[Capability]]', promiseCapability);

      // NOTE: Differs from spec; object is constructed here
      var constructorResult = promise = new constructor(executor);
      set_internal(promiseCapability, '[[Promise]]', promise);

      if (!IsCallable(promiseCapability['[[Resolve]]'])) throw TypeError();
      if (!IsCallable(promiseCapability['[[Reject]]'])) throw TypeError();
      if (Type(constructorResult) === 'object' && !SameValue(promise, constructorResult)) throw TypeError();
      return promiseCapability;
    }

    // 25.4.1.5.2 GetCapabilitiesExecutor Functions

    function GetCapabilitiesExecutor() {
      var F = function(resolve, reject) {
        console.assert(F['[[Capability]]']);
        var promiseCapability = F['[[Capability]]'];
        if (promiseCapability['[[Resolve]]'] !== undefined) throw TypeError();
        if (promiseCapability['[[Reject]]'] !== undefined) throw TypeError();
        set_internal(promiseCapability, '[[Resolve]]', resolve);
        set_internal(promiseCapability, '[[Reject]]', reject);
        return undefined;
      };
      return F;
    }

    // 25.4.1.6 IsPromise ( x )

    function IsPromise(x) {
      if (Type(x) !== 'object') return false;
      if (!('[[PromiseState]]' in x)) return false;
      if (x['[[PromiseState]]'] === undefined) return false;
      return true;
    }

    // 25.4.1.7 RejectPromise ( promise, reason )

    function RejectPromise(promise, reason) {
      console.assert(promise['[[PromiseState]]'] === 'pending');
      var reactions = promise['[[PromiseRejectReactions]]'];
      set_internal(promise, '[[PromiseResult]]', reason);
      set_internal(promise, '[[PromiseFulfillReactions]]', undefined);
      set_internal(promise, '[[PromiseRejectReactions]]', undefined);
      set_internal(promise, '[[PromiseState]]', 'rejected');
      return TriggerPromiseReactions(reactions, reason);
    }

    // 25.4.1.8 TriggerPromiseReactions ( reactions, argument )

    function TriggerPromiseReactions(reactions, argument) {
      for (var i = 0, len = reactions.length; i < len; ++i)
        EnqueueJob('PromiseJobs', PromiseReactionJob, [reactions[i], argument]);
      return undefined;
    }

    // 25.4.2 Promise Jobs

    // 25.4.2.1 PromiseReactionJob ( reaction, argument )

    function PromiseReactionJob(reaction, argument) {
      var promiseCapability = reaction['[[Capabilities]]'];
      var handler = reaction['[[Handler]]'];
      var handlerResult, status;
      try {
        if (handler === 'Identity') handlerResult = argument;
        else if (handler === 'Thrower') throw argument;
        else handlerResult = handler.call(undefined, argument);
      } catch (handlerResult) {
        status = promiseCapability['[[Reject]]'].call(undefined, handlerResult);
        NextJob(status); return;
      }
      status = promiseCapability['[[Resolve]]'].call(undefined, handlerResult);
      NextJob(status);
    }

    // 25.4.2.2 PromiseResolveThenableJob ( promiseToResolve, thenable, then)

    function PromiseResolveThenableJob(promiseToResolve, thenable, then) {
      // SPEC BUG: promise vs. promiseToResolve
      var resolvingFunctions = CreateResolvingFunctions(promiseToResolve);
      try {
        var thenCallResult = then.call(thenable, resolvingFunctions['[[Resolve]]'],
                                       resolvingFunctions['[[Reject]]']);
      } catch (thenCallResult) {
        var status = resolvingFunctions['[[Reject]]'].call(undefined, thenCallResult);
        NextJob(status); return;
      }
      NextJob(thenCallResult);
    }

    // 25.4.3 The Promise Constructor

    // 25.4.3.1 Promise ( executor )

    function Promise(executor) {
      var config = { configurable: false, enumerable: false, writable: true, value: undefined };
      Object.defineProperty(this, '[[PromiseState]]', config);
      Object.defineProperty(this, '[[PromiseConstructor]]', config);
      Object.defineProperty(this, '[[PromiseResult]]', config);
      Object.defineProperty(this, '[[PromiseFulfillReactions]]', config);
      Object.defineProperty(this, '[[PromiseRejectReactions]]', config);

      var promise = this;
      if (Type(promise) !== 'object') throw new TypeError();
      if (!('[[PromiseState]]' in promise)) throw TypeError();
      if (promise['[[PromiseState]]'] !== undefined) throw TypeError();
      if (!IsCallable(executor)) throw TypeError();

      set_internal(promise, '[[PromiseConstructor]]', Promise);

      return InitializePromise(promise, executor);
    }

    // 25.4.3.1.1 InitializePromise ( promise, executor )

    function InitializePromise(promise, executor) {
      console.assert('[[PromiseState]]' in promise);
      console.assert(IsCallable(executor));
      set_internal(promise, '[[PromiseState]]', 'pending');
      set_internal(promise, '[[PromiseFulfillReactions]]', []);
      set_internal(promise, '[[PromiseRejectReactions]]', []);
      var resolvingFunctions = CreateResolvingFunctions(promise);
      try {
        var completion = executor.call(undefined, resolvingFunctions['[[Resolve]]'],
                                       resolvingFunctions['[[Reject]]']);
      } catch (completion) {
        var status = resolvingFunctions['[[Reject]]'].call(undefined, completion);
      }
      return promise;
    }

    // 25.4.4 Properties of the Promise Constructor
    // 25.4.4.1 Promise.all ( iterable )

    define(Promise, 'all', function all(iterable) {
      var c = strict(this);
      var promiseCapability = NewPromiseCapability(c);
      try {
        var iterator = GetIterator(iterable);
      } catch (value) {
        promiseCapability['[[Reject]]'].call(undefined, value);
        return promiseCapability['[[Promise]]'];
      }
      var values = [];
      var remainingElementsCount = { value: 1 };
      var index = 0;
      while (true) {
        try {
          var next = IteratorStep(iterator);
        } catch (value) {
          promiseCapability['[[Reject]]'].call(undefined, value);
          return promiseCapability['[[Promise]]'];
        }
        if (!next) {
          remainingElementsCount.value -= 1;
          if (remainingElementsCount.value === 0) {
            var resolveResult = promiseCapability['[[Resolve]]'].apply(undefined, values);


          }
          return promiseCapability['[[Promise]]'];
        }
        try {
          var nextValue = IteratorValue(next);
        } catch (value) {
          promiseCapability['[[Reject]]'].call(undefined, value);
          return promiseCapability['[[Promise]]'];
        }
        try {
          var nextPromise = c.resolve(nextValue);
        } catch (value) {
          promiseCapability['[[Reject]]'].call(undefined, value);
          return promiseCapability['[[Promise]]'];
        }
        var resolveElement = PromiseAllResolveElementFunction();
        set_internal(resolveElement, '[[AlreadyCalled]]', { value: false });
        set_internal(resolveElement, '[[Index]]', index);
        set_internal(resolveElement, '[[Values]]', values);
        set_internal(resolveElement, '[[Capabilities]]', promiseCapability);
        set_internal(resolveElement, '[[RemainingElements]]', remainingElementsCount);
        remainingElementsCount.value += 1;
        try {
          var result = nextPromise.then(resolveElement, promiseCapability['[[Reject]]']);
        } catch (value) {
          promiseCapability['[[Reject]]'].call(undefined, value);
          return promiseCapability['[[Promise]]'];
        }
        index += 1;
      }
    });

    // 25.4.4.1.1 Promise.all Resolve Element Functions

    function PromiseAllResolveElementFunction() {
      var F = function(x) {
        var alreadyCalled = F['[[AlreadyCalled]]'];
        if (alreadyCalled.value) return undefined;
        alreadyCalled.value = true;
        var index = F['[[Index]]'];
        var values = F['[[Values]]'];
        var promiseCapability = F['[[Capabilities]]'];
        var remainingElementsCount = F['[[RemainingElements]]'];
        try {
          values[index] = x;
        } catch (result) {
          promiseCapability['[[Reject]]'].call(undefined, result);
          return promiseCapability['[[Promise]]'];
        }
        remainingElementsCount.value -= 1;
        if (remainingElementsCount.value === 0)
          return promiseCapability['[[Resolve]]'].call(undefined, values);
        return undefined;
      };
      return F;
    }

    // 25.4.4.2 Promise.prototype

    Promise.prototype = {};

    // 25.4.4.3 Promise.race ( iterable )

    define(Promise, 'race', function race(iterable) {
      var c = strict(this);
      var promiseCapability = NewPromiseCapability(c);
      try {
        var iterator = GetIterator(iterable);
      } catch (value) {
        promiseCapability['[[Reject]]'].call(undefined, value);
        return promiseCapability['[[Promise]]'];
      }
      while (true) {
        try {
          var next = IteratorStep(iterator);
        } catch (value) {
          promiseCapability['[[Reject]]'].call(undefined, value);
          return promiseCapability['[[Promise]]'];
        }
        if (!next) return promiseCapability['[[Promise]]'];
        try {
          var nextValue = IteratorValue(next);
        } catch (value) {
          promiseCapability['[[Reject]]'].call(undefined, value);
          return promiseCapability['[[Promise]]'];
        }
        try {
          var nextPromise = c.resolve(nextValue);
        } catch (value) {
          promiseCapability['[[Reject]]'].call(undefined, value);
          return promiseCapability['[[Promise]]'];
        }
        try {
          nextPromise.then(promiseCapability['[[Resolve]]'], promiseCapability['[[Reject]]']);
        } catch (value) {
          promiseCapability['[[Reject]]'].call(undefined, value);
          return promiseCapability['[[Promise]]'];
        }
      }
    });

    // 25.4.4.4 Promise.reject ( r )

    define(Promise, 'reject', function reject(r) {
      var c = strict(this);
      var promiseCapability = NewPromiseCapability(c);
      var rejectResult = promiseCapability['[[Reject]]'].call(undefined, r);
      return promiseCapability['[[Promise]]'];
    });

    // 25.4.4.5 Promise.resolve ( x )

    define(Promise, 'resolve', function resolve(x) {
      var c = strict(this);
      if (IsPromise(x)) {
        var constructor = x['[[PromiseConstructor]]'];
        if (SameValue(constructor, c)) return x;
      }
      var promiseCapability = NewPromiseCapability(c);
      var resolveResult = promiseCapability['[[Resolve]]'].call(undefined, x);
      return promiseCapability['[[Promise]]'];
    });

    // 25.4.4.6 Promise [ @@create ] ( )
    // 25.4.4.6.1 AllocatePromise ( constructor )
    // 25.4.5 Properties of the Promise Prototype Object
    // 25.4.5.1 Promise.prototype.catch ( onRejected )

    define(Promise.prototype, 'catch', function catch_(onRejected) {
      var promise = this;
      return promise.then(undefined, onRejected);
    });

    // 25.4.5.2 Promise.prototype.constructor

    Promise.prototype.constructor = Promise;

    // 25.4.5.3 Promise.prototype.then ( onFulfilled , onRejected )

    define(Promise.prototype, 'then', function then(onFulfilled, onRejected) {
      var promise = this;
      if (!IsPromise(promise)) throw TypeError();
      if (!IsCallable(onFulfilled)) onFulfilled = 'Identity';
      if (!IsCallable(onRejected)) onRejected = 'Thrower';
      var c = promise.constructor;
      var promiseCapability = NewPromiseCapability(c);
      var fulfillReaction = { '[[Capabilities]]': promiseCapability,
                              '[[Handler]]': onFulfilled };
      var rejectReaction = { '[[Capabilities]]': promiseCapability,
                             '[[Handler]]': onRejected };
      if (promise['[[PromiseState]]'] === 'pending') {
        promise['[[PromiseFulfillReactions]]'].push(fulfillReaction);
        promise['[[PromiseRejectReactions]]'].push(rejectReaction);
      } else if (promise['[[PromiseState]]'] === 'fulfilled') {
        var value = promise['[[PromiseResult]]'];
        EnqueueJob('PromiseJobs', PromiseReactionJob, [fulfillReaction, value]);
      } else if (promise['[[PromiseState]]'] === 'rejected') {
        var reason = promise['[[PromiseResult]]'];
        EnqueueJob('PromiseJobs', PromiseReactionJob, [rejectReaction, reason]);
      }
      return promiseCapability['[[Promise]]'];
    });

    // 25.4.6 Properties of Promise Instances

    if (!('Promise' in global) || OVERRIDE_NATIVE_FOR_TESTING)
      global.Promise = Promise;

    // Patch early Promise.cast vs. Promise.resolve implementations
    if ('cast' in global.Promise) global.Promise.resolve = global.Promise.cast;
  }());

  // 25.4.5.1 Promise.prototype [ @@toStringTag ]
  define(Promise.prototype, $$toStringTag, 'Promise');

  // ---------------------------------------
  // 26 Reflection
  // ---------------------------------------

  (function() {
    // 26.1 The Reflect Object
    if (!('Reflect' in global) || OVERRIDE_NATIVE_FOR_TESTING)
      global.Reflect = {};

    // 26.1.1 Reflect.apply ( target, thisArgument, argumentsList )
    define(
      Reflect, 'apply',
      function apply(target, thisArgument, argumentsList) {
        if (!IsCallable(target)) throw TypeError();
        return Function.prototype.apply.call(target, thisArgument, argumentsList);
      });

    // 26.1.2 Reflect.construct ( target, argumentsList [, newTarget] )
    define(
      Reflect, 'construct',
      function construct(target, argumentsList) {
        return __cons(target, argumentsList);
      });

    // 26.1.3 Reflect.defineProperty ( target, propertyKey, attributes )
    define(
      Reflect, 'defineProperty',
      function defineProperty(target, propertyKey, attributes) {
        try {
          Object.defineProperty(target, propertyKey, attributes);
          return true;
        } catch (_) {
          return false;
        }
      });

    // 26.1.4 Reflect.deleteProperty ( target, propertyKey )
    define(
      Reflect, 'deleteProperty',
      function deleteProperty(target,name) {
        try {
          delete target[name];
          return !HasOwnProperty(target, name);
        } catch (_) {
          return false;
        }
      });

    // 26.1.5 Reflect.enumerate ( target )
    define(
      Reflect, 'enumerate',
      function enumerate(target) {
        target = ToObject(target);
        var iterator = Enumerate(target);
        return iterator;
      });

    // 26.1.6 Reflect.get ( target, propertyKey [ , receiver ])
    define(
      Reflect, 'get',
      function get(target, name, receiver) {
        target = ToObject(target);
        name = String(name);
        receiver = (receiver === undefined) ? target : ToObject(receiver);
        var desc = getPropertyDescriptor(target, name);
        if (desc && 'get' in desc)
          return Function.prototype.call.call(desc['get'], receiver);
        return target[name];
      });

    // 26.1.7 Reflect.getOwnPropertyDescriptor ( target, propertyKey )
    define(
      Reflect, 'getOwnPropertyDescriptor',
      Object.getOwnPropertyDescriptor);

    // 26.1.8 Reflect.getPrototypeOf ( target )
    define(
      Reflect, 'getPrototypeOf',
      Object.getPrototypeOf);

    // 26.1.9 Reflect.has ( target, propertyKey )
    define(
      Reflect, 'has',
      function has(target,name) {
        return String(name) in ToObject(target);
      });

    // 26.1.10 Reflect.isExtensible (target)
    define(
      Reflect, 'isExtensible',
      Object.isExtensible);

    // 26.1.11 Reflect.ownKeys ( target )
    define(
      Reflect, 'ownKeys',
      function ownKeys(target) {
        var obj = ToObject(target);
        return Object.getOwnPropertyNames(obj);
      });

    // 26.1.12 Reflect.preventExtensions ( target )
    define(
      Reflect, 'preventExtensions',
      function preventExtensions(target) {
        try { Object.preventExtensions(target); return true; } catch (_) { return false; }
      });

    // 26.1.13 Reflect.set ( target, propertyKey, V [ , receiver ] )
    define(
      Reflect, 'set',
      function set(target, name, value, receiver) {
        target = ToObject(target);
        name = String(name);
        receiver = (receiver === undefined) ? target : ToObject(receiver);
        var desc = getPropertyDescriptor(target, name);
        try {
          if (desc && 'set' in desc)
            Function.prototype.call.call(desc['set'], receiver, value);
          else
            target[name] = value;
          return true;
        } catch (_) {
          return false;
        }
      });

    // 26.1.14 Reflect.setPrototypeOf ( target, proto )
    define(
      Reflect, 'setPrototypeOf',
      function setPrototypeOf(target, proto) {
        try {
          target.__proto__ = proto;
          return Reflect.getPrototypeOf(target) === proto;
        } catch(_) {
          return false;
        }
      });

  }());

  // ---------------------------------------
  // 26.2 Proxy Objects
  // ---------------------------------------

  // Not polyfillable.

}(self));

// This helper is defined outside the main scope so that the use of
// 'eval' does not taint the scope for minifiers.
function __cons(t, a) {
  return eval('new t(' + a.map(function(_, i) { return 'a[' + i + ']'; }).join(',') + ')');
}

},{}],36:[function(require,module,exports){
"use strict";

require("../lib/rh");
require("../../lenient_src/utils/utils");
require("../../lenient_src/common/query");
require("../../lenient_src/utils/url_utils");

},{"../../lenient_src/common/query":13,"../../lenient_src/utils/url_utils":29,"../../lenient_src/utils/utils":30,"../lib/rh":44}],37:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var rh = require('../../lib/rh');

var OnLoad = function OnLoad(widget, node, rawExpr) {
  _classCallCheck(this, OnLoad);

  var _widget$resolveRawExp = widget.resolveRawExprWithValue(rawExpr),
      callback = _widget$resolveRawExp.callback;

  node.onload = function () {
    return callback.call(widget);
  };
};

rh.registerDataAttr('onload', OnLoad);

},{"../../lib/rh":44}],38:[function(require,module,exports){
"use strict";

require("../lib/rh");
require("../../lenient_src/utils/parse_utils");
require("../../lenient_src/utils/debug_utils");
require("../../lenient_src/utils/event_utils");
require("../../lenient_src/utils/model_utils");
require("../../lenient_src/utils/unicode_utils");
require("../../lenient_src/common/debug");
require("../../lenient_src/common/consts");
require("../../lenient_src/common/model");
require("../../lenient_src/common/data_util");
require("../../lenient_src/common/guard");
require("../../lenient_src/common/plugin");
require("../../lenient_src/common/widget");
require("../../lenient_src/common/init");
require("../../lenient_src/common/message");
require("../../lenient_src/common/iframe");
require("../../lenient_src/common/storage");
require("../../lenient_src/common/responsive");
require("../../lenient_src/common/screen");
require("../../lenient_src/common/node_holder");
require("../../lenient_src/common/controller");
require("../../lenient_src/common/http");
require("../../lenient_src/data_attributes/data_attr");
require("../../lenient_src/data_attributes/resize");
require("../../lenient_src/data_attributes/table");
require("../../lenient_src/data_attributes/table_recursive");
require("../../lenient_src/widgets/global");
require("../../lenient_src/widgets/list");
require("../../lenient_src/widgets/data_widgets");
require("./data_attributes/onload");
require("./utils/operator_search");
require("./utils/collections");
require("../../lenient_src/indigo/handlers");
require("../../lenient_src/common/rhs");

},{"../../lenient_src/common/consts":1,"../../lenient_src/common/controller":2,"../../lenient_src/common/data_util":3,"../../lenient_src/common/debug":4,"../../lenient_src/common/guard":5,"../../lenient_src/common/http":6,"../../lenient_src/common/iframe":7,"../../lenient_src/common/init":8,"../../lenient_src/common/message":9,"../../lenient_src/common/model":10,"../../lenient_src/common/node_holder":11,"../../lenient_src/common/plugin":12,"../../lenient_src/common/responsive":14,"../../lenient_src/common/rhs":15,"../../lenient_src/common/screen":16,"../../lenient_src/common/storage":17,"../../lenient_src/common/widget":18,"../../lenient_src/data_attributes/data_attr":19,"../../lenient_src/data_attributes/resize":20,"../../lenient_src/data_attributes/table":21,"../../lenient_src/data_attributes/table_recursive":22,"../../lenient_src/indigo/handlers":23,"../../lenient_src/utils/debug_utils":24,"../../lenient_src/utils/event_utils":25,"../../lenient_src/utils/model_utils":26,"../../lenient_src/utils/parse_utils":27,"../../lenient_src/utils/unicode_utils":28,"../../lenient_src/widgets/data_widgets":31,"../../lenient_src/widgets/global":32,"../../lenient_src/widgets/list":33,"../lib/rh":44,"./data_attributes/onload":37,"./utils/collections":42,"./utils/operator_search":43}],39:[function(require,module,exports){
"use strict";

require("./shim/array");
require("./shim/object");

},{"./shim/array":40,"./shim/object":41}],40:[function(require,module,exports){
'use strict';

// https://tc39.github.io/ecma262/#sec-array.prototype.includes
if (!Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    value: function value(searchElement, fromIndex) {
      return this.indexOf(searchElement, fromIndex) !== -1;
    }
  });
}

},{}],41:[function(require,module,exports){
"use strict";

//https://tc39.es/proposal-object-values-entries/
//https://github.com/tc39/proposal-object-values-entries
if (!Object.entries) {
  Object.entries = function (obj) {
    var ownProps = Object.keys(obj),
        i = ownProps.length,
        resArray = new Array(i); // preallocate the Array
    while (i--) {
      resArray[i] = [ownProps[i], obj[ownProps[i]]];
    }

    return resArray;
  };
}

},{}],42:[function(require,module,exports){
'use strict';

var rh = require('../../lib/rh');
var _ = rh._;

_.max = function (arr) {
  var max = arr && arr[0];
  _.each(arr, function (item) {
    if (item > max) {
      max = item;
    }
  });
  return max;
};

_.min = function (arr) {
  var min = arr && arr[0];
  _.each(arr, function (item) {
    if (item < min) {
      min = item;
    }
  });
  return min;
};

},{"../../lib/rh":44}],43:[function(require,module,exports){
"use strict";

var rh = require('../../lib/rh');
var _ = rh._;
_.isAND = function (a_strOp, enableOperatorSearch) {
  return enableOperatorSearch && (a_strOp === "and" || a_strOp === "&" || a_strOp === "AND") || a_strOp === "\xACand\xAC";
};

_.isOR = function (a_strOp, enableOperatorSearch) {
  return enableOperatorSearch && (a_strOp === "or" || a_strOp === "|" || a_strOp === "OR");
};

_.isNOT = function (a_strOp, enableOperatorSearch) {
  return enableOperatorSearch && (a_strOp === "not" || a_strOp === "~" || a_strOp === "NOT");
};

_.isOperator = function (strOp, enableOperatorSearch) {
  if (strOp === "\xACand\xAC" || enableOperatorSearch && (strOp === "and" || strOp === "or" || strOp === "not")) {
    return true;
  }
  return false;
};

},{"../../lib/rh":44}],44:[function(require,module,exports){
(function (global){
'use strict';

require('../frameworks/shim');
require('js-polyfills/es5');
require('js-polyfills/es6');

if (global.rh === undefined) {
  global.rh = {};
}

module.exports = global.rh;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../frameworks/shim":39,"js-polyfills/es5":34,"js-polyfills/es6":35}]},{},[36,38])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsZW5pZW50X3NyYy9jb21tb24vY29uc3RzLmpzIiwibGVuaWVudF9zcmMvY29tbW9uL2NvbnRyb2xsZXIuanMiLCJsZW5pZW50X3NyYy9jb21tb24vZGF0YV91dGlsLmpzIiwibGVuaWVudF9zcmMvY29tbW9uL2RlYnVnLmpzIiwibGVuaWVudF9zcmMvY29tbW9uL2d1YXJkLmpzIiwibGVuaWVudF9zcmMvY29tbW9uL2h0dHAuanMiLCJsZW5pZW50X3NyYy9jb21tb24vaWZyYW1lLmpzIiwibGVuaWVudF9zcmMvY29tbW9uL2luaXQuanMiLCJsZW5pZW50X3NyYy9jb21tb24vbWVzc2FnZS5qcyIsImxlbmllbnRfc3JjL2NvbW1vbi9tb2RlbC5qcyIsImxlbmllbnRfc3JjL2NvbW1vbi9ub2RlX2hvbGRlci5qcyIsImxlbmllbnRfc3JjL2NvbW1vbi9wbHVnaW4uanMiLCJsZW5pZW50X3NyYy9jb21tb24vcXVlcnkuanMiLCJsZW5pZW50X3NyYy9jb21tb24vcmVzcG9uc2l2ZS5qcyIsImxlbmllbnRfc3JjL2NvbW1vbi9yaHMuanMiLCJsZW5pZW50X3NyYy9jb21tb24vc2NyZWVuLmpzIiwibGVuaWVudF9zcmMvY29tbW9uL3N0b3JhZ2UuanMiLCJsZW5pZW50X3NyYy9jb21tb24vd2lkZ2V0LmpzIiwibGVuaWVudF9zcmMvZGF0YV9hdHRyaWJ1dGVzL2RhdGFfYXR0ci5qcyIsImxlbmllbnRfc3JjL2RhdGFfYXR0cmlidXRlcy9yZXNpemUuanMiLCJsZW5pZW50X3NyYy9kYXRhX2F0dHJpYnV0ZXMvdGFibGUuanMiLCJsZW5pZW50X3NyYy9kYXRhX2F0dHJpYnV0ZXMvdGFibGVfcmVjdXJzaXZlLmpzIiwibGVuaWVudF9zcmMvaW5kaWdvL2hhbmRsZXJzLmpzIiwibGVuaWVudF9zcmMvdXRpbHMvZGVidWdfdXRpbHMuanMiLCJsZW5pZW50X3NyYy91dGlscy9ldmVudF91dGlscy5qcyIsImxlbmllbnRfc3JjL3V0aWxzL21vZGVsX3V0aWxzLmpzIiwibGVuaWVudF9zcmMvdXRpbHMvcGFyc2VfdXRpbHMuanMiLCJsZW5pZW50X3NyYy91dGlscy91bmljb2RlX3V0aWxzLmpzIiwibGVuaWVudF9zcmMvdXRpbHMvdXJsX3V0aWxzLmpzIiwibGVuaWVudF9zcmMvdXRpbHMvdXRpbHMuanMiLCJsZW5pZW50X3NyYy93aWRnZXRzL2RhdGFfd2lkZ2V0cy5qcyIsImxlbmllbnRfc3JjL3dpZGdldHMvZ2xvYmFsLmpzIiwibGVuaWVudF9zcmMvd2lkZ2V0cy9saXN0LmpzIiwibm9kZV9tb2R1bGVzL2pzLXBvbHlmaWxscy9lczUuanMiLCJub2RlX21vZHVsZXMvanMtcG9seWZpbGxzL2VzNi5qcyIsInNyYy9mcmFtZXdvcmtzL2FhZGhhci5qcyIsInNyYy9mcmFtZXdvcmtzL2RhdGFfYXR0cmlidXRlcy9vbmxvYWQuanMiLCJzcmMvZnJhbWV3b3Jrcy9yaC5qcyIsInNyYy9mcmFtZXdvcmtzL3NoaW0uanMiLCJzcmMvZnJhbWV3b3Jrcy9zaGltL2FycmF5LmpzIiwic3JjL2ZyYW1ld29ya3Mvc2hpbS9vYmplY3QuanMiLCJzcmMvZnJhbWV3b3Jrcy91dGlscy9jb2xsZWN0aW9ucy5qcyIsInNyYy9mcmFtZXdvcmtzL3V0aWxzL29wZXJhdG9yX3NlYXJjaC5qcyIsInNyYy9saWIvcmguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksZUFBSjtjQUNhLE07SUFBUCxFLFdBQUEsRTs7QUFDTixJQUFJLFFBQVEsRUFBWjs7QUFFQSxHQUFHLE1BQUgsR0FBYSxTQUFTLGdCQUFTLEdBQVQsRUFBYyxLQUFkLEVBQXFCO0FBQ3pDLE1BQUksVUFBVSxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCLFFBQUksR0FBRyxNQUFQLEVBQWU7QUFDYixVQUFJLEVBQUUsT0FBTyxLQUFULENBQUosRUFBcUI7QUFBRSxXQUFHLEVBQUgsQ0FBTSxPQUFOLEVBQWUsUUFBZixFQUE0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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdmVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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LEtBRDNDLENBRFAsRUFFMkQ7QUFDekQsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxTQUFPLEtBQVA7QUFDRCxDQVBEOzs7Ozs7QUNsQkEsUUFBUSxvQkFBUjtBQUNBLFFBQVEsa0JBQVI7QUFDQSxRQUFRLGtCQUFSOztBQUVBLElBQUksT0FBTyxFQUFQLEtBQWMsU0FBbEIsRUFBNkI7QUFDM0IsU0FBTyxFQUFQLEdBQVksRUFBWjtBQUNEOztBQUVELE9BQU8sT0FBUCxHQUFpQixPQUFPLEVBQXhCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwibGV0IGNvbnN0cztcclxubGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IGNhY2hlID0ge307XHJcblxyXG5yaC5jb25zdHMgPSAoY29uc3RzID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICBpZiAocmguX2RlYnVnKSB7XHJcbiAgICAgIGlmICghKGtleSBpbiBjYWNoZSkpIHsgcmguX2QoJ2Vycm9yJywgJ2NvbnN0cycsIGAke2tleX0gaXMgbm90IGF2YWlsYWJsZWApOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2FjaGVba2V5XTtcclxuICB9IGVsc2UgaWYgKGtleSBpbiBjYWNoZSkge1xyXG4gICAgaWYgKHJoLl9kZWJ1ZykgeyByZXR1cm4gcmguX2QoJ2Vycm9yJywgJ2NvbnN0cycsIGAke2tleX0gaXMgYWxyZWFkeSByZWdpc3RlcmVkYCk7IH1cclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGNhY2hlW2tleV0gPSB2YWx1ZTtcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gVGVtcCBrZXlzXHJcbmNvbnN0cygnS0VZX1RFTVBfREFUQScsICAgICAgICAgICAgICAgICAgJy50ZW1wLmRhdGEnKTtcclxuY29uc3RzKCdLRVlfU0hPV19UT0NfQkFDS19CVVRUT04nLCAnLnAuc2hvd190b2NfYmFja19idXR0b24nKTtcclxuLy8gaWZyYW1lIGtleXNcclxuY29uc3RzKCdLRVlfU0hBUkVEX0lOUFVUJywgICAgICAgICAgICAgICcuX3NoYXJlZGtleXMuaW5wdXQnKTtcclxuY29uc3RzKCdLRVlfU0hBUkVEX09VVFBVVCcsICAgICAgICAgICAgICcuX3NoYXJlZGtleXMub3V0cHV0Jyk7XHJcbmNvbnN0cygnS0VZX0lGUkFNRV9FVkVOVFMnLCAgICAgICAgICAgICAnLmwuaWZyYW1lX2V2ZW50cycpO1xyXG5cclxuLy8gU2NyZWVuIHNwZWNpZmljXHJcbmNvbnN0cygnS0VZX1NDUkVFTicsICAgICAgICAgICAgICAgICAgICAnLmwuc2NyZWVuJyk7XHJcbmNvbnN0cygnS0VZX0RFRkFVTFRfU0NSRUVOJywgICAgICAgICAgICAnLmwuZGVmYXVsdF9zY3JlZW4nKTtcclxuY29uc3RzKCdLRVlfU0NSRUVOX05BTUVTJywgICAgICAgICAgICAgICcubC5zY3JlZW5fbmFtZXMnKTtcclxuY29uc3RzKCdLRVlfU0NSRUVOX0RFU0tUT1AnLFxyXG4gICAgICAgYCR7Y29uc3RzKCdLRVlfU0NSRUVOJyl9LmRlc2t0b3AuYXR0YWNoZWRgKTtcclxuY29uc3RzKCdLRVlfU0NSRUVOX1RBQkxFVCcsXHJcbiAgYCR7Y29uc3RzKCdLRVlfU0NSRUVOJyl9LnRhYmxldC5hdHRhY2hlZGApO1xyXG5jb25zdHMoJ0tFWV9TQ1JFRU5fVEFCTEVUX1BPUlRSQUlUJyxcclxuICBgJHtjb25zdHMoJ0tFWV9TQ1JFRU4nKX0udGFibGV0X3BvcnRyYWl0LmF0dGFjaGVkYCk7XHJcbmNvbnN0cygnS0VZX1NDUkVFTl9QSE9ORScsXHJcbiAgYCR7Y29uc3RzKCdLRVlfU0NSRUVOJyl9LnBob25lLmF0dGFjaGVkYCk7XHJcbmNvbnN0cygnS0VZX1NDUkVFTl9JT1MnLFxyXG4gIGAke2NvbnN0cygnS0VZX1NDUkVFTicpfS5pb3MuYXR0YWNoZWRgKTtcclxuY29uc3RzKCdLRVlfU0NSRUVOX0lQQUQnLFxyXG4gIGAke2NvbnN0cygnS0VZX1NDUkVFTicpfS5pcGFkLmF0dGFjaGVkYCk7XHJcbmNvbnN0cygnS0VZX1NDUkVFTl9QUklOVCcsXHJcbiAgYCR7Y29uc3RzKCdLRVlfU0NSRUVOJyl9LnByaW50LmF0dGFjaGVkYCk7XHJcbi8vIEV2ZW50c1xyXG5jb25zdHMoJ0tFWV9JU19SRVNQT05TSVZFJywgICAgICAgICAnLmUuaXNyZXNwb25zaXZlJyk7XHJcbmNvbnN0cygnRVZUX09SSUVOVEFUSU9OX0NIQU5HRScsICAgICAgICAgJy5lLm9yaWVudGF0aW9uY2hhbmdlJyk7XHJcbmNvbnN0cygnRVZUX0hBU0hfQ0hBTkdFJywgICAgICAgICAgICAgICAgJy5lLmhhc2hjaGFuZ2UnKTtcclxuY29uc3RzKCdFVlRfV0lER0VUX0JFRk9SRUxPQUQnLCAgICAgICAgICAnLmUud2lkZ2V0X2JlZm9yZWxvYWQnKTtcclxuY29uc3RzKCdFVlRfV0lER0VUX0xPQURFRCcsICAgICAgICAgICAgICAnLmUud2lkZ2V0X2xvYWRlZCcpO1xyXG5jb25zdHMoJ0VWVF9CRUZPUkVfVU5MT0FEJywgICAgICAgICAgICAgICcuZS5iZWZvcmVfdW5sb2FkJyk7XHJcbmNvbnN0cygnRVZUX1VOTE9BRCcsICAgICAgICAgICAgICAgICAgICAgJy5lLnVubG9hZCcpO1xyXG5jb25zdHMoJ0VWVF9NT1VTRU1PVkUnLCAgICAgICAgICAgICAgICAgICcuZS5tb3VzZW1vdmUnKTtcclxuY29uc3RzKCdFVlRfU1dJUEVfRElSJywgICAgICAgICAgICAgICAgICAnLmUuc3dpcGVfZGlyJyk7XHJcbmNvbnN0cygnRVZUX0ZBU1RfQ0xJQ0snLCAgICAgICAgICAgICAgICAgJy5lLmZhc3RfY2xpY2snKTtcclxuY29uc3RzKCdFVlRfQ0xJQ0tfSU5TSURFX0lGUkFNRScsICAgICAgICAnLmUuY2xpY2tfaW5zaWRlX2lmcmFtZScpO1xyXG5jb25zdHMoJ0VWVF9TQ1JPTExfSU5TSURFX0lGUkFNRScsICAgICAgICcuZS5zY3JvbGxfaW5zaWRlX2lmcmFtZScpO1xyXG5jb25zdHMoJ0VWVF9JTlNJREVfSUZSQU1FX0RPTV9DT05URU5UTE9BREVEJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZS5pbnNpZGVfaWZyYW1lX2RvbV9jb250ZW50bG9hZGVkJyk7XHJcbmNvbnN0cygnRVZUX1JFU0laRScsICAgICAgICAgICAgICAgICAgICAgJy5lLnJlc2l6ZScpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbmNvbnN0cygnUkhNQVBOTycsICAgICAgICAgICAgICAgICAgICAgICAgICdyaG1hcG5vJyk7XHJcbmNvbnN0cygnUkhXSU5ET1cnLCAgICAgICAgICAgICAgICAgICAgICAgICdyaHduZCcpO1xyXG5jb25zdHMoJ1JIQ1NITU9ERScsICAgICAgICAgICAgICAgICAgICAgICAncmhjc2gnKTtcclxuY29uc3RzKCdUT1BJQ19GSUxFJywgICAgICAgICAgICAgICAgICAgICAgJ3RvcGljLmh0bScpO1xyXG5jb25zdHMoJ0hPTUVfUEFHRScsICAgICAgICAgICAgICAgICAgICAgICAnaW5kZXguaHRtJyk7XHJcbiIsImxldCB7IHJoIH0gPSB3aW5kb3c7XHJcbmxldCB7IF8gfSA9IHJoO1xyXG5cclxucmguY29udHJvbGxlciA9IF8uY2FjaGUoXy5pc0Z1bmN0aW9uKTtcclxuIiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IHsgXyB9ID0gcmg7XHJcbmxldCB7ICQgfSA9IHJoO1xyXG5sZXQgeyBtb2RlbCB9ID0gcmg7XHJcblxyXG5sZXQgbG9hZFdpZGdldHMgPSAocGFyZW50Tm9kZSwgcGFyZW50KSA9PlxyXG4gIF8uZWFjaCgkLmZpbmQocGFyZW50Tm9kZSwgJ1tkYXRhLXJod2lkZ2V0XScpLCBmdW5jdGlvbihub2RlKSB7XHJcbiAgICBpZiAoJC5kYXRhc2V0KG5vZGUsICdsb2FkZWQnKSkgeyByZXR1cm47IH0gLy9pdCBjYW4gYmUgZW1wdHkgc3RyaW5nIG9uIG9sZCBicm93c2VyXHJcbiAgICBpZiAoISQuaXNEZXNjZW5kZW50KHBhcmVudE5vZGUsIG5vZGUpKSB7IHJldHVybjsgfSAvL2lnbm9yZSBuZXN0ZWQgd2lkZ2V0IGRhdGFcclxuICAgIGxldCBjb25maWcgPSAkLmRhdGFzZXQobm9kZSwgJ2NvbmZpZycpO1xyXG4gICAgY29uZmlnID0gY29uZmlnID8gXy5yZXNvbHZlTmljZUpTT04oY29uZmlnKSA6IHt9O1xyXG4gICAgcmV0dXJuIF8uZWFjaChfLnJlc29sdmVXaWRnZXRBcmdzKCQuZGF0YXNldChub2RlLCAncmh3aWRnZXQnKSksIGZ1bmN0aW9uKHdJbmZvKSB7XHJcbiAgICAgIGxldCB7d05hbWUsIHdBcmcsIHBpcGVkQXJncywgcmF3QXJnfSA9IHdJbmZvO1xyXG4gICAgICBpZiAod05hbWVbMF0gPT09IHdOYW1lWzBdLnRvTG93ZXJDYXNlKCkpIHsgLy9kYXRhIHdpZGdldFxyXG4gICAgICAgIGNvbmZpZy5yYXdBcmcgPSByYXdBcmc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHBpcGVkQXJncy5sZW5ndGggPiAwKSB7IGNvbmZpZy5waXBlZEFyZ3MgPSBwaXBlZEFyZ3M7IH1cclxuICAgICAgICBpZiAod0FyZykgeyBfLmV4dGVuZChjb25maWcsIHdBcmcpOyB9XHJcbiAgICAgIH1cclxuICAgICAgY29uZmlnLm5vZGUgPSBub2RlO1xyXG4gICAgICBsZXQgd2NsYXNzID0gcmgud2lkZ2V0c1t3TmFtZV07XHJcbiAgICAgIGxldCB3aWRnZXQgPSBuZXcgd2NsYXNzKGNvbmZpZyk7XHJcbiAgICAgIHJldHVybiB3aWRnZXQuaW5pdChwYXJlbnQpO1xyXG4gICAgfSk7XHJcbiAgfSlcclxuO1xyXG4gIFxyXG4vL2RhdGEtcmh0YWdzIGlzIHN5bnRoYXRpYyBzdWdlcihzaG9ydGN1dCkgZm9yIGRhdGEtcmh3aWRnZXRzPSdDb250ZW50RmlsdGVyJyBhbmRcclxuLy8gZGF0YS1jb25maWc9J3tcImlkXCI6IFwiMVwifSdcclxubGV0IGxvYWRDb250ZW50RmlsdGVyID0gcGFyZW50Tm9kZSA9PlxyXG4gICgoKSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICBmb3IgKGxldCBub2RlIG9mIEFycmF5LmZyb20oJC5maW5kKHBhcmVudE5vZGUsICdbZGF0YS1yaHRhZ3NdJykpKSB7XHJcbiAgICAgIHZhciB3aWRnZXQ7XHJcbiAgICAgIGlmICghJC5pc0Rlc2NlbmRlbnQocGFyZW50Tm9kZSwgbm9kZSkpIHsgY29udGludWU7IH0gLy9pZ25vcmUgbmVzdGVkIHdpZGdldCBkYXRhXHJcbiAgICAgIGxldCBjb25maWcgPSAkLmRhdGFzZXQobm9kZSwgJ2NvbmZpZycpO1xyXG4gICAgICBjb25maWcgPSBjb25maWcgPyBfLnJlc29sdmVOaWNlSlNPTihjb25maWcpIDoge307XHJcbiAgICAgIGNvbmZpZy5pZHMgPSAkLmRhdGFzZXQobm9kZSwgJ3JodGFncycpLnNwbGl0KCcsJyk7XHJcbiAgICAgIGNvbmZpZy5ub2RlID0gbm9kZTtcclxuICAgICAgcmVzdWx0LnB1c2god2lkZ2V0ID0gbmV3IHJoLndpZGdldHMuQ29udGVudEZpbHRlcihjb25maWcpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSkoKVxyXG47XHJcblxyXG5sZXQgbG9hZERhdGFIYW5kbGVycyA9IGZ1bmN0aW9uKHBhcmVudE5vZGUsIHBhcmVudCkge1xyXG4gIGxvYWRXaWRnZXRzKHBhcmVudE5vZGUsIHBhcmVudCk7XHJcbiAgcmV0dXJuIGxvYWRDb250ZW50RmlsdGVyKHBhcmVudE5vZGUpO1xyXG59O1xyXG5cclxuXy5sb2FkV2lkZ2V0cyA9IGxvYWRXaWRnZXRzO1xyXG5fLmxvYWRDb250ZW50RmlsdGVyID0gbG9hZENvbnRlbnRGaWx0ZXI7XHJcbl8ubG9hZERhdGFIYW5kbGVycyA9IGxvYWREYXRhSGFuZGxlcnM7XHJcbiIsImxldCB7IHJoIH0gPSB3aW5kb3c7XHJcbmxldCB7IF8gfSA9IHJoO1xyXG5cclxucmguX3BhcmFtcyA9IF8udXJsUGFyYW1zKCk7XHJcbnJoLl9kZWJ1Z0ZpbHRlciA9IF8udG9SZWdFeHAocmguX3BhcmFtcy5yaF9kZWJ1Zyk7XHJcbnJoLl9kZWJ1ZyA9IGZhbHNlO1xyXG5cclxucmguX3Rlc3RGaWx0ZXIgPSBfLnRvUmVnRXhwKHJoLl9wYXJhbXMucmhfdGVzdCk7XHJcbnJoLl90ZXN0ID0gZmFsc2U7XHJcblxyXG5yaC5fZXJyb3JGaWx0ZXIgPSBfLnRvUmVnRXhwKHJoLl9wYXJhbXMucmhfZXJyb3IpO1xyXG5yaC5fZXJyb3IgPSBmYWxzZTtcclxuXHJcbnJoLl9icmVha0ZpbHRlciA9IF8udG9SZWdFeHAocmguX3BhcmFtcy5yaF9icmVhayk7XHJcbnJoLl9icmVhayA9IGZhbHNlO1xyXG5cclxubGV0IG1hdGNoRmlsdGVyID0gKG1lc3NhZ2VzLCBmaWx0ZXIpID0+IG1lc3NhZ2VzLmpvaW4oJyAnKS5tYXRjaChmaWx0ZXIpO1xyXG5cclxucmguX2QgPSBmdW5jdGlvbigpIHtcclxuICBsZXQgeyBjb25zb2xlIH0gPSB3aW5kb3c7XHJcbiAgaWYgKHJoLl9kZWJ1ZyAmJiBjb25zb2xlICYmIF8uaXNGdW5jdGlvbihjb25zb2xlLmxvZykpIHtcclxuICAgIGxldCBmbjtcclxuICAgIGxldCBhcmdzID0gW107IGxldCBpID0gLTE7XHJcbiAgICB3aGlsZSAoKytpIDwgYXJndW1lbnRzLmxlbmd0aCkgeyBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTsgfVxyXG4gICAgaWYgKFsnaW5mbycsICdsb2cnLCAnd2FybicsICdkZWJ1ZycsICdlcnJvciddLmluZGV4T2YoYXJnc1swXSkgPiAtMSkge1xyXG4gICAgICBmbiA9IGNvbnNvbGVbYXJnc1swXV07XHJcbiAgICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm4gPSBjb25zb2xlLmRlYnVnO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBuZXdBcmdzID0gW2BbICR7YXJnc1swXX0gXTpgXS5jb25jYXQoYXJncy5zbGljZSgxKSk7XHJcbiAgICBpZiAoKHJoLl9kZWJ1Z0ZpbHRlciA9PT0gJycpIHx8IG1hdGNoRmlsdGVyKG5ld0FyZ3MsIHJoLl9kZWJ1Z0ZpbHRlcikpIHtcclxuICAgICAgaWYgKHJoLl9lcnJvciAmJiBtYXRjaEZpbHRlcihuZXdBcmdzLCByaC5fZXJyb3JGaWx0ZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgbmV3QXJncyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGNvbnNvbGUsIG5ld0FyZ3MpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG4iLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5cclxuY2xhc3MgR3VhcmQge1xyXG4gIFxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5ndWFyZCA9IHRoaXMuZ3VhcmQuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGd1YXJkKGZuLCBndWFyZE5hbWUpIHtcclxuICAgIGlmICh0aGlzLmd1YXJkZWROYW1lcyA9PSBudWxsKSB7IHRoaXMuZ3VhcmRlZE5hbWVzID0gW107IH1cclxuICAgIGlmICh0aGlzLmd1YXJkZWROYW1lcy5pbmRleE9mKGd1YXJkTmFtZSkgPT09IC0xKSB7XHJcbiAgICAgIHRoaXMuZ3VhcmRlZE5hbWVzLnB1c2goZ3VhcmROYW1lKTtcclxuICAgICAgZm4uY2FsbCh0aGlzKTtcclxuICAgICAgcmV0dXJuIHRoaXMuZ3VhcmRlZE5hbWVzLnNwbGljZSh0aGlzLmd1YXJkZWROYW1lcy5pbmRleE9mKGd1YXJkTmFtZSksIDEpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxucmguR3VhcmQgPSBHdWFyZDtcclxucmguZ3VhcmQgPSAobmV3IEd1YXJkKCkpLmd1YXJkO1xyXG4gICIsImxldCB7IHJoIH0gPSB3aW5kb3c7XHJcbmxldCB7IF8gfSA9IHJoO1xyXG5sZXQgeyAkIH0gPSByaDtcclxuXHJcbmxldCBkZWZhdWx0T3B0cyA9XHJcbiAge2FzeW5jOiB0cnVlfTtcclxuXHJcbmxldCBmb3JtRGF0YSA9IChyaC5mb3JtRGF0YSA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICBsZXQgZm9ybV9kYXRhID0gbmV3IHdpbmRvdy5Gb3JtRGF0YTtcclxuICBfLmVhY2gob3B0cywgKHZhbHVlLCBrZXkpID0+IGZvcm1fZGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSkpO1xyXG4gIHJldHVybiBmb3JtX2RhdGE7XHJcbn0pO1xyXG5cclxuLy9wcml2YXRlIGNsYXNzIG9mIGh0dHAgYXBpXHJcbmNsYXNzIFJlc3BvbnNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoeGhyLCBvcHRzKSB7XHJcbiAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHRoaXMub25yZWFkeXN0YXRlY2hhbmdlLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnhociA9IHhocjtcclxuICAgIHRoaXMub3B0cyA9IG9wdHM7XHJcbiAgICBpZiAodGhpcy5vcHRzLnN1Y2Nlc3MgIT0gbnVsbCkgeyB0aGlzLnN1Y2Nlc3ModGhpcy5vcHRzLnN1Y2Nlc3MpOyB9XHJcbiAgICBpZiAodGhpcy5vcHRzLmVycm9yICE9IG51bGwpIHsgdGhpcy5lcnJvcih0aGlzLm9wdHMuZXJyb3IpOyB9XHJcbiAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZTtcclxuICB9XHJcbiAgICBcclxuICBvbnJlYWR5c3RhdGVjaGFuZ2UoKSB7XHJcbiAgICBpZiAodGhpcy54aHIucmVhZHlTdGF0ZSAhPT0gNCkgeyByZXR1cm47IH1cclxuXHJcbiAgICBsZXQgdGV4dCA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcclxuICAgIGxldCB7IHN0YXR1cyB9ID0gdGhpcy54aHI7XHJcbiAgICBsZXQgaGVhZGVycyA9IG5hbWUgPT4gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIobmFtZSk7XHJcbiAgICBcclxuICAgIGlmICh0aGlzLmlzU3VjY2VzcyhzdGF0dXMpKSB7XHJcbiAgICAgIGlmICh0aGlzLnN1Y2Nlc3NGbikgeyB0aGlzLnN1Y2Nlc3NGbih0ZXh0LCBzdGF0dXMsIGhlYWRlcnMsIHRoaXMub3B0cyk7IH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh0aGlzLmVycm9yRm4pIHsgdGhpcy5lcnJvckZuKHRleHQsIHN0YXR1cywgaGVhZGVycywgdGhpcy5vcHRzKTsgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmZpbmFsbHlGbikgeyByZXR1cm4gdGhpcy5maW5hbGx5Rm4odGV4dCwgc3RhdHVzLCBoZWFkZXJzLCB0aGlzLm9wdHMpOyB9XHJcbiAgfVxyXG5cclxuICBpc1N1Y2Nlc3Moc3RhdHVzKSB7IHJldHVybiAoKHN0YXR1cyA+PSAyMDApICYmIChzdGF0dXMgPCAzMDApKSB8fCAoc3RhdHVzID09PSAzMDQpOyB9XHJcblxyXG4gIHN1Y2Nlc3MoZm4pIHtcclxuICAgIHRoaXMuc3VjY2Vzc0ZuID0gZm47XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGVycm9yKGZuKSB7XHJcbiAgICB0aGlzLmVycm9yRm4gPSBmbjtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZmluYWxseShmbikge1xyXG4gICAgdGhpcy5maW5hbGx5Rm4gPSBmbjtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxufVxyXG4gIFxyXG5sZXQgY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICBsZXQgWEhSID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0IHx8IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xyXG4gIGxldCB4aHIgPSBuZXcgWEhSO1xyXG4gIGxldCByZXNwb25zZSA9IG5ldyBSZXNwb25zZSh4aHIsIG9wdHMpO1xyXG4gIHJldHVybiB7eGhyLCByZXNwb25zZX07XHJcbn07XHJcblxyXG4vLyBodHRwIGFwaXNcclxubGV0IGFwaUNsaWVudCA9IChyaC5hcGlDbGllbnQgPSBmdW5jdGlvbihvcHRzKSB7XHJcbiAgb3B0cyA9IF8uZXh0ZW5kKHt9LCBkZWZhdWx0T3B0cywgb3B0cyk7XHJcbiAgbGV0IHt4aHIsIHJlc3BvbnNlfSA9IGNyZWF0ZVJlcXVlc3Qob3B0cyk7XHJcbiAgeGhyLm9wZW4ob3B0cy5tZXRob2QsIG9wdHMudXJsLCBvcHRzLmFzeW5jKTtcclxuICBcclxuICBpZiAob3B0c1snQ29udGVudC10eXBlJ10pIHtcclxuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCBvcHRzWydDb250ZW50LXR5cGUnXSk7XHJcbiAgfVxyXG5cclxuICB4aHIuc2VuZChvcHRzLmRhdGEpO1xyXG4gIHJldHVybiByZXNwb25zZTtcclxufSk7XHJcblxyXG5hcGlDbGllbnQuZ2V0ID0gKHVybCwgb3B0cykgPT4gYXBpQ2xpZW50KF8uZXh0ZW5kKHt1cmwsIG1ldGhvZDogJ0dFVCd9LCBvcHRzKSk7XHJcblxyXG5hcGlDbGllbnQucG9zdCA9ICh1cmwsIGRhdGEsIG9wdHMpID0+IGFwaUNsaWVudChfLmV4dGVuZCh7dXJsLCBtZXRob2Q6ICdQT1NUJywgZGF0YX0sIG9wdHMpKTtcclxuXHJcbmFwaUNsaWVudC5wdXQgPSAodXJsLCBkYXRhLCBvcHRzKSA9PiBhcGlDbGllbnQoXy5leHRlbmQoe3VybCwgbWV0aG9kOiAnUFVUJywgZGF0YX0sIG9wdHMpKTtcclxuXHJcbmFwaUNsaWVudC5qc29ucCA9IGZ1bmN0aW9uKHVybCwgb3B0cykge1xyXG4gIG9wdHMgPSBfLmV4dGVuZCh7fSwgZGVmYXVsdE9wdHMsIG9wdHMpO1xyXG4gIGxldCBub2RlID0gJCgnc2NyaXB0JywgMCkgfHwgZG9jdW1lbnQuaGVhZC5jaGlsZHJlblswXTtcclxuICBsZXQgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gIG5ld05vZGUuYXN5bmMgPSBvcHRzLmFzeW5jO1xyXG4gIG5ld05vZGUuc3JjID0gdXJsO1xyXG4gIHJldHVybiBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIG5vZGUpO1xyXG59O1xyXG4iLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5sZXQgeyBfIH0gPSByaDtcclxubGV0IHsgJCB9ID0gcmg7XHJcbmxldCB7IGNvbnN0cyB9ID0gcmg7XHJcblxyXG5jbGFzcyBJZnJhbWUgZXh0ZW5kcyByaC5HdWFyZCB7XHJcblxyXG4gIHRvU3RyaW5nKCkgeyByZXR1cm4gJ0lmcmFtZSc7IH1cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMudW5zdWJzY3JpYmUuYmluZCh0aGlzKTtcclxuICAgIHRoaXMubGlua2VkU3VicyA9IHt9O1xyXG4gICAgaWYgKF8uaXNJZnJhbWUoKSkge1xyXG4gICAgICByaC5tb2RlbC5zdWJzY3JpYmUoY29uc3RzKCdFVlRfQkVGT1JFX1VOTE9BRCcpLCB0aGlzLnVuc3Vic2NyaWJlKTtcclxuICAgICAgcmgubW9kZWwuc3Vic2NyaWJlKGNvbnN0cygnRVZUX1VOTE9BRCcpLCB0aGlzLnVuc3Vic2NyaWJlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVuc3Vic2NyaWJlKCkge1xyXG4gICAgaWYgKHRoaXMucGFyZW50KSB7XHJcbiAgICAgIGxldCBtc2cgPSB7aWQ6IHRoaXMuaWR9O1xyXG4gICAgICB0aGlzLnBhcmVudC5wb3N0TWVzc2FnZSh7IHJobW9kZWxfdW5zdWJzY3JpYmU6IG1zZyB9LCBfLmdldE9yaWdpbih0aGlzLnBhcmVudCkpO1xyXG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgaWYgKHRoaXMuaWQgPT0gbnVsbCkgeyB0aGlzLmlkID0gXy51bmlxdWVJZCgpOyB9XHJcbiAgICB0aGlzLnBhcmVudCA9IHdpbmRvdy5wYXJlbnQ7XHJcbiAgICBpZiAoXy5pc0lmcmFtZSgpKSB7XHJcbiAgICAgIGxldCBpbnB1dCA9IHJoLm1vZGVsLmdldCgnX3NoYXJlZGtleXMuaW5wdXQnKTtcclxuICAgICAgaWYgKGlucHV0KSB7XHJcbiAgICAgICAgbGV0IGlucHV0S2V5cyA9IF8ubWFwKGlucHV0LCBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICBpZiAoXy5pc1N0cmluZyhpdGVtKSkgeyByZXR1cm4ge2tleTogaXRlbX07IH0gZWxzZSB7IHJldHVybiBpdGVtOyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IG1zZyA9IHtpbnB1dDogaW5wdXRLZXlzLCBpZDogdGhpcy5pZH07XHJcbiAgICAgICAgdGhpcy5wYXJlbnQucG9zdE1lc3NhZ2UoeyByaG1vZGVsX3N1YnNjcmliZTogbXNnIH0sIF8uZ2V0T3JpZ2luKHRoaXMucGFyZW50KSk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IG91dHB1dEtleXMgPSByaC5tb2RlbC5nZXQoJ19zaGFyZWRrZXlzLm91dHB1dCcpO1xyXG4gICAgICBpZiAob3V0cHV0S2V5cykgeyByZXR1cm4gdGhpcy5saW5rTW9kZWwodGhpcy5wYXJlbnQsIHRoaXMuaWQsIG91dHB1dEtleXMpOyB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGVhbihpZCkge1xyXG4gICAgbGV0IHN1YnMgPSB0aGlzLmxpbmtlZFN1YnNbaWRdO1xyXG4gICAgaWYgKHN1YnMpIHtcclxuICAgICAgZm9yIChsZXQgdW5zdWIgb2YgQXJyYXkuZnJvbShzdWJzKSkgeyB1bnN1YigpOyB9XHJcbiAgICAgIHJldHVybiBkZWxldGUgdGhpcy5saW5rZWRTdWJzW2lkXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxpbmtNb2RlbChzb3VyY2UsIGlkLCBrZXlzKSB7XHJcbiAgICBpZiAoa2V5cyA9PSBudWxsKSB7IGtleXMgPSBbXTsgfVxyXG4gICAgbGV0IHN1YnMgPSBbXTtcclxuICAgIGxldCBjYWxsYmFjayA9ICh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmd1YXJkKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCBtc2cgPSB7fTsgbXNnW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gc291cmNlLnBvc3RNZXNzYWdlKHsgcmhtb2RlbF9wdWJsaXNoOiBtc2cgfSwgXy5nZXRPcmlnaW4oc291cmNlKSk7XHJcbiAgICAgIH1cclxuICAgICAgLCBpZCk7XHJcbiAgICB9O1xyXG4gICAgZm9yIChsZXQga2V5IG9mIEFycmF5LmZyb20oa2V5cykpIHtcclxuICAgICAga2V5ID0ga2V5LnRyaW0oKTtcclxuICAgICAgc3Vicy5wdXNoKHJoLm1vZGVsLnN1YnNjcmliZShrZXksIGNhbGxiYWNrKSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNsZWFuKGlkKTtcclxuICAgIHJldHVybiB0aGlzLmxpbmtlZFN1YnNbaWRdID0gc3VicztcclxuICB9XHJcblxyXG4gIHB1Ymxpc2goa2V5LCB2YWx1ZSwgb3B0cykge1xyXG4gICAgaWYgKG9wdHMgPT0gbnVsbCkgeyBvcHRzID0ge307IH1cclxuICAgIHJldHVybiB0aGlzLmd1YXJkKCgpID0+IHJoLm1vZGVsLnB1Ymxpc2goa2V5LCB2YWx1ZSwgb3B0cykpO1xyXG4gIH1cclxuXHJcbiAgZ3VhcmQoZm4sIGd1YXJkTmFtZSkge1xyXG4gICAgaWYgKGd1YXJkTmFtZSA9PSBudWxsKSB7IGd1YXJkTmFtZSA9IHRoaXMuaWQ7IH1cclxuICAgIHJldHVybiBzdXBlci5ndWFyZChmbiwgZ3VhcmROYW1lKTtcclxuICB9XHJcbn1cclxuXHJcbnJoLmlmcmFtZSA9IG5ldyBJZnJhbWUoKTtcclxuIiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IHsgXyB9ID0gcmg7XHJcbmxldCB7ICQgfSA9IHJoO1xyXG5sZXQgeyBjb25zdHMgfSA9IHJoO1xyXG5cclxuXHJcbmxldCBoZWFkID0gJCgnaGVhZCcsIDApO1xyXG5sZXQgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG5zdHlsZS5pbm5lckhUTUwgPSAnLnJoLWhpZGU6bm90KC5yaC1hbmltYXRlKXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JztcclxuaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuY2hpbGROb2Rlc1swXSk7XHJcblxyXG5fLmFkZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQsICdET01Db250ZW50TG9hZGVkJywgXy5vbmUoZnVuY3Rpb24oKSB7XHJcbiAgcmgubW9kZWwucHVibGlzaChjb25zdHMoJ0VWVF9XSURHRVRfQkVGT1JFTE9BRCcpLCB0cnVlLCB7c3luYzogdHJ1ZX0pO1xyXG5cclxuICBfLmxvYWRXaWRnZXRzKGRvY3VtZW50KTtcclxuXHJcbiAgXy5sb2FkQ29udGVudEZpbHRlcihkb2N1bWVudCk7XHJcblxyXG4gIHJldHVybiByaC5tb2RlbC5wdWJsaXNoKGNvbnN0cygnRVZUX1dJREdFVF9MT0FERUQnKSwgdHJ1ZSwge3N5bmM6IHRydWV9KTtcclxufSlcclxuKTtcclxuXHJcbl8uYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFwicmVzaXplXCIsIGZ1bmN0aW9uICgpe1xyXG4gIHJoLm1vZGVsLnB1Ymxpc2goY29uc3RzKCdFVlRfUkVTSVpFJyksIHRydWUpXHJcbn0pXHJcblxyXG5pZiAoXy5pc0lmcmFtZSgpKSB7XHJcbiAgXy5hZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgcmgubW9kZWwucHVibGlzaChjb25zdHMoJ0VWVF9CRUZPUkVfVU5MT0FEJyksIHRydWUsIHtzeW5jOiB0cnVlfSk7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH0pO1xyXG5cclxuICBfLmFkZEV2ZW50TGlzdGVuZXIod2luZG93LCAndW5sb2FkJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgIHJoLm1vZGVsLnB1Ymxpc2goY29uc3RzKCdFVlRfVU5MT0FEJyksIHRydWUsIHtzeW5jOiB0cnVlfSk7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH0pO1xyXG59XHJcbiIsImxldCB7IHJoIH0gPSB3aW5kb3c7XHJcbmxldCB7IF8gfSA9IHJoO1xyXG5cclxuXy5hZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ21lc3NhZ2UnLCBmdW5jdGlvbihlKSB7XHJcbiAgbGV0IGNvbmZpZywga2V5O1xyXG4gIGlmICghXy5pc1NhbWVPcmlnaW4oZS5vcmlnaW4pKSB7IHJldHVybjsgfVxyXG5cclxuICBsZXQgeyBkYXRhIH0gPSBlO1xyXG4gIGlmICghXy5pc09iamVjdChkYXRhKSkgeyByZXR1cm47IH1cclxuXHJcbiAgaWYgKGRhdGEucmhtb2RlbF9wdWJsaXNoKSB7XHJcbiAgICBjb25maWcgPSBkYXRhLnJobW9kZWxfcHVibGlzaDtcclxuICAgIGlmIChjb25maWcpIHsgZm9yIChrZXkgaW4gY29uZmlnKSB7IGxldCB2YWx1ZSA9IGNvbmZpZ1trZXldOyByaC5pZnJhbWUucHVibGlzaChrZXksIHZhbHVlLCB7c3luYzogdHJ1ZX0pOyB9IH1cclxuICB9XHJcbiAgXHJcbiAgaWYgKGRhdGEucmhtb2RlbF9zdWJzY3JpYmUpIHtcclxuICAgIGNvbmZpZyA9IGRhdGEucmhtb2RlbF9zdWJzY3JpYmU7XHJcbiAgICBsZXQgaW5wdXQgPSBjb25maWcuaW5wdXQgfHwgW107XHJcbiAgICBsZXQgdG9wQ29udGFpbmVyID0gIXJoLm1vZGVsLmdldCgnX3NoYXJlZGtleXMuaW5wdXQnKTtcclxuICAgIGxldCBrZXlzID0gXy5yZWR1Y2UoaW5wdXQsIGZ1bmN0aW9uKHJlc3VsdCwgaXRlbSkge1xyXG4gICAgICBpZiAodG9wQ29udGFpbmVyIHx8IChpdGVtLm5lc3RlZCAhPT0gZmFsc2UpKSB7IHJlc3VsdC5wdXNoKGl0ZW0ua2V5KTsgfVxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLCBbXSk7XHJcbiAgICBpZiAoa2V5cyAhPSBudWxsID8ga2V5cy5sZW5ndGggOiB1bmRlZmluZWQpIHsgcmguaWZyYW1lLmxpbmtNb2RlbChlLnNvdXJjZSwgY29uZmlnLmlkLCBrZXlzKTsgfVxyXG4gIH1cclxuICBcclxuICBpZiAoZGF0YS5yaG1vZGVsX3Vuc3Vic2NyaWJlKSB7XHJcbiAgICBjb25maWcgPSBkYXRhLnJobW9kZWxfdW5zdWJzY3JpYmU7XHJcbiAgICByZXR1cm4gcmguaWZyYW1lLmNsZWFuKGNvbmZpZy5pZCk7XHJcbiAgfVxyXG59KTtcclxuIiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IHsgXyB9ID0gcmg7XHJcbmxldCB7IGNvbnN0cyB9ID0gcmg7XHJcblxyXG4vLyBDaGlsZE5vZGUgcHJpdmF0ZSBjbGFzcyBmb3IgTW9kZWxcclxuY2xhc3MgQ2hpbGROb2RlIHtcclxuXHJcbiAgY29uc3RydWN0b3Ioc3Vic2NyaWJlcnMsIGNoaWxkcmVuKSB7XHJcbiAgICBpZiAoc3Vic2NyaWJlcnMgPT0gbnVsbCkgeyBzdWJzY3JpYmVycyA9IFtdOyB9XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gc3Vic2NyaWJlcnM7XHJcbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgeyBjaGlsZHJlbiA9IHt9OyB9XHJcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiBhZGQga2V5Liogc3VwcG9ydCBpbiBnZXRcclxuICBnZXRTdWJzY3JpYmVycyhrZXlzLCBwYXRoLCB2YWx1ZSwgc3Vicykge1xyXG4gICAgaWYgKGtleXMubGVuZ3RoID4gMSkge1xyXG4gICAgICBsZXQgY2hpbGQ7XHJcbiAgICAgIHN1YnMucHVzaCh7Zm5zSW5mbzogdGhpcy5zdWJzY3JpYmVycywga2V5OiBwYXRoLCB2YWx1ZX0pO1xyXG4gICAgICBsZXQgY2hpbGRLZXkgPSBrZXlzWzFdO1xyXG4gICAgICBpZiAoY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2NoaWxkS2V5XSkge1xyXG4gICAgICAgIGxldCBuZXdQYXRoID0gYCR7cGF0aH0uJHtjaGlsZEtleX1gO1xyXG4gICAgICAgIGNoaWxkLmdldFN1YnNjcmliZXJzKGtleXMuc2xpY2UoMSksIG5ld1BhdGgsIHZhbHVlICE9IG51bGwgPyB2YWx1ZVtjaGlsZEtleV0gOiB1bmRlZmluZWQsIHN1YnMpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGtleXMubGVuZ3RoID4gMCkge1xyXG4gICAgICB0aGlzLl9nZXRBbGxDaGlsZFN1YnNjcmliZXJzKHBhdGgsIHZhbHVlLCBzdWJzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdWJzO1xyXG4gIH1cclxuXHJcbiAgYWRkU3Vic2NyaWJlcnMoZm4sIGtleXMsIG9wdHMpIHtcclxuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVycy5wdXNoKFtmbiwgb3B0c10pO1xyXG4gICAgfSBlbHNlIGlmIChrZXlzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgbGV0IGNoaWxkS2V5ID0ga2V5c1sxXTtcclxuICAgICAgaWYgKHRoaXMuY2hpbGRyZW5bY2hpbGRLZXldID09IG51bGwpIHsgdGhpcy5jaGlsZHJlbltjaGlsZEtleV0gPSBuZXcgQ2hpbGROb2RlKCk7IH1cclxuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bY2hpbGRLZXldLmFkZFN1YnNjcmliZXJzKGZuLCBrZXlzLnNsaWNlKDEpLCBvcHRzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZVN1YnNjcmliZXIoZm4sIGtleXMpIHtcclxuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fZGVsZXRlU3Vic2NyaWJlcihmbik7XHJcbiAgICB9IGVsc2UgaWYgKGtleXMubGVuZ3RoID4gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltrZXlzWzFdXS5yZW1vdmVTdWJzY3JpYmVyKGZuLCBrZXlzLnNsaWNlKDEpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9kZWxldGVTdWJzY3JpYmVyKGZuKSB7XHJcbiAgICBsZXQgaW5kZXggPSBfLmZpbmRJbmRleCh0aGlzLnN1YnNjcmliZXJzLCBpdGVtID0+IGl0ZW1bMF0gPT09IGZuKTtcclxuICAgIGlmICgoaW5kZXggIT0gbnVsbCkgJiYgKGluZGV4ICE9PSAtMSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaWJlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH0gZWxzZSBpZiAocmguX2RlYnVnKSB7XHJcbiAgICAgIHJldHVybiByaC5fZCgnZXJyb3InLCAnX3Vuc3Vic2NyaWJlJyxcclxuICAgICAgICBgJHt0aGlzfS57a2V5fSBpcyBub3Qgc3Vic2NyaWJlZCB3aXRoICR7Zm59YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZ2V0QWxsQ2hpbGRTdWJzY3JpYmVycyhwYXRoLCB2YWx1ZSwgc3Vicykge1xyXG4gICAgc3Vicy5wdXNoKHtmbnNJbmZvOiB0aGlzLnN1YnNjcmliZXJzLCBrZXk6IHBhdGgsIHZhbHVlfSk7XHJcbiAgICBpZiAodGhpcy5jaGlsZHJlbikge1xyXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgeyB2YWx1ZSA9IHt9OyB9XHJcbiAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltrZXldO1xyXG4gICAgICAgIGNoaWxkLl9nZXRBbGxDaGlsZFN1YnNjcmliZXJzKGAke3BhdGh9LiR7a2V5fWAsIHZhbHVlW2tleV0sIHN1YnMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3VicztcclxuICB9XHJcbn1cclxuXHJcbi8vUm9vdE5vZGUgcHJpdmUgY2xhc3MgZm9yIE1vZGVsXHJcbmNsYXNzIFJvb3ROb2RlIGV4dGVuZHMgQ2hpbGROb2RlIHtcclxuXHJcbiAgY29uc3RydWN0b3Ioc3Vic2NyaWJlcnMsIGNoaWxkcmVuLCBkYXRhKSB7XHJcbiAgICBzdXBlcigpXHJcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gc3Vic2NyaWJlcnM7XHJcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7IGRhdGEgPSB7fTsgfVxyXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIHN1cGVyKHRoaXMuc3Vic2NyaWJlcnMsIHRoaXMuY2hpbGRzKTtcclxuICB9XHJcblxyXG4gIGdldFN1YnNjcmliZXJzKGtleXMpIHtcclxuICAgIGxldCBjaGlsZEtleSA9IGtleXNbMF07XHJcbiAgICBsZXQgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2NoaWxkS2V5XTtcclxuICAgIGlmIChjaGlsZCkge1xyXG4gICAgICByZXR1cm4gY2hpbGQuZ2V0U3Vic2NyaWJlcnMoa2V5cywgYCR7a2V5c1swXX1gLCB0aGlzLmRhdGFba2V5c1swXV0sIFtdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZFN1YnNjcmliZXJzKGZuLCBrZXlzLCBvcHRzKSB7XHJcbiAgICBsZXQgY2hpbGRLZXkgPSBrZXlzWzBdO1xyXG4gICAgaWYgKHRoaXMuY2hpbGRyZW5bY2hpbGRLZXldID09IG51bGwpIHsgdGhpcy5jaGlsZHJlbltjaGlsZEtleV0gPSBuZXcgQ2hpbGROb2RlKCk7IH1cclxuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW2NoaWxkS2V5XS5hZGRTdWJzY3JpYmVycyhmbiwga2V5cywgb3B0cyk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVTdWJzY3JpYmVyKGZuLCBrZXlzKSB7XHJcbiAgICBsZXQgY2hpbGRLZXkgPSBrZXlzWzBdO1xyXG4gICAgcmV0dXJuICh0aGlzLmNoaWxkcmVuW2NoaWxkS2V5XSAhPSBudWxsID8gdGhpcy5jaGlsZHJlbltjaGlsZEtleV0ucmVtb3ZlU3Vic2NyaWJlcihmbiwga2V5cykgOiB1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YShrZXlzKSB7XHJcbiAgICBsZXQgdmFsdWU7XHJcbiAgICBsZXQgeyBkYXRhIH0gPSB0aGlzO1xyXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGtleXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIGxldCBrZXkgPSBrZXlzW2luZGV4XTtcclxuICAgICAgaWYgKF8uaXNEZWZpbmVkKGRhdGEpKSB7XHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAoa2V5cy5sZW5ndGggLSAxKSkge1xyXG4gICAgICAgICAgdmFsdWUgPSBkYXRhW2tleV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGRhdGEgPSBkYXRhW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXREYXRhKGtleXMsIHZhbHVlKSB7IC8vYS5iIGEuKlxyXG4gICAgbGV0IHsgZGF0YSB9ID0gdGhpcztcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBrZXlzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICBsZXQga2V5ID0ga2V5c1tpbmRleF07XHJcbiAgICAgIGlmIChpbmRleCA9PT0gKGtleXMubGVuZ3RoIC0gMSkpIHtcclxuICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIV8uaXNEZWZpbmVkKGRhdGFba2V5XSkpIHsgZGF0YVtrZXldID0ge307IH1cclxuICAgICAgICBkYXRhID0gZGF0YVtrZXldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBNb2RlbCBjbGFzcyB0byByZWFkIHdyaXRlIGxvY2FsIGRhdGEgdXNpbmcgcHVibGlzaCBzdWJzY3JpYmUgcGF0dGVyblxyXG52YXIgTW9kZWwgPSAoZnVuY3Rpb24oKSB7XHJcbiAgbGV0IF9jb3VudCA9IHVuZGVmaW5lZDtcclxuICBNb2RlbCA9IGNsYXNzIE1vZGVsIHtcclxuICAgIHN0YXRpYyBpbml0Q2xhc3MoKSB7XHJcblxyXG4gICAgICAvLyBwcml2YXRlIHN0YXRpYyB2YXJpYWJsZVxyXG4gICAgICBfY291bnQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nKCkgeyByZXR1cm4gYE1vZGVsXyR7dGhpcy5fY291bnR9YDsgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLl9yb290Tm9kZSA9IG5ldyBSb290Tm9kZSgpO1xyXG5cclxuICAgICAgdGhpcy5fY291bnQgPSBfY291bnQ7XHJcbiAgICAgIF9jb3VudCArPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChrZXkpIHtcclxuICAgICAgbGV0IHZhbHVlO1xyXG4gICAgICBpZiAodGhpcy5faXNGb3JHbG9iYWwoa2V5KSkgeyByZXR1cm4gcmgubW9kZWwuZ2V0KGtleSk7IH1cclxuXHJcbiAgICAgIGlmIChfLmlzU3RyaW5nKGtleSkpIHtcclxuICAgICAgICB2YWx1ZSA9IHRoaXMuX3Jvb3ROb2RlLmdldERhdGEodGhpcy5fZ2V0S2V5cyhrZXkpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByaC5fZCgnZXJyb3InLCAnR2V0JywgYCR7dGhpc30uJHtrZXl9IGlzIG5vdCBhIHN0cmluZ2ApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocmguX2RlYnVnKSB7XHJcbiAgICAgICAgcmguX2QoJ2xvZycsICdHZXQnLCBgJHt0aGlzfS4ke2tleX06ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgY2dldChrZXkpIHsgcmV0dXJuIHRoaXMuZ2V0KGNvbnN0cyhrZXkpKTsgfVxyXG5cclxuICAgIC8vIFRPRE86IGFkZCBvcHRpb25zIHRvIGRldGVjdCBjaGFuZ2UgdGhlbiBvbmx5IHRyaWdnZXIgdGhlIGV2ZW50XHJcbiAgICBwdWJsaXNoKGtleSwgdmFsdWUsIG9wdHMpIHtcclxuICAgICAgaWYgKG9wdHMgPT0gbnVsbCkgeyBvcHRzID0ge307IH1cclxuICAgICAgaWYgKHRoaXMuX2lzRm9yR2xvYmFsKGtleSkpIHsgcmV0dXJuIHJoLm1vZGVsLnB1Ymxpc2goa2V5LCB2YWx1ZSwgb3B0cyk7IH1cclxuICAgICAgaWYgKHJoLl9kZWJ1Zykge1xyXG4gICAgICAgIHJoLl9kKCdsb2cnLCAnUHVibGlzaCcsIGAke3RoaXN9LiR7a2V5fTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKF8uaXNTdHJpbmcoa2V5KSkge1xyXG4gICAgICAgIHRoaXMuX3Jvb3ROb2RlLnNldERhdGEodGhpcy5fZ2V0S2V5cyhrZXkpLCB2YWx1ZSk7XHJcbiAgICAgICAgbGV0IHN1YnMgPSB0aGlzLl9yb290Tm9kZS5nZXRTdWJzY3JpYmVycyh0aGlzLl9nZXRLZXlzKGtleSkpO1xyXG4gICAgICAgIGxldCBrZXlMZW5ndGggPSBrZXlbMF0gPT09ICcuJyA/IGtleS5sZW5ndGggLSAxIDoga2V5Lmxlbmd0aDtcclxuICAgICAgICBsZXQgZmlsdGVyZWRTdWJzID0gXy5tYXAoc3VicywgZnVuY3Rpb24oc3ViKSB7XHJcbiAgICAgICAgICBsZXQgZm5zSW5mbyA9IF8uZmlsdGVyKHN1Yi5mbnNJbmZvLCBmbkluZm8gPT4gXy5pc0RlZmluZWQoZm5JbmZvWzBdKSAmJlxyXG4gICAgICAgICAgICAoKGZuSW5mb1sxXS5wYXJ0aWFsICE9PSBmYWxzZSkgfHwgKHN1Yi5rZXkubGVuZ3RoID49IGtleUxlbmd0aCkpXHJcbiAgICAgICAgICAgKTtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGtleTogc3ViLmtleSxcclxuICAgICAgICAgICAgdmFsdWU6IHN1Yi52YWx1ZSxcclxuICAgICAgICAgICAgZm5zOiBfLm1hcChmbnNJbmZvLCBmbkluZm8gPT4gZm5JbmZvWzBdKVxyXG4gICAgICAgICAgfTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAgIF8uZWFjaChmaWx0ZXJlZFN1YnMsIHN1YiA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gXy5lYWNoKHN1Yi5mbnMsIGZuID0+IHtcclxuICAgICAgICAgICAgaWYgKHJoLl9kZWJ1Zykge1xyXG4gICAgICAgICAgICAgIHJoLl9kKCdsb2cnLCAnUHVibGlzaCBjYWxsJyxcclxuICAgICAgICAgICAgICAgIGAke3RoaXN9LiR7c3ViLmtleX06ICR7SlNPTi5zdHJpbmdpZnkoc3ViLnZhbHVlKX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdW5zdWIgPSAoKSA9PiB0aGlzLl91bnN1YnNjcmliZShzdWIua2V5LCBmbik7XHJcbiAgICAgICAgICAgIGlmIChvcHRzLnN5bmMpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZm4oc3ViLnZhbHVlLCBzdWIua2V5LCB1bnN1Yik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHJoLl8uZGVmZXIoZm4sIHN1Yi52YWx1ZSwgc3ViLmtleSwgdW5zdWIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByaC5fZCgnZXJyb3InLCAnUHVibGlzaCcsIGAke3RoaXN9LiR7a2V5fSBpcyBub3QgYSBzdHJpbmdgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNwdWJsaXNoKGtleSwgdmFsdWUsIG9wdHMpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucHVibGlzaChjb25zdHMoa2V5KSwgdmFsdWUsIG9wdHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzU3Vic2NyaWJlZChrZXkpIHtcclxuICAgICAgbGV0IGZvdW5kO1xyXG4gICAgICBpZiAodGhpcy5faXNGb3JHbG9iYWwoa2V5KSkgeyByZXR1cm4gcmgubW9kZWwuaXNTdWJzY3JpYmVkKGtleSk7IH1cclxuICAgICAgaWYgKGtleVswXSA9PT0gJy4nKSB7IGtleSA9IGtleS5zdWJzdHJpbmcoMSk7IH1cclxuICAgICAgbGV0IHN1YnMgPSB0aGlzLl9yb290Tm9kZS5nZXRTdWJzY3JpYmVycyh0aGlzLl9nZXRLZXlzKGtleSkpO1xyXG4gICAgICBmb3IgKGxldCBzdWIgb2YgQXJyYXkuZnJvbShzdWJzKSkgeyBpZiAoc3ViLmtleSA9PT0ga2V5KSB7IGZvdW5kID0gdHJ1ZTsgfSB9XHJcbiAgICAgIHJldHVybiBmb3VuZCA9PT0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjaXNTdWJzY3JpYmVkKGtleSkgeyByZXR1cm4gdGhpcy5pc1N1YnNjcmliZWQoY29uc3RzKGtleSkpOyB9XHJcblxyXG4gICAgc3Vic2NyaWJlT25jZShrZXksIGZuLCBvcHRzKSB7XHJcbiAgICAgIGlmIChvcHRzID09IG51bGwpIHsgb3B0cyA9IHt9OyB9XHJcbiAgICAgIGxldCBrZXlzID0gXy5pc1N0cmluZyhrZXkpID8gW2tleV0gOiBrZXk7XHJcbiAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoa2V5cy5zcGxpY2UoMCwgMSlbMF0sICh2YWx1ZSwga2V5LCB1bnN1YikgPT4ge1xyXG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgZm4odmFsdWUsIGtleSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuc3Vic2NyaWJlT25jZShrZXlzLCBmbiwgb3B0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bnN1YigpO1xyXG4gICAgICB9XHJcbiAgICAgICwgb3B0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgY3N1YnNjcmliZU9uY2Uoa2V5LCBmbiwgb3B0cykge1xyXG4gICAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVPbmNlKGNvbnN0cyhrZXkpLCBmbiwgb3B0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Vic2NyaWJlKGtleSwgZm4sIG9wdHMpIHtcclxuICAgICAgaWYgKG9wdHMgPT0gbnVsbCkgeyBvcHRzID0ge307IH1cclxuICAgICAgaWYgKF8uaXNTdHJpbmcoa2V5KSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoa2V5LCBmbiwgb3B0cyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHVuc3VicyA9IF8ubWFwKGtleSwgaXRlbSA9PiB0aGlzLl9zdWJzY3JpYmUoaXRlbSwgZm4sIG9wdHMpKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4gXy5lYWNoKHVuc3VicywgdW5zdWIgPT4gdW5zdWIoKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjc3Vic2NyaWJlKGtleSwgZm4sIG9wdHMpIHsgcmV0dXJuIHRoaXMuc3Vic2NyaWJlKGNvbnN0cyhrZXkpLCBmbiwgb3B0cyk7IH1cclxuXHJcbiAgICBfc3Vic2NyaWJlKGtleSwgZm4sIG9wdHMpIHtcclxuICAgICAgaWYgKG9wdHMgPT0gbnVsbCkgeyBvcHRzID0ge307IH1cclxuICAgICAgaWYgKHRoaXMuX2lzRm9yR2xvYmFsKGtleSkpIHsgcmV0dXJuIHJoLm1vZGVsLnN1YnNjcmliZShrZXksIGZuLCBvcHRzKTsgfVxyXG4gICAgICBpZiAocmguX2RlYnVnKSB7IHJoLl9kKCdsb2cnLCAnU3Vic2NyaWJlJywgYCR7dGhpc30uJHtrZXl9YCk7IH1cclxuXHJcbiAgICAgIHRoaXMuX3Jvb3ROb2RlLmFkZFN1YnNjcmliZXJzKGZuLCB0aGlzLl9nZXRLZXlzKGtleSksIG9wdHMpO1xyXG4gICAgICBsZXQgdmFsdWUgPSB0aGlzLl9yb290Tm9kZS5nZXREYXRhKHRoaXMuX2dldEtleXMoa2V5KSk7XHJcbiAgICAgIGxldCB1bnN1YiA9ICgpID0+IHRoaXMuX3Vuc3Vic2NyaWJlKGtleSwgZm4pO1xyXG4gICAgICBpZiAob3B0cy5mb3JjZUluaXQgfHwgKCh2YWx1ZSAhPSBudWxsKSAmJiAhb3B0cy5pbml0RG9uZSkpIHsgZm4odmFsdWUsIGtleSwgdW5zdWIpOyB9XHJcbiAgICAgIHJldHVybiB1bnN1YjtcclxuICAgIH1cclxuXHJcbiAgICBfdW5zdWJzY3JpYmUoa2V5LCBmbikge1xyXG4gICAgICBpZiAodGhpcy5faXNGb3JHbG9iYWwoa2V5KSkgeyByZXR1cm4gcmgubW9kZWwuX3Vuc3Vic2NyaWJlKGtleSk7IH1cclxuICAgICAgaWYgKHJoLl9kZWJ1ZykgeyByaC5fZCgnbG9nJywgJ19VbnN1YnNjcmliZScsIGAke3RoaXN9LiR7a2V5fWApOyB9XHJcbiAgICAgIHJldHVybiB0aGlzLl9yb290Tm9kZS5yZW1vdmVTdWJzY3JpYmVyKGZuLCB0aGlzLl9nZXRLZXlzKGtleSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzR2xvYmFsKCkgeyByZXR1cm4gdGhpcyA9PT0gcmgubW9kZWw7IH1cclxuXHJcbiAgICBpc0dsb2JhbEtleShrZXkpIHsgcmV0dXJuIGtleSAmJiAoa2V5WzBdID09PSAnLicpOyB9XHJcblxyXG4gICAgX2lzRm9yR2xvYmFsKGtleSkgeyByZXR1cm4gIXRoaXMuaXNHbG9iYWwoKSAmJiB0aGlzLmlzR2xvYmFsS2V5KGtleSk7IH1cclxuXHJcbiAgICBfZ2V0S2V5cyhmdWxsS2V5KSB7XHJcbiAgICAgIGxldCBrZXlzID0gZnVsbEtleS5zcGxpdCgnLicpO1xyXG4gICAgICBpZiAoa2V5c1swXSA9PT0gJycpIHsga2V5cyA9IGtleXMuc2xpY2UoMSk7IH0gLy9zdHJpcCBmaXJzdCBnbG9iYWwga2V5IC5cclxuICAgICAgaWYgKHJoLl9kZWJ1ZyAmJiAoa2V5cy5sZW5ndGggPT09IDApKSB7XHJcbiAgICAgICAgcmguX2QoJ2Vycm9yJywgJ01vZGVsJywgYCR7dGhpc30uJHtmdWxsS2V5fSBpcyBpbnZhbGlkYCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICB9XHJcbiAgfTtcclxuICBNb2RlbC5pbml0Q2xhc3MoKTtcclxuICByZXR1cm4gTW9kZWw7XHJcbn0pKCk7XHJcblxyXG4vL2dsb2JhbCBvYmplY3RcclxucmguTW9kZWwgPSBNb2RlbDtcclxucmgubW9kZWwgPSBuZXcgTW9kZWwoKTtcclxucmgubW9kZWwudG9TdHJpbmcgPSAoKSA9PiAnR2xvYmFsTW9kZWwnO1xyXG4iLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5sZXQgeyAkIH0gPSByaDtcclxubGV0IHsgXyB9ID0gcmg7XHJcblxyXG5jbGFzcyBOb2RlSG9sZGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iobm9kZXMpIHtcclxuICAgIHRoaXMubm9kZXMgPSBub2RlcztcclxuICB9XHJcblxyXG4gIGlzVmlzaWJsZShub2RlKSB7XHJcbiAgICBpZiAobm9kZSA9PSBudWxsKSB7IG5vZGUgPSB0aGlzLm5vZGVzWzBdOyB9XHJcbiAgICByZXR1cm4gISQuaGFzQ2xhc3Mobm9kZSwgJ3JoLWhpZGUnKTtcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICByZXR1cm4gXy5lYWNoKHRoaXMubm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZShub2RlKSkge1xyXG4gICAgICAgICQucmVtb3ZlQ2xhc3Mobm9kZSwgJ3JoLWhpZGUnKTtcclxuICAgICAgICByZXR1cm4gbm9kZS5oaWRkZW4gPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLCB0aGlzKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICByZXR1cm4gXy5lYWNoKHRoaXMubm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKG5vZGUpKSB7XHJcbiAgICAgICAgJC5hZGRDbGFzcyhub2RlLCAncmgtaGlkZScpO1xyXG4gICAgICAgIHJldHVybiBub2RlLmhpZGRlbiA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICwgdGhpcyk7XHJcbiAgfVxyXG4gIFxyXG4gIGFjY2Vzc2libGUoZmxhZykge1xyXG4gICAgcmV0dXJuIF8uZWFjaCh0aGlzLm5vZGVzLCBub2RlID0+IG5vZGUuaGlkZGVuID0gZmxhZyk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVDbGFzcyhuZXdDbGFzc2VzKSB7XHJcbiAgICBpZiAodGhpcy5vbGRDbGFzc2VzID09IG51bGwpIHsgdGhpcy5vbGRDbGFzc2VzID0gW107IH1cclxuICAgIGZvciAobGV0IG5vZGUgb2YgQXJyYXkuZnJvbSh0aGlzLm5vZGVzKSkge1xyXG4gICAgICBmb3IgKHZhciBjbGFzc05hbWUgb2YgQXJyYXkuZnJvbSh0aGlzLm9sZENsYXNzZXMpKSB7ICQucmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTsgfVxyXG4gICAgICBmb3IgKGNsYXNzTmFtZSBvZiBBcnJheS5mcm9tKG5ld0NsYXNzZXMpKSB7XHJcbiAgICAgICAgaWYgKGNsYXNzTmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAkLmFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICB0aGlzLm9sZENsYXNzZXMucHVzaChjbGFzc05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlTm9kZXMobmV3Tm9kZXMpIHtcclxuICAgIGxldCBmaXJzdE5vZGUgPSB0aGlzLm5vZGVzWzBdO1xyXG4gICAgbGV0IHsgcGFyZW50Tm9kZSB9ID0gZmlyc3ROb2RlO1xyXG4gICAgZm9yICh2YXIgbm9kZSBvZiBBcnJheS5mcm9tKG5ld05vZGVzKSkgeyBwYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBmaXJzdE5vZGUpOyB9XHJcbiAgICBmb3IgKG5vZGUgb2YgQXJyYXkuZnJvbSh0aGlzLm5vZGVzKSkgeyBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpOyB9XHJcbiAgICByZXR1cm4gdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xyXG4gIH1cclxufVxyXG5cclxucmguTm9kZUhvbGRlciA9IE5vZGVIb2xkZXI7IiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IHsgXyB9ID0gcmg7XHJcblxyXG5jbGFzcyBQbHVnaW4ge1xyXG5cclxuICBhdHRhY2hPd25lcihvYmopIHtcclxuICAgIGlmICh0aGlzLl9vd25lckZucyA9PSBudWxsKSB7IHRoaXMuX293bmVyRm5zID0ge307IH1cclxuICAgIGlmICh0aGlzLmhhc093bmVyKCkpIHsgdGhpcy5kZXRhY2godGhpcy5vd25lcik7IH1cclxuICAgIHRoaXMub3duZXIgPSBvYmo7XHJcbiAgICBpZiAodGhpcy5fb3ZlcnJpZGVOYW1lcykgeyBmb3IgKGxldCBmbk5hbWUgb2YgQXJyYXkuZnJvbSh0aGlzLl9vdmVycmlkZU5hbWVzKSkgeyB0aGlzLl9vdmVycmlkZU93bmVyRm4oZm5OYW1lKTsgfSB9XHJcbiAgICByZXR1cm4gdGhpcy5vd25lcklzQ2hhbmdlZCgpO1xyXG4gIH1cclxuXHJcbiAgZGV0YWNoT3duZXIoKSB7XHJcbiAgICBpZiAodGhpcy5oYXNPd25lcigpKSB7XHJcbiAgICAgIGlmICh0aGlzLl9vd25lckZucykgeyBmb3IgKGxldCBmbk5hbWUgaW4gdGhpcy5fb3duZXJGbnMpIHsgdGhpcy5fcmVzdG9yZU93bmVyRm4oZm5OYW1lKTsgfSB9XHJcbiAgICAgIHRoaXMub3duZXIgPSBudWxsO1xyXG4gICAgICB0aGlzLl9vd25lckZucyA9IHt9O1xyXG4gICAgICByZXR1cm4gdGhpcy5vd25lcklzQ2hhbmdlZCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gcGx1Z2luIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBnZXQgdGhlIG5vdGlmaWNhdGlvbiBvZiBvd29uZXIgY2hhbmdlXHJcbiAgb3duZXJJc0NoYW5nZWQoKSB7fVxyXG5cclxuICBoYXNPd25lcigpIHsgcmV0dXJuICh0aGlzLm93bmVyICE9IG51bGwpOyB9XHJcblxyXG4gIGFkZE92ZXJyaWRlcyhmbk5hbWVzKSB7XHJcbiAgICBpZiAodGhpcy5fb3ZlcnJpZGVOYW1lcyA9PSBudWxsKSB7IHRoaXMuX292ZXJyaWRlTmFtZXMgPSBbXTsgfVxyXG4gICAgcmV0dXJuICgoKSA9PiB7XHJcbiAgICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgICAgZm9yIChsZXQgZm5OYW1lIG9mIEFycmF5LmZyb20oZm5OYW1lcykpIHtcclxuICAgICAgICB0aGlzLl9vdmVycmlkZU5hbWVzLnB1c2goZm5OYW1lKTtcclxuICAgICAgICByZXN1bHQucHVzaCh0aGlzLl9vdmVycmlkZU93bmVyRm4oZm5OYW1lKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0pKCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVPdmVycmlkZXMoZm5OYW1lcykge1xyXG4gICAgcmV0dXJuICgoKSA9PiB7XHJcbiAgICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgICAgZm9yIChsZXQgZm5OYW1lIG9mIEFycmF5LmZyb20oZm5OYW1lcykpIHtcclxuICAgICAgICB0aGlzLl9yZXN0b3JlT3duZXJGbihmbk5hbWUpO1xyXG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuX292ZXJyaWRlTmFtZXMuaW5kZXhPZihmbk5hbWUpO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7IHJlc3VsdC5wdXNoKHRoaXMuX292ZXJyaWRlTmFtZXMuc3BsaWNlKGluZGV4LCAxKSk7IH0gZWxzZSB7XHJcbiAgICAgICAgICByZXN1bHQucHVzaCh1bmRlZmluZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSkoKTtcclxuICB9XHJcblxyXG4gIF9vdmVycmlkZU93bmVyRm4oZm5OYW1lKSB7XHJcbiAgICBpZiAodGhpcy5oYXNPd25lcigpKSB7XHJcbiAgICAgIGxldCBvd25lckZuID0gdGhpcy5vd25lcltmbk5hbWVdO1xyXG4gICAgICB0aGlzLl9vd25lckZuc1tmbk5hbWVdID0gb3duZXJGbjtcclxuICAgICAgcmV0dXJuIHRoaXMub3duZXJbZm5OYW1lXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCBhcmdzID0gW107IGxldCBpID0gLTE7XHJcbiAgICAgICAgd2hpbGUgKCsraSA8IGFyZ3VtZW50cy5sZW5ndGgpIHsgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7IH1cclxuICAgICAgICBsZXQgYmluZGVkRm4gPSBuZXdBcmdzID0+IHtcclxuICAgICAgICAgIHJldHVybiBfX2d1YXJkTWV0aG9kX18ob3duZXJGbiwgJ2FwcGx5JywgbyA9PiBvLmFwcGx5KHRoaXMub3duZXIsIG5ld0FyZ3MpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzW2ZuTmFtZV0oYmluZGVkRm4sIGFyZ3MpO1xyXG4gICAgICB9LmJpbmQodGhpcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfcmVzdG9yZU93bmVyRm4oZm5OYW1lKSB7XHJcbiAgICBpZiAodGhpcy5oYXNPd25lcigpKSB7XHJcbiAgICAgIHRoaXMub3duZXJbZm5OYW1lXSA9IHRoaXMuX293bmVyRm5zW2ZuTmFtZV07XHJcbiAgICAgIHJldHVybiBkZWxldGUgdGhpcy5fb3duZXJGbnNbZm5OYW1lXTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnJoLlBsdWdpbiA9IFBsdWdpbjtcclxuXHJcbmZ1bmN0aW9uIF9fZ3VhcmRNZXRob2RfXyhvYmosIG1ldGhvZE5hbWUsIHRyYW5zZm9ybSkge1xyXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAndW5kZWZpbmVkJyAmJiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9ialttZXRob2ROYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgcmV0dXJuIHRyYW5zZm9ybShvYmosIG1ldGhvZE5hbWUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxufSIsImxldCB7IHJoIH0gPSB3aW5kb3c7XHJcbmxldCB7IF8gfSA9IHJoO1xyXG5cclxubGV0ICQgPSAocmguJCA9IHJoLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IsIGluZGV4KSB7XHJcbiAgaWYgKChpbmRleCAhPSBudWxsKSAmJiAoaW5kZXggPT09IDApKSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgfSBlbHNlIHtcclxuICAgIGxldCBub2RlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgaWYgKChpbmRleCAhPSBudWxsKSAmJiAoaW5kZXggPCBub2RlTGlzdC5sZW5ndGgpKSB7XHJcbiAgICAgIHJldHVybiBub2RlTGlzdFtpbmRleF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbm9kZUxpc3Q7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuXHJcbi8vYXJndW1lbnRzXHJcbi8vIChwYXJlbnQsIHNlbGVjdG9yKSAtPlxyXG4vLyBvciAoc2VsZWN0b3IpIC0+XHJcbiQuZmluZCA9IGZ1bmN0aW9uKCkge1xyXG4gIGxldCBwYXJlbnQsIHNlbGVjdG9yO1xyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xyXG4gICAgcGFyZW50ID0gYXJndW1lbnRzWzBdO1xyXG4gICAgc2VsZWN0b3IgPSBhcmd1bWVudHNbMV07XHJcbiAgfSBlbHNlIHtcclxuICAgIHBhcmVudCA9IGRvY3VtZW50O1xyXG4gICAgc2VsZWN0b3IgPSBhcmd1bWVudHNbMF07XHJcbiAgfVxyXG4gIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbn07XHJcblxyXG4kLnRyYXZlcnNlTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIHByZUNoaWxkLCBwb3N0Q2hpbGQsIG9uQ2hpbGQsIGNvbnRleHQpIHtcclxuICBpZiAoY29udGV4dCA9PSBudWxsKSB7IGNvbnRleHQgPSB3aW5kb3c7IH1cclxuICBpZiAocHJlQ2hpbGQgJiYgcHJlQ2hpbGQuY2FsbChjb250ZXh0LCBub2RlKSkge1xyXG4gICAgJC5lYWNoQ2hpbGROb2RlKG5vZGUsIGZ1bmN0aW9uKGNoaWxkKSB7XHJcbiAgICAgIGlmICghb25DaGlsZCB8fCBvbkNoaWxkLmNhbGwoY29udGV4dCwgY2hpbGQpKSB7XHJcbiAgICAgICAgcmV0dXJuICQudHJhdmVyc2VOb2RlKGNoaWxkLCBwcmVDaGlsZCwgcG9zdENoaWxkLCBvbkNoaWxkLCBjb250ZXh0KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAocG9zdENoaWxkKSB7IHBvc3RDaGlsZC5jYWxsKGNvbnRleHQsIG5vZGUpOyB9XHJcbiAgfVxyXG4gIHJldHVybiBub2RlO1xyXG59O1xyXG5cclxuJC5lYWNoQ2hpbGROb2RlID0gZnVuY3Rpb24ocGFyZW50LCBmbiwgY29udGV4dCkge1xyXG4gIGlmIChjb250ZXh0ID09IG51bGwpIHsgY29udGV4dCA9IHdpbmRvdzsgfVxyXG4gIGZvciAobGV0IGNoaWxkIG9mIEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKSkgeyBmbi5jYWxsKGNvbnRleHQsIGNoaWxkKTsgfVxyXG59O1xyXG5cclxuJC5lYWNoQ2hpbGQgPSBmdW5jdGlvbihwYXJlbnQsIHNlbGVjdG9yLCBmbiwgY29udGV4dCkge1xyXG4gIGlmIChjb250ZXh0ID09IG51bGwpIHsgY29udGV4dCA9IHdpbmRvdzsgfVxyXG4gIGZvciAobGV0IG5vZGUgb2YgQXJyYXkuZnJvbSh0aGlzLmZpbmQocGFyZW50LCBzZWxlY3RvcikpKSB7XHJcbiAgICBmbi5jYWxsKGNvbnRleHQsIG5vZGUpO1xyXG4gIH1cclxufTtcclxuXHJcbiQuZWFjaERhdGFOb2RlID0gZnVuY3Rpb24ocGFyZW50LCBkYXRhQXR0ciwgZm4sIGNvbnRleHQpIHtcclxuICBpZiAoY29udGV4dCA9PSBudWxsKSB7IGNvbnRleHQgPSB3aW5kb3c7IH1cclxuICBmb3IgKGxldCBub2RlIG9mIEFycmF5LmZyb20odGhpcy5maW5kKHBhcmVudCwgYFtkYXRhLSR7ZGF0YUF0dHJ9XWApKSkge1xyXG4gICAgZm4uY2FsbChjb250ZXh0LCBub2RlLCAkLmRhdGFzZXQobm9kZSwgZGF0YUF0dHIpKTtcclxuICB9XHJcbn07XHJcblxyXG4kLmVhY2hBdHRyaWJ1dGVzID0gZnVuY3Rpb24obm9kZSwgZm4sIGNvbnRleHQpIHtcclxuICBsZXQgaW5mb3MgPSAoQXJyYXkuZnJvbShub2RlLmF0dHJpYnV0ZXMpLm1hcCgoYXR0cikgPT4gW2F0dHIuc3BlY2lmaWVkLCBhdHRyLm5hbWUsIGF0dHIudmFsdWVdKSk7XHJcbiAgbGV0IGkgPSAtMTtcclxuICB3aGlsZSAoKytpIDwgaW5mb3MubGVuZ3RoKSB7IC8vaGVyZSBsZW5ndGggY2FuIGJlIGluY3JlYXNlZCBpbiBiZXR3ZWVuXHJcbiAgICBsZXQgaW5mbyA9IGluZm9zW2ldO1xyXG4gICAgaWYgKGluZm9bMF0gIT09IGZhbHNlKSB7IGZuLmNhbGwoY29udGV4dCB8fCB3aW5kb3csIGluZm9bMV0sIGluZm9bMl0sIGluZm9zKTsgfVxyXG4gIH1cclxufTtcclxuXHJcbiQuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24obm9kZSwgYXR0ck5hbWUpIHtcclxuICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUgIT0gbnVsbCkgeyByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpOyB9XHJcbn07XHJcblxyXG4kLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5vZGUsIGF0dHJOYW1lLCB2YWx1ZSkge1xyXG4gIGlmIChub2RlLnNldEF0dHJpYnV0ZSAhPSBudWxsKSB7IHJldHVybiBub2RlLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUpOyB9XHJcbn07XHJcblxyXG4kLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5vZGUsIGF0dHJOYW1lKSB7XHJcbiAgaWYgKG5vZGUucmVtb3ZlQXR0cmlidXRlICE9IG51bGwpIHsgcmV0dXJuIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTsgfVxyXG59O1xyXG5cclxuJC5oYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbihub2RlLCBhdHRyTmFtZSkge1xyXG4gIGlmIChub2RlLmhhc0F0dHJpYnV0ZSAhPSBudWxsKSB7IHJldHVybiBub2RlLmhhc0F0dHJpYnV0ZShhdHRyTmFtZSk7IH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfVxyXG59O1xyXG5cclxuJC5kYXRhc2V0ID0gZnVuY3Rpb24obm9kZSwgYXR0ck5hbWUsIHZhbHVlKSB7XHJcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcclxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gJC5zZXRBdHRyaWJ1dGUobm9kZSwgYGRhdGEtJHthdHRyTmFtZX1gLCB2YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJC5yZW1vdmVBdHRyaWJ1dGUobm9kZSwgYGRhdGEtJHthdHRyTmFtZX1gKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuICQuZ2V0QXR0cmlidXRlKG5vZGUsIGBkYXRhLSR7YXR0ck5hbWV9YCk7XHJcbiAgfVxyXG59O1xyXG5cclxuJC5pc0Rlc2NlbmRlbnQgPSBmdW5jdGlvbihwYXJlbnQsIGNoaWxkKSB7XHJcbiAgbGV0IG5vZGUgPSBjaGlsZC5wYXJlbnROb2RlO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBpZiAoIW5vZGUgfHwgKG5vZGUgPT09IHBhcmVudCkpIHsgYnJlYWs7IH1cclxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcbiAgfVxyXG4gIHJldHVybiBub2RlID09PSBwYXJlbnQ7XHJcbn07XHJcblxyXG4kLmFkZENsYXNzID0gZnVuY3Rpb24obm9kZSwgY2xhc3NOYW1lKSB7XHJcbiAgaWYgKG5vZGUuY2xhc3NMaXN0ICE9IG51bGwpIHtcclxuICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIG5vZGUuY2xhc3NOYW1lID0gYCR7bm9kZS5jbGFzc05hbWV9ICR7Y2xhc3NOYW1lfWA7XHJcbiAgfVxyXG59O1xyXG5cclxuJC5hZGRTdHlsZSA9IGZ1bmN0aW9uIChub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XHJcbiAgaWYgKG5vZGUgJiYgbm9kZS5zdHlsZSkge1xyXG4gICAgbm9kZS5zdHlsZVthdHRyaWJ1dGVdID0gdmFsdWVcclxuICB9XHJcbn1cclxuXHJcbiQucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihub2RlLCBjbGFzc05hbWUpIHtcclxuICBpZiAobm9kZS5jbGFzc0xpc3QgIT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbm9kZS5jbGFzc05hbWUgPSBub2RlLmNsYXNzTmFtZS5yZXBsYWNlKGNsYXNzTmFtZSwgJycpO1xyXG4gIH1cclxufTtcclxuXHJcbiQuaGFzQ2xhc3MgPSBmdW5jdGlvbihub2RlLCBjbGFzc05hbWUpIHtcclxuICBpZiAobm9kZS5jbGFzc0xpc3QgIT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XHJcbiAgfSBlbHNlIGlmIChub2RlLmNsYXNzTmFtZSkge1xyXG4gICAgcmV0dXJuIG5vZGUuY2xhc3NOYW1lLm1hdGNoKG5ldyBSZWdFeHAoYCR7Y2xhc3NOYW1lfSgkfCApYCkpICE9PSBudWxsO1xyXG4gIH1cclxufTtcclxuXHJcbiQudG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbihub2RlLCBjbGFzc05hbWUpIHtcclxuICBpZiAoJC5oYXNDbGFzcyhub2RlLCBjbGFzc05hbWUpKSB7XHJcbiAgICByZXR1cm4gJC5yZW1vdmVDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gJC5hZGRDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xyXG4gIH1cclxufTtcclxuXHJcbiQuY29tcHV0ZWRTdHlsZSA9IG5vZGUgPT4gbm9kZS5jdXJyZW50U3R5bGUgfHwgd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCk7XHJcblxyXG4kLmlzRWxlbWVudE5vZGUgPSBub2RlID0+IG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKVxyXG5cclxuJC5pc1Zpc2libGVOb2RlID0gZnVuY3Rpb24obm9kZSkge1xyXG4gIGxldCBjb21wdXRlZFN0eWxlID0gJC5jb21wdXRlZFN0eWxlKG5vZGUpO1xyXG4gIHJldHVybiAoJ25vbmUnICE9PSBjb21wdXRlZFN0eWxlWydkaXNwbGF5J10pICYmXHJcbiAgIV8uaXNaZXJvQ1NTVmFsdWUoY29tcHV0ZWRTdHlsZVsnb3BhY2l0eSddKSAmJlxyXG4gICFfLmlzWmVyb0NTU1ZhbHVlKGNvbXB1dGVkU3R5bGVbJ21heC1oZWlnaHQnXSk7XHJcbn07XHJcblxyXG4kLnRleHRDb250ZW50ID0gZnVuY3Rpb24obm9kZSwgY29udGVudCkge1xyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XHJcbiAgICBpZiAobm9kZS50ZXh0Q29udGVudCAhPSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBub2RlLnRleHRDb250ZW50ID0gY29udGVudDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBub2RlLmlubmVyVGV4dCA9IGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBub2RlLnRleHRDb250ZW50IHx8IG5vZGUuaW5uZXJUZXh0O1xyXG4gIH1cclxufTtcclxuXHJcbiQuaW5uZXJIVE1MID0gZnVuY3Rpb24obm9kZSwgY29udGVudCkge1xyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XHJcbiAgICByZXR1cm4gbm9kZS5pbm5lckhUTUwgPSBjb250ZW50O1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbm9kZS5pbm5lckhUTUw7XHJcbiAgfVxyXG59O1xyXG5cclxuJC5jc3MgPSBmdW5jdGlvbihub2RlLCBzdHlsZU5hbWUsIHZhbHVlKSB7XHJcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcclxuICAgIHJldHVybiBub2RlLnN0eWxlW3N0eWxlTmFtZV0gPSB2YWx1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIG5vZGUuc3R5bGVbc3R5bGVOYW1lXTtcclxuICB9XHJcbn07XHJcblxyXG4kLm5vZGVOYW1lID0gbm9kZSA9PiBub2RlLm5vZGVOYW1lO1xyXG5cclxuJC5wYWdlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgbGV0IGhlaWdodDtcclxuICBsZXQgZGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgaWYgKGRlKSB7IGhlaWdodCA9IGRlLnNjcm9sbEhlaWdodCB8fCBkZS5jbGllbnRIZWlnaHQgfHwgZGUub2Zmc2V0SGVpZ2h0OyB9XHJcbiAgaWYgKCFoZWlnaHQpIHsgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0OyB9XHJcbiAgbGV0IHsgYm9keSB9ID0gZG9jdW1lbnQ7XHJcbiAgbGV0IGJvZHlIZWlnaHQgPSBib2R5LnNjcm9sbEhlaWdodCB8fCBib2R5LmNsaWVudEhlaWdodCB8fCBib2R5Lm9mZnNldEhlaWdodDtcclxuICBoZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIGJvZHlIZWlnaHQpO1xyXG4gIHJldHVybiBgJHtoZWlnaHR9cHhgO1xyXG59O1xyXG5cclxuJC5wYWdlV2lkdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgbGV0IHdpZHRoO1xyXG4gIGxldCBkZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICBpZiAoZGUpIHsgd2lkdGggPSBkZS5zY3JvbGxXaWR0aCB8fCBkZS5jbGllbnRXaWR0aCB8fCBkZS5vZmZzZXRXaWR0aDsgfVxyXG4gIGlmICghd2lkdGgpIHsgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDsgfVxyXG4gIGxldCB7IGJvZHkgfSA9IGRvY3VtZW50O1xyXG4gIGxldCBib2R5V2lkdGggPSBib2R5LnNjcm9sbFdpZHRoIHx8IGJvZHkuY2xpZW50V2lkdGggfHwgYm9keS5vZmZzZXRXaWR0aDtcclxuICB3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCBib2R5V2lkdGgpO1xyXG4gIHJldHVybiBgJHt3aWR0aH1weGA7XHJcbn1cclxuXHJcbiQuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHRhZywgaW5uZXJIdG1sKSB7XHJcbiAgbGV0IHRhZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XHJcbiAgdGFnTm9kZS5pbm5lckhUTUwgPSBpbm5lckh0bWw7XHJcbiAgcmV0dXJuIHRhZ05vZGU7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAkIiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IHsgXyB9ID0gcmg7XHJcbmxldCB7IGNvbnN0cyB9ID0gcmg7XHJcbmxldCB7IG1vZGVsIH0gPSByaDtcclxuXHJcbmNsYXNzIFJlc3BvbnNpdmUge1xyXG5cclxuICB0b1N0cmluZygpIHsgcmV0dXJuICdSZXNwb25zaXZlJzsgfVxyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc3VicyA9IFtdO1xyXG4gICAgbW9kZWwuc3Vic2NyaWJlKGNvbnN0cygnRVZUX09SSUVOVEFUSU9OX0NIQU5HRScpLCAoKSA9PiB7XHJcbiAgICAgIHJldHVybiBfLmVhY2godGhpcy5zdWJzLCBzdWIgPT4gc3ViLmV2ZW50SGFuZGxlcihzdWIubXFsKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAocmguX2RlYnVnICYmICF0aGlzLmlzU3VwcG9ydGVkKCkpIHtcclxuICAgICAgcmguX2QoJ2Vycm9yJywgJ0Jyb3dzZXIgSXNzdWUnLCAnbWF0Y2hNZWRpYSBpcyBub3Qgc3VwcG9ydGVkLicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNTdXBwb3J0ZWQoKSB7IHJldHVybiAod2luZG93Lm1hdGNoTWVkaWEgIT0gbnVsbCApOyB9XHJcblxyXG4gIGF0dGFjaChtZWRpYV9xdWVyeSwgb25Gbiwgb2ZmRm4pIHtcclxuICAgIGlmICh0aGlzLmlzU3VwcG9ydGVkKSB7XHJcbiAgICAgIGxldCBtcWwgPSB3aW5kb3cubWF0Y2hNZWRpYShtZWRpYV9xdWVyeSk7XHJcbiAgICAgIGxldCBldmVudEhhbmRsZXIgPSBmdW5jdGlvbihtcWwpIHsgaWYgKG1xbC5tYXRjaGVzKSB7IHJldHVybiBvbkZuKCk7IH0gZWxzZSB7IHJldHVybiBvZmZGbigpOyB9IH07XHJcbiAgICAgIGV2ZW50SGFuZGxlcihtcWwpO1xyXG4gICAgICBtcWwuYWRkTGlzdGVuZXIoZXZlbnRIYW5kbGVyKTtcclxuICAgICAgcmV0dXJuIHRoaXMuc3Vicy5wdXNoKHttcWwsIG9uOiBvbkZuLCBvZmY6IG9mZkZuLCBldmVudEhhbmRsZXJ9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRldGFjaChtZWRpYV9xdWVyeSwgb25Gbiwgb2ZmRm4pIHtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN1YnMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIGxldCBzdWIgPSB0aGlzLnN1YnNbaW5kZXhdO1xyXG4gICAgICBpZiAoKHN1Yi5tcWwubWVkaWEgPT09IG1lZGlhX3F1ZXJ5KSAmJiAoc3ViLm9uID09PSBvbkZuKSAmJiAoc3ViLm9mZiA9PT0gb2ZmRm4pKSB7XHJcbiAgICAgICAgc3ViLm1xbC5yZW1vdmVMaXN0ZW5lcihzdWIuZXZlbnRIYW5kbGVyKTtcclxuICAgICAgICB0aGlzLnN1YnMuc3BsaWNlKGluZGV4KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxucmgucmVzcG9uc2l2ZSA9IG5ldyBSZXNwb25zaXZlKCk7IiwiY29uc3QgeyByaCB9ID0gd2luZG93O1xyXG5jb25zdCB7IF8gfSA9IHJoO1xyXG5jb25zdCB7ICQgfSA9IHJoO1xyXG5jb25zdCB7IGNvbnN0cyB9ID0gcmg7XHJcbmNvbnN0IHsgbW9kZWwgfSA9IHJoO1xyXG5jb25zdCB7IGFwaUNsaWVudCB9ID0gcmg7XHJcbmNvbnN0IGZvcm1kYXRhID0gcmguZm9ybURhdGE7XHJcblxyXG5jbGFzcyBSb2JvSGVscFNlcnZlciB7XHJcblxyXG4gIHRvU3RyaW5nKCkgeyByZXR1cm4gJ1JvYm9IZWxwU2VydmVyJzsgfVxyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIHNldFJlc3VsdHNTdHJpbmdIVE1MKHJlc3VsdHNfbm8sIHNlYXJjaFN0cil7XHJcbiAgICB2YXIgbXNnID0gZ1Jlc3VsdHNGb3VuZFN0cmluZztcclxuICAgIG1zZyA9IG1zZy5yZXBsYWNlKFwiJTFcIiwgcmVzdWx0c19ubyk7XHJcbiAgICBtc2cgPSBtc2cucmVwbGFjZShcIiUyXCIsIFwiXFwnXCIgKyBzZWFyY2hTdHIgKyBcIlxcJ1wiKTtcclxuICAgIHRoaXMuZGlzcGxheU1zZyhtc2cpXHJcbiAgfVxyXG5cclxuICBwdWJsaXNoVG9waWNVcmxzKHRvcGljcywgc3lucywgc2VhcmNoVGV4dCl7XHJcbiAgICBsZXQgaWRcclxuICAgIGNvbnN0IHJlc3VsdHNQYXJhbXMgPSAnPycgKyBfLm1hcFRvRW5jb2RlZFN0cmluZyhfLmV4dGVuZCh7IHJoaGx0ZXJtOiBzZWFyY2hUZXh0IH0sXHJcbiAgICAgIHsgcmhzeW5zOiBzeW5zIH0pXHJcbiAgICApXHJcbiAgICBfLmVhY2godG9waWNzLCB0b3BpYyA9PiB7IFxyXG4gICAgICBpZCA9IGAke3RvcGljLm5Ub3BpY0lkfV8ke3RvcGljLm5JbmRleH1gXHJcbiAgICAgIHJoLm1vZGVsLnB1Ymxpc2goYC5wLnNlYXJjaHN1bW1hcnkke2lkfWAsIHRvcGljLnN0clN1bW1hcnkpXHJcbiAgICAgIHJoLm1vZGVsLnB1Ymxpc2goYC5wLnNlYXJjaHVybCR7aWR9YCwgYCR7dG9waWMuc3RyVXJsfSR7cmVzdWx0c1BhcmFtc31gKVxyXG4gICAgICB0b3BpYy5zdHJVcmwgPSBgLnAuc2VhcmNodXJsJHtpZH1gXHJcbiAgICAgIHRvcGljLnN0clN1bW1hcnkgPSBgLnAuc2VhcmNoc3VtbWFyeSR7aWR9YFxyXG4gICAgfSlcclxufVxyXG4gIFxyXG4gIGRpc3BsYXlNc2cobXNnKXtcclxuICAgIHZhciBzcGFuTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGdTZWFyY2hNc2dJZCk7XHJcbiAgICBpZihzcGFuTm9kZSAhPSBudWxsICYmIHNwYW5Ob2RlICE9ICd1bmRlZmluZWQnKVxyXG4gICAgICBzcGFuTm9kZS5pbm5lckhUTUwgPSBtc2c7XHJcbiAgfVxyXG5cclxuICBhcmVhKCkge1xyXG4gICAgcmV0dXJuIF8udXJsUGFyYW0oJ2FyZWEnLCBfLmV4dHJhY3RQYXJhbVN0cmluZygpKTtcclxuICB9XHJcblxyXG4gIHR5cGUoKSB7XHJcbiAgICByZXR1cm4gXy51cmxQYXJhbSgndHlwZScsIF8uZXh0cmFjdFBhcmFtU3RyaW5nKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJvamVjdCgpIHtcclxuICAgIHJldHVybiBfLnVybFBhcmFtKCdwcm9qZWN0JywgXy5leHRyYWN0UGFyYW1TdHJpbmcoKSk7XHJcbiAgfVxyXG5cclxuICBsb2dUb3BpY1ZpZXcodG9waWMpIHtcclxuICAgIHJldHVybiBtb2RlbC5zdWJzY3JpYmUoY29uc3RzKCdFVlRfUFJPSkVDVF9MT0FERUQnKSwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBiYXNlVXJsID0gbW9kZWwuZ2V0KGNvbnN0cygnS0VZX1BVQkxJU0hfQkFTRV9VUkwnKSk7XHJcbiAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBfLnBhcmVudFBhdGgoXy5maWxlUGF0aChfLmdldFJvb3RVcmwoKSkpO1xyXG4gICAgICBjb25zdCB0cGNVcmwgPSBfLmlzUmVsYXRpdmVVcmwodG9waWMpID8gcGFyZW50UGF0aCArIHRvcGljIDogdG9waWM7XHJcbiAgICAgIGlmIChiYXNlVXJsICYmICFfLmlzRW1wdHlTdHJpbmcoYmFzZVVybCkpIHtcclxuICAgICAgICBjb25zdCBoYXNoU3RyaW5nID0gXy5tYXBUb0VuY29kZWRTdHJpbmcoXy5leHRlbmQoY29uc3RzKCdSSFNfTE9HX1RPUElDX1ZJRVcnKSxcclxuICAgICAgICAgIHthcmVhOiB0aGlzLmFyZWEoKSwgdHBjOiBfLmZpbGVQYXRoKHRwY1VybCl9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGFwaUNsaWVudC5nZXQoYCR7YmFzZVVybH0/JHtoYXNoU3RyaW5nfWApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByZVNlYXJjaCgpIHtcclxuICAgIGxldCBoYXNoU3RyaW5nO1xyXG4gICAgY29uc3Qgc2VhcmNoVGV4dCA9IG1vZGVsLmdldChjb25zdHMoJ0tFWV9TRUFSQ0hfVEVSTScpKTtcclxuICAgIGlmIChzZWFyY2hUZXh0ICYmICFfLmlzRW1wdHlTdHJpbmcoc2VhcmNoVGV4dCkpIHtcclxuICAgICAgaGFzaFN0cmluZyA9IF8ubWFwVG9FbmNvZGVkU3RyaW5nKF8uZXh0ZW5kKGNvbnN0cygnUkhTX0RPX1NFQVJDSCcpLCBfLmFkZFBhdGhOYW1lS2V5KHtcclxuICAgICAgICBhcmVhOiB0aGlzLmFyZWEoKSwgdHlwZTogdGhpcy50eXBlKCksIHByb2plY3Q6IHRoaXMucHJvamVjdCgpLCBxdWVzbjogc2VhcmNoVGV4dCxcclxuICAgICAgICBvbGRxdWVzbjogJycsIHF1ZXNuc3luOiAnJ1xyXG4gICAgICB9KVxyXG4gICAgICApXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBtb2RlbC5wdWJsaXNoKGNvbnN0cygnS0VZX1NFQVJDSEVEX1RFUk0nKSwgc2VhcmNoVGV4dCk7XHJcbiAgICAgIG1vZGVsLnB1Ymxpc2goY29uc3RzKCdFVlRfU0VBUkNIX0lOX1BST0dSRVNTJyksIHRydWUpO1xyXG4gICAgICBtb2RlbC5wdWJsaXNoKGNvbnN0cygnS0VZX1NFQVJDSF9QUk9HUkVTUycpLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge3NlYXJjaFRleHQsIGhhc2hTdHJpbmd9O1xyXG4gIH1cclxuXHJcbiAgcG9zdFNlYXJjaChzZWFyY2hUZXh0LCByZXN1bHRzVGV4dCkge1xyXG4gICAgY29uc3Qgc2VhcmNoUmVzdWx0cyA9IEpTT04ucGFyc2UocmVzdWx0c1RleHQpO1xyXG4gICAgaWYgKHNlYXJjaFJlc3VsdHMgJiYgc2VhcmNoUmVzdWx0cy5jbGllbnRJbmRleCkge1xyXG4gICAgICBjb25zdCBoYXNoU3RyaW5nID0gXy5tYXBUb0VuY29kZWRTdHJpbmcoXy5hZGRQYXRoTmFtZUtleSh7YXJlYTogdGhpcy5hcmVhKCksIHR5cGU6IHRoaXMudHlwZSgpLFxyXG4gICAgICBwcm9qZWN0OiB0aGlzLnByb2plY3QoKSwgcXVlc246IHNlYXJjaFRleHQsIGNtZDogJ2NsaWVudGluZGV4J30pKTtcclxuICAgICAgbW9kZWwuc3Vic2NyaWJlT25jZShjb25zdHMoJ0tFWV9TRUFSQ0hfUkVTVUxUUycpLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZVVybCA9IG1vZGVsLmdldChjb25zdHMoJ0tFWV9QVUJMSVNIX0JBU0VfVVJMJykpO1xyXG4gICAgICAgIHJldHVybiBhcGlDbGllbnQucG9zdChgJHtiYXNlVXJsfT8ke2hhc2hTdHJpbmd9YCwgSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgeydDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9KVxyXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ID0gZmFsc2U7fSkuc3VjY2VzcyhmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICAsIHtpbml0RG9uZTogdHJ1ZX0pO1xyXG5cclxuICAgIH1cclxuICAgIG1vZGVsLnB1Ymxpc2goY29uc3RzKCdFVlRfU0VBUkNIX0lOX1BST0dSRVNTJyksIGZhbHNlKTtcclxuICAgIG1vZGVsLnB1Ymxpc2goY29uc3RzKCdLRVlfU0VBUkNIX1BST0dSRVNTJyksIG51bGwpO1xyXG5cclxuICAgIGlmIChzZWFyY2hSZXN1bHRzKSB7XHJcbiAgICAgIGNvbnN0IHNlYXJjaFRvcGljcyA9IHNlYXJjaFJlc3VsdHMudG9waWNzO1xyXG4gICAgICBpZiAoc2VhcmNoVG9waWNzICYmIChzZWFyY2hUb3BpY3MubGVuZ3RoID4gMCkpXHJcbiAgICAgIHtcclxuICAgICAgICB0aGlzLnB1Ymxpc2hUb3BpY1VybHMoc2VhcmNoVG9waWNzLCBzZWFyY2hSZXN1bHRzLnN5bnMsIHNlYXJjaFRleHQpXHJcbiAgICAgICAgdGhpcy5zZXRSZXN1bHRzU3RyaW5nSFRNTChzZWFyY2hUb3BpY3MubGVuZ3RoLFxyXG4gICAgICAgIHdpbmRvdy5fdGV4dFRvSHRtbF9ub25ic3Aoc2VhcmNoVGV4dCkpO1xyXG4gICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgIG1vZGVsLnB1Ymxpc2goY29uc3RzKCdLRVlfU0VBUkNIX1JFU1VMVFMnKSwgc2VhcmNoVG9waWNzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXNlYXJjaFJlc3VsdHMgfHwgIShzZWFyY2hSZXN1bHRzLnRvcGljcyAhPSBudWxsID8gc2VhcmNoUmVzdWx0cy50b3BpY3MubGVuZ3RoIDogdW5kZWZpbmVkKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5kaXNwbGF5TXNnKHdpbmRvdy5nc05vVG9waWNzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRvU2VhcmNoKCkge1xyXG4gICAgbGV0IHJlc3VsdCA9IG1vZGVsLmdldChjb25zdHMoJ0tFWV9QVUJMSVNIX01PREUnKSk7XHJcbiAgICBjb25zdCBiYXNlVXJsID0gbW9kZWwuZ2V0KGNvbnN0cygnS0VZX1BVQkxJU0hfQkFTRV9VUkwnKSk7XHJcbiAgICBpZiAoYmFzZVVybCAmJiAhXy5pc0VtcHR5U3RyaW5nKGJhc2VVcmwpKSB7XHJcbiAgICAgIGNvbnN0IHtzZWFyY2hUZXh0LCBoYXNoU3RyaW5nfSA9IHRoaXMucHJlU2VhcmNoKCk7XHJcblxyXG4gICAgICBhcGlDbGllbnQuZ2V0KGAke2Jhc2VVcmx9PyR7aGFzaFN0cmluZ31gKVxyXG4gICAgICAuZXJyb3IoKCkgPT4gcmVzdWx0ID0gZmFsc2UpLnN1Y2Nlc3MocmVzdWx0c1RleHQgPT4ge1xyXG4gICAgICAgIHRoaXMucG9zdFNlYXJjaChzZWFyY2hUZXh0LCByZXN1bHRzVGV4dCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuXHJcbnJoLnJocyA9IG5ldyBSb2JvSGVscFNlcnZlcigpO1xyXG4iLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5sZXQgeyBfIH0gPSByaDtcclxubGV0IHsgY29uc3RzIH0gPSByaDtcclxubGV0IHsgbW9kZWwgfSA9IHJoO1xyXG5cclxubGV0IGRlZmF1bHRTY3JlZW5zID0ge1xyXG4gIGRlc2t0b3A6IHtcclxuICAgIG1lZGlhX3F1ZXJ5OiAnc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjk2cHgpJ1xyXG4gIH0sXHJcbiAgdGFibGV0OiB7XHJcbiAgICBtZWRpYV9xdWVyeTogJ3NjcmVlbiBhbmQgKG1pbi13aWR0aDogOTQycHgpIGFuZCAobWF4LXdpZHRoOiAxMjk1cHgpJ1xyXG4gIH0sXHJcbiAgcGhvbmU6IHtcclxuICAgIG1lZGlhX3F1ZXJ5OiAnc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5NDFweCknXHJcbiAgfSxcclxuICBpb3M6IHtcclxuICAgIHVzZXJfYWdlbnQ6IC8oaVBhZHxpUGhvbmV8aVBvZCkvZ1xyXG4gIH0sXHJcbiAgaXBhZDoge1xyXG4gICAgdXNlcl9hZ2VudDogLyhpUGFkKS9nXHJcbiAgfSxcclxuICBwcmludDoge1xyXG4gICAgbWVkaWFfcXVlcnk6ICdwcmludCdcclxuICB9XHJcbn07XHJcblxyXG5cclxuY2xhc3MgU2NyZWVuIHtcclxuXHJcbiAgYXR0YWNoZWRLZXkobmFtZSkgeyByZXR1cm4gYCR7Y29uc3RzKCdLRVlfU0NSRUVOJyl9LiR7bmFtZX0uYXR0YWNoZWRgOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5zdWJzY3JpYmVTY3JlZW4gPSB0aGlzLnN1YnNjcmliZVNjcmVlbi5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vblNjcmVlbiA9IHRoaXMub25TY3JlZW4uYmluZCh0aGlzKTtcclxuICAgIHRoaXMub2ZmU2NyZWVuID0gdGhpcy5vZmZTY3JlZW4uYmluZCh0aGlzKTtcclxuICAgIGxldCBkYXRhID0gXy5leHRlbmQoe30sIGRlZmF1bHRTY3JlZW5zLCBtb2RlbC5nZXQoY29uc3RzKCdLRVlfU0NSRUVOJykpKTtcclxuICAgIGlmIChkYXRhKSB7IF8uZWFjaChkYXRhLCB0aGlzLnN1YnNjcmliZVNjcmVlbik7IH1cclxuICB9XHJcblxyXG4gIHN1YnNjcmliZVNjcmVlbihpbmZvLCBuYW1lKSB7XHJcbiAgICBpZiAoaW5mby51c2VyX2FnZW50ICYmXHJcbiAgICAhd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goXy50b1JlZ0V4cChpbmZvLnVzZXJfYWdlbnQpKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5vZmZTY3JlZW4obmFtZSk7XHJcbiAgICB9IGVsc2UgaWYgKGluZm8ubWVkaWFfcXVlcnkpIHtcclxuICAgICAgaWYoICFtb2RlbC5nZXQoY29uc3RzKCdLRVlfSVNfUkVTUE9OU0lWRScpKSl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub25TY3JlZW4oJ2Rlc2t0b3AnKTtcclxuICAgICAgfSBlbHNlIGlmIChyaC5yZXNwb25zaXZlLmlzU3VwcG9ydGVkKCkpIHtcclxuICAgICAgICByZXR1cm4gcmgucmVzcG9uc2l2ZS5hdHRhY2goaW5mby5tZWRpYV9xdWVyeSwgKCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMub25TY3JlZW4obmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICwgKCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMub2ZmU2NyZWVuKG5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT09IG1vZGVsLmdldChjb25zdHMoJ0tFWV9ERUZBVUxUX1NDUkVFTicpKSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9uU2NyZWVuKG5hbWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9mZlNjcmVlbihuYW1lKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMub25TY3JlZW4obmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblNjcmVlbihuYW1lKSB7XHJcbiAgICBsZXQga2V5ID0gdGhpcy5hdHRhY2hlZEtleShuYW1lKTtcclxuICAgIHJldHVybiBtb2RlbC5wdWJsaXNoKGtleSwgdHJ1ZSk7XHJcbiAgfVxyXG4gIFxyXG4gIG9mZlNjcmVlbihuYW1lKSB7XHJcbiAgICBsZXQga2V5ID0gdGhpcy5hdHRhY2hlZEtleShuYW1lKTtcclxuICAgIGlmIChmYWxzZSAhPT0gbW9kZWwuZ2V0KGtleSkpIHsgcmV0dXJuIG1vZGVsLnB1Ymxpc2goa2V5LCBmYWxzZSk7IH1cclxuICB9XHJcbn1cclxuXHJcbm1vZGVsLnN1YnNjcmliZShjb25zdHMoJ0VWVF9XSURHRVRfQkVGT1JFTE9BRCcpLCAoZnVuY3Rpb24oKSB7XHJcbiAgbGV0IHNjcmVlbiA9IG51bGw7XHJcbiAgcmV0dXJuICgpID0+IHNjcmVlbiAhPSBudWxsID8gc2NyZWVuIDogKHNjcmVlbiA9IG5ldyBTY3JlZW4oKSk7XHJcbn0pKClcclxuKTtcclxuXHJcbm1vZGVsLnB1Ymxpc2goY29uc3RzKCdLRVlfU0NSRUVOX05BTUVTJyksIFsnZGVza3RvcCcsICd0YWJsZXQnLCAncGhvbmUnXSk7XHJcbm1vZGVsLnB1Ymxpc2goY29uc3RzKCdLRVlfU0NSRUVOJyksIGRlZmF1bHRTY3JlZW5zKTtcclxubW9kZWwucHVibGlzaChjb25zdHMoJ0tFWV9ERUZBVUxUX1NDUkVFTicpLCAncGhvbmUnKTtcclxuIiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IHsgXyB9ID0gcmg7XHJcblxyXG4vLyBTdG9yYWdlIGNsYXNzIHRvIHBlcnNpc3Qga2V5IHZhbHVlIHBhaXJzIHRvIGxvY2FsREIvY29va2llc1xyXG5jbGFzcyBTdG9yYWdlIHtcclxuXHJcbiAgdG9TdHJpbmcoKSB7IHJldHVybiAnU3RvcmFnZSc7IH1cclxuXHJcbiAgaW5pdChuYW1lc3BhY2UpIHtcclxuICAgIGlmICh0aGlzLm5hbWVzcGFjZSkge1xyXG4gICAgICBpZiAocmguX2RlYnVnICYmICh0aGlzLm5hbWVzcGFjZSAhPT0gbmFtZXNwYWNlKSkge1xyXG4gICAgICAgIHJldHVybiByaC5fZCgnZXJyb3InLCAnU3RvcmFnZScsICdOYW1lc3BhY2UgY2FublxcJ3QgYmUgY2hhbmdlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQganNvblN0cmluZztcclxuICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcbiAgICAgIGlmIChfLmNhblVzZUxvY2FsREIoKSkge1xyXG4gICAgICAgIGpzb25TdHJpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLm5hbWVzcGFjZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHJhd0RhdGEgPSBfLmV4cGxvZGVBbmRNYXAoZG9jdW1lbnQuY29va2llLCAnOycsICc9Jyk7XHJcbiAgICAgICAgaWYgKHJhd0RhdGFbdGhpcy5uYW1lc3BhY2VdKSB7IGpzb25TdHJpbmcgPSB1bmVzY2FwZShyYXdEYXRhW3RoaXMubmFtZXNwYWNlXSk7IH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5zdG9yYWdlTWFwID0ganNvblN0cmluZyA/IEpTT04ucGFyc2UoanNvblN0cmluZykgOiB7fTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzVmFsaWQoKSB7XHJcbiAgICBpZiAocmguX2RlYnVnICYmICF0aGlzLnN0b3JhZ2VNYXApIHtcclxuICAgICAgcmguX2QoJ2Vycm9yJywgJ1N0b3JhZ2UnLCAnTmFtZXNwYWNlIGlzIG5vdCBzZXQgeWV0LicpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICh0aGlzLnN0b3JhZ2VNYXAgIT0gbnVsbCk7XHJcbiAgfVxyXG5cclxuICBwZXJzaXN0KGtleSwgdmFsdWUpIHtcclxuICAgIGlmICh0aGlzLmlzVmFsaWQoKSkge1xyXG4gICAgICB0aGlzLnN0b3JhZ2VNYXBba2V5XSA9IHZhbHVlO1xyXG4gICAgICByZXR1cm4gdGhpcy5kdW1wKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmZXRjaChrZXkpIHsgaWYgKHRoaXMuaXNWYWxpZCgpKSB7IHJldHVybiB0aGlzLnN0b3JhZ2VNYXBba2V5XTsgfSB9XHJcblxyXG4gIGR1bXAoKSB7XHJcbiAgICBpZiAodGhpcy5pc1ZhbGlkKCkpIHtcclxuICAgICAgaWYgKF8uY2FuVXNlTG9jYWxEQigpKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMubmFtZXNwYWNlLCBKU09OLnN0cmluZ2lmeSh0aGlzLnN0b3JhZ2VNYXApKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY29va2llID0gYCR7dGhpcy5uYW1lc3BhY2V9PSR7ZXNjYXBlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RvcmFnZU1hcCkpfWA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnJoLlN0b3JhZ2UgPSBTdG9yYWdlO1xyXG5yaC5zdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcclxuIiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IHsgXyB9ID0gcmg7XHJcbmxldCB7ICQgfSA9IHJoO1xyXG5sZXQgeyBjb25zdHMgfSA9IHJoO1xyXG5cclxuLy9XaWRnZXQgY2xhc3MgZm9yIGFueSBjdXN0b20gYmVoYXZpb3Igb24gZG9tIG5vZGVcclxudmFyIFdpZGdldCA9IChmdW5jdGlvbigpIHtcclxuICBsZXQgX2NvdW50ID0gdW5kZWZpbmVkO1xyXG4gIFdpZGdldCA9IGNsYXNzIFdpZGdldCBleHRlbmRzIHJoLkd1YXJkIHtcclxuICAgIHN0YXRpYyBpbml0Q2xhc3MoKSB7XHJcblxyXG4gICAgICAgLy9wcml2YXRlIHN0YXRpYyB2YXJpYWJsZVxyXG4gICAgICBfY291bnQgPSAwO1xyXG5cclxuICAgICAgdGhpcy5wcm90b3R5cGUuZGF0YUF0dHJzID0gWydyZXBlYXQnLCAnaW5pdCcsICdzdGV4dCcsICdzaHRtbCcsXHJcbiAgICAgICAgJ2NvbnRyb2xsZXInLCAnY2xhc3MnLCAnYW5pbWF0ZScsICdjc3MnLCAnYXR0cicsICd2YWx1ZScsICdjaGVja2VkJyxcclxuICAgICAgICAnaHRtbCcsICd0ZXh0JywgJ2lmJywgJ2hpZGRlbicsICdrZXlkb3duJywgJ2tleXVwJywgJ3Njcm9sbCcsXHJcbiAgICAgICAgJ2NoYW5nZScsICd0b2dnbGUnLCAndG9nZ2xlY2xhc3MnLCAnbWV0aG9kJywgJ3RyaWdnZXInLCAnY2xpY2snLCAnbG9hZCcsXHJcbiAgICAgICAgJ21vdXNlb3ZlcicsICdtb3VzZW91dCcsICdmb2N1cycsICdibHVyJyxcclxuICAgICAgICAnc3dpcGVsZWZ0JywgJ3N3aXBlcmlnaHQnLCAnc3dpcGV1cCcsICdzd2lwZWRvd24nLCAnc2NyZWVudmFyJ107XHJcblxyXG4gICAgICB0aGlzLnByb3RvdHlwZS5kYXRhQXR0ck1ldGhvZHMgPSAoKCkgPT4gV2lkZ2V0LnByb3RvdHlwZS5tYXBEYXRhQXR0ck1ldGhvZHMoV2lkZ2V0LnByb3RvdHlwZS5kYXRhQXR0cnMpKSgpO1xyXG5cclxuICAgICAgLy9hbGwgbGlzdC9kYXRhLXJlYXBlYXQgaXRlbXMgZGF0YS1pIGF0dHJpYnV0ZSBhcmUgc3VwcG9ydFxyXG4gICAgICAvL3RoaXMgaXMgdGhlIGxpc3Qgb2Ygc3BlY2lhbCBsaXN0IGl0ZW0gYXR0cmlidXRlLlxyXG4gICAgICAvL1RoYXQgbWVhbnMgYXR0cmlidXRlcyBsaWtlIGRhdGEtaWhyZWYsIGRhdGEtaWlkIGV0YyB3aWxsXHJcbiAgICAgIC8vIGJlIHN1cHBvcnRlZCB3aXRob3V0IGxpc3RpbmcgaGVyZS5cclxuICAgICAgdGhpcy5wcm90b3R5cGUuZGF0YUlBdHRycyA9IFsnaXRleHQnLCAnaWh0bWwnLCAnaWNsYXNzJywgJ2lyZXBlYXQnXTtcclxuICAgICAgdGhpcy5wcm90b3R5cGUuZGF0YUlBdHRyTWV0aG9kcyA9ICgoKSA9PiBXaWRnZXQucHJvdG90eXBlLm1hcERhdGFBdHRyTWV0aG9kcyhXaWRnZXQucHJvdG90eXBlLmRhdGFJQXR0cnMpKSgpO1xyXG5cclxuICAgICAgdGhpcy5wcm90b3R5cGUuc3VwcG9ydGVkQXJncyA9IFsnbm9kZScsICdtb2RlbCcsICdrZXknLCAndXNlcl92YXJzJyxcclxuICAgICAgICAndGVtcGxhdGVFeHByJywgJ2luY2x1ZGUnXTtcclxuXHJcbiAgICAgIHRoaXMucHJvdG90eXBlLnJlc29sdmVFdmVudFJhd0V4cHIgPSBfLm1lbW9pemUoZnVuY3Rpb24ocmF3RXhwcikge1xyXG4gICAgICAgIGxldCB7ZXhwciwgb3B0c30gPSBfLnJlc29sdmVFeHByT3B0aW9ucyhyYXdFeHByKTtcclxuICAgICAgICBleHByID0gdGhpcy5wYXRjaFJhd0V4cHIoZXhwciwgb3B0cyk7XHJcbiAgICAgICAgbGV0IGV4cHJGbiA9IHRoaXMuX2Z1bmN0aW9uKCdldmVudCwgbm9kZScsIGV4cHIpO1xyXG4gICAgICAgIGxldCBjYWxsYmFjayA9IF8uc2FmZUV4ZWMoZXhwckZuKTtcclxuICAgICAgICBjYWxsYmFjayA9IF8uYXBwbHlDYWxsYmFja09wdGlvbnMoY2FsbGJhY2ssIG9wdHMpO1xyXG4gICAgICAgIHJldHVybiB7Y2FsbGJhY2ssIG9wdHN9O1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMucHJvdG90eXBlLnJlc29sdmVSYXdFeHByV2l0aFZhbHVlID0gXy5tZW1vaXplKGZ1bmN0aW9uKHJhd0V4cHIpIHtcclxuICAgICAgICBsZXQga2V5cyA9IFtdO1xyXG4gICAgICAgIGxldCB7ZXhwciwgb3B0c30gPSBfLnJlc29sdmVFeHByT3B0aW9ucyhyYXdFeHByKTtcclxuICAgICAgICBleHByID0gdGhpcy5wYXRjaFJhd0V4cHIoZXhwciwgb3B0cyk7XHJcbiAgICAgICAgbGV0IGV4cHJGbiA9IHRoaXMuX2V2YWxGdW5jdGlvbignJywgZXhwciwga2V5cyk7XHJcbiAgICAgICAgbGV0IGNhbGxiYWNrID0gXy5zYWZlRXhlYyhleHByRm4pO1xyXG4gICAgICAgIGNhbGxiYWNrID0gXy5hcHBseUNhbGxiYWNrT3B0aW9ucyhjYWxsYmFjaywgb3B0cyk7XHJcbiAgICAgICAgcmV0dXJuIHtjYWxsYmFjaywga2V5cywgb3B0c307XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIEhlbGVwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGZ1bmN0aW9ucyBpbiB3aWRnZXQgIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgICAgdGhpcy5wcm90b3R5cGUucmVzb2x2ZUV4cHJlc3Npb24gPSBfLm1lbW9pemUoZnVuY3Rpb24oZXhwcikge1xyXG4gICAgICAgIGxldCBrZXlzID0gW107XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGV4cHI6IF8ucmVzb2x2ZU1vZGVsS2V5cyhfLnJlc29sdmVOYW1lZFZhcihleHByKSwga2V5cyksXHJcbiAgICAgICAgICBrZXlzXHJcbiAgICAgICAgfTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnByb3RvdHlwZS5fc2FmZUZ1bmN0aW9uID0gXy5tZW1vaXplKGZ1bmN0aW9uKGFyZywgZXhwcikge1xyXG4gICAgICAgIGxldCBmbjtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZm4gPSBuZXcgRnVuY3Rpb24oYXJnLCBleHByKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgZm4gPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgICAgICAgaWYgKHJoLl9kZWJ1ZykgeyByaC5fZCgnZXJyb3InLCBgRXhwcmVzc2lvbjogJHtleHByfWAsIGVycm9yLm1lc3NhZ2UpOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmbjtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnByb3RvdHlwZS5fZXZlbnRDYWxsQmFja0RhdGEgPSB7fTtcclxuXHJcbiAgICAgIHRoaXMucHJvdG90eXBlLnJlc29sdmVBdHRyID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCBjYWNoZSA9IHt9O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihhdHRyc0RhdGEpIHtcclxuICAgICAgICAgIGxldCBwcm9wcyA9IGNhY2hlW2F0dHJzRGF0YV07XHJcbiAgICAgICAgICBpZiAocHJvcHMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwcm9wcyA9IF8ucmVzb2x2ZUF0dHIoYXR0cnNEYXRhKTtcclxuICAgICAgICAgICAgY2FjaGVbYXR0cnNEYXRhXSA9IHByb3BzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHByb3BzO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0pKCk7XHJcblxyXG4gICAgICAvKlxyXG4gICAgICAgKiBUb2dnbGUgbW9kZWwgdmFyaWFibGUgb24gY2xpY2tcclxuICAgICAgICogRXhhbXBsZTogZGF0YS10b2dnbGU9J3Nob3doaWRlJ1xyXG4gICAgICAgKiAgICAgICAgICBkYXRhLXRvZ2dsZT0nc2hvd0xlZnRCYXI6dHJ1ZSdcclxuICAgICAgICogICAgICAgICAgZGF0YS10b2dnbGU9J3Nob3dMZWZ0QmFyOnRydWU7c2hvd1JpZ2h0QmFyOmZhbHNlJ1xyXG4gICAgICAgKi9cclxuICAgICAgdGhpcy5wcm90b3R5cGUuX3RvZ2dsZURhdGEgPSB7fTtcclxuXHJcblxyXG4gICAgICAvKlxyXG4gICAgICAgKiBFeGFtcGxlOiBkYXRhLWxvYWQ9J3Rlc3QuanMnXHJcbiAgICAgICAqICAgICAgICAgIGRhdGEtbG9hZD0ndGVzdC5qczprZXknXHJcbiAgICAgICAqL1xyXG4gICAgICB0aGlzLnByb3RvdHlwZS5fbG9hZERhdGEgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICB0b1N0cmluZygpIHsgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IubmFtZX1fJHt0aGlzLl9jb3VudH1gOyB9XHJcblxyXG4gICAgbWFwRGF0YUF0dHJNZXRob2RzKGF0dHJzKSB7XHJcbiAgICAgIHJldHVybiBfLnJlZHVjZShhdHRycywgZnVuY3Rpb24obWFwLCB2YWx1ZSkge1xyXG4gICAgICAgIG1hcFtgZGF0YS0ke3ZhbHVlfWBdID0gYGRhdGFfJHt2YWx1ZX1gO1xyXG4gICAgICAgIHJldHVybiBtYXA7XHJcbiAgICAgIH1cclxuICAgICAgLCB7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xyXG4gICAgICBzdXBlcigpO1xyXG4gICAgICB0aGlzLnJlUmVuZGVyID0gdGhpcy5yZVJlbmRlci5iaW5kKHRoaXMpO1xyXG4gICAgICBfY291bnQgKz0gMTtcclxuICAgICAgdGhpcy5fY291bnQgPSBfY291bnQ7XHJcbiAgICAgIGZvciAobGV0IGtleSBvZiBBcnJheS5mcm9tKHRoaXMuc3VwcG9ydGVkQXJncykpIHsgaWYgKG9wdHNba2V5XSkgeyB0aGlzW2tleV0gPSBvcHRzW2tleV07IH0gfVxyXG4gICAgICBpZiAodGhpcy50ZW1wbGF0ZUV4cHIgfHwgdGhpcy5pbmNsdWRlKSB7IHRoaXMudXNlVGVtcGxhdGUgPSB0cnVlOyB9XHJcbiAgICAgIHRoaXMucGFyc2VPcHRzKG9wdHMpO1xyXG4gICAgICBpZiAoIXRoaXMubm9kZSkgeyByaC5fZCgnZXJyb3InLCAnY29uc3RydWN0b3InLCBgJHt0aGlzfSBkb2VzIG5vdCBoYXZlIGEgbm9kZWApOyB9XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJ1Y3QoKSB7XHJcbiAgICAgIHRoaXMucmVzZXRDb250ZW50KCk7XHJcbiAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25zKSB7IGZvciAobGV0IHVuc3ViIG9mIEFycmF5LmZyb20odGhpcy5fc3Vic2NyaXB0aW9ucykpIHsgdW5zdWIoKTsgfSB9XHJcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBbXTtcclxuICAgICAgZGVsZXRlIHRoaXMubW9kZWw7XHJcbiAgICAgIHJldHVybiBkZWxldGUgdGhpcy5jb250cm9sbGVycztcclxuICAgIH1cclxuXHJcbiAgICBwYXJzZU9wdHMob3B0cykge1xyXG4gICAgICB0aGlzLm9wdHMgPSBvcHRzO1xyXG4gICAgICBpZiAob3B0cy5hcmcpIHsgdGhpcy5rZXkgPSBvcHRzLmFyZzsgfVxyXG4gICAgICByZXR1cm4gKHRoaXMucGFyc2VQaXBlZEFyZykoKTtcclxuICAgIH1cclxuXHJcbiAgICBwYXJzZVBpcGVkQXJnKCkge1xyXG4gICAgICBsZXQgYXJncyA9IHRoaXMub3B0cy5waXBlZEFyZ3M7XHJcbiAgICAgIGlmIChhcmdzICE9IG51bGwgPyBhcmdzLnNoaWZ0IDogdW5kZWZpbmVkKSB7IC8vZmlyc3QgcGlwZWQgYXJndW1lbnQgaXMgZGVmYXVsdCBNb2RlbFxyXG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsQXJncyA9IF8ucmVzb2x2ZU5pY2VKU09OKGFyZ3Muc2hpZnQoKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQoa2V5KSB7XHJcbiAgICAgIGlmICh0aGlzLm1vZGVsID09IG51bGwpIHsgdGhpcy5tb2RlbCA9IG5ldyByaC5Nb2RlbCgpOyB9XHJcbiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmdldChrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1Ymxpc2goa2V5LCB2YWx1ZSwgb3B0cykge1xyXG4gICAgICBpZiAodGhpcy5tb2RlbCA9PSBudWxsKSB7IHRoaXMubW9kZWwgPSBuZXcgcmguTW9kZWwoKTsgfVxyXG4gICAgICByZXR1cm4gdGhpcy5tb2RlbC5wdWJsaXNoKGtleSwgdmFsdWUsIG9wdHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN1YnNjcmliZShrZXksIGZuLCBvcHRzKSB7XHJcbiAgICAgIGlmIChrZXkgPT0gbnVsbCkgeyByZXR1cm47IH1cclxuICAgICAgaWYgKHRoaXMubW9kZWwgPT0gbnVsbCkgeyB0aGlzLm1vZGVsID0gbmV3IHJoLk1vZGVsKCk7IH1cclxuICAgICAgbGV0IHVuc3ViID0gdGhpcy5tb2RlbC5zdWJzY3JpYmUoa2V5LCBmbiwgb3B0cyk7XHJcbiAgICAgIGlmICh0aGlzLm1vZGVsLmlzR2xvYmFsKCkgfHwgdGhpcy5tb2RlbC5pc0dsb2JhbChrZXkpKSB7IHVuc3ViID0gdGhpcy5zdG9yZVN1YnNjcmliZSh1bnN1Yik7IH1cclxuICAgICAgcmV0dXJuIHVuc3ViO1xyXG4gICAgfVxyXG5cclxuICAgIHN1YnNjcmliZU9ubHkoa2V5LCBmbiwgb3B0cykge1xyXG4gICAgICBpZiAob3B0cyA9PSBudWxsKSB7IG9wdHMgPSB7fTsgfVxyXG4gICAgICBvcHRzWydpbml0RG9uZSddID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaWJlKGtleSwgZm4sIG9wdHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3JlU3Vic2NyaWJlKHVuc3ViKSB7XHJcbiAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25zID09IG51bGwpIHsgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtdOyB9XHJcbiAgICAgIHZhciBuZXdVbnN1YiA9ICgpID0+IHtcclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLl9zdWJzY3JpcHRpb25zLmluZGV4T2YobmV3VW5zdWIpO1xyXG4gICAgICAgIGlmICgoaW5kZXggIT0gbnVsbCkgJiYgKGluZGV4ICE9PSAtMSkpIHtcclxuICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuc3ViKCk7XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMucHVzaChuZXdVbnN1Yik7XHJcbiAgICAgIHJldHVybiBuZXdVbnN1YjtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogZGF0YS1pZj1cIkBzaWRlYmFyX29wZW4gfCBzY3JlZW46IGRlc2t0b3BcIlxyXG4gICAgICogZGF0YS1pZj1cIkBzY3JlZW4uZGVza3RvcC5hdHRhY2hlZCA9PT0gdHJ1ZSAmJiBAc2lkZWJhcl9vcGVuXCJcclxuICAgICAqL1xyXG4gICAgcGF0Y2hTY3JlZW5PcHRpb25zKGV4cHIsIHNjcmVlbikge1xyXG4gICAgICBsZXQgbmFtZXMgPSBfLmlzU3RyaW5nKHNjcmVlbikgPyBbc2NyZWVuXSAgOiBzY3JlZW47XHJcbiAgICAgIGxldCBzY3JlZW5FeHByID0gXy5tYXAobmFtZXMsIG5hbWUgPT4gYEAke2NvbnN0cygnS0VZX1NDUkVFTicpfS4ke25hbWV9LmF0dGFjaGVkYCkuam9pbignIHx8ICcpO1xyXG4gICAgICBpZiAoc2NyZWVuRXhwcikge1xyXG4gICAgICAgIHJldHVybiBgJHtzY3JlZW5FeHByfSA/ICgke2V4cHJ9KSA6IG51bGxgO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBleHByO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcGF0Y2hEaXJPcHRpb25zKGV4cHIsIGRpcikge1xyXG4gICAgICByZXR1cm4gYEAke2NvbnN0cygnS0VZX0RJUicpfSA9PSAnJHtkaXJ9JyA/ICgke2V4cHJ9KSA6IG51bGxgO1xyXG4gICAgfVxyXG5cclxuICAgIHBhdGNoUmF3RXhwck9wdGlvbnMoZXhwciwgb3B0cykge1xyXG4gICAgICBpZiAob3B0cy5zY3JlZW4pIHsgZXhwciA9IHRoaXMucGF0Y2hTY3JlZW5PcHRpb25zKGV4cHIsIG9wdHMuc2NyZWVuKTsgfVxyXG4gICAgICBpZiAob3B0cy5kaXIgIT0gbnVsbCkgeyBleHByID0gdGhpcy5wYXRjaERpck9wdGlvbnMoZXhwciwgb3B0cy5kaXIpOyB9XHJcbiAgICAgIHJldHVybiBleHByO1xyXG4gICAgfVxyXG5cclxuICAgIHBhdGNoUmF3RXhwcihleHByLCBvcHRzKSB7XHJcbiAgICAgIGlmIChleHByICYmIF8uaXNWYWxpZE1vZGVsS2V5KGV4cHIpKSB7IGV4cHIgPSBgQCR7ZXhwcn1gOyB9XHJcbiAgICAgIGlmIChvcHRzKSB7IGV4cHIgPSB0aGlzLnBhdGNoUmF3RXhwck9wdGlvbnMoZXhwciwgb3B0cyk7IH1cclxuICAgICAgcmV0dXJuIGV4cHI7XHJcbiAgICB9XHJcblxyXG4gICAgc3Vic2NyaWJlRXhwcihyYXdFeHByLCBmbiwgc3Vicywgb3B0cykge1xyXG4gICAgICBpZiAocmF3RXhwciA9PSBudWxsKSB7IHJldHVybjsgfVxyXG4gICAgICBsZXQge2NhbGxiYWNrLCBrZXlzLCBleHBPcHRzfSA9IHRoaXMucmVzb2x2ZVJhd0V4cHJXaXRoVmFsdWUocmF3RXhwcik7XHJcbiAgICAgIGxldCBzdWJzRm4gPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgY2FsbGJhY2suY2FsbCh0aGlzKSwgZXhwT3B0cyk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBmb3IgKGxldCBrZXkgb2YgQXJyYXkuZnJvbShrZXlzKSkge1xyXG4gICAgICAgIGxldCB1bnN1YiA9IHRoaXMuc3Vic2NyaWJlT25seShrZXksIHN1YnNGbiwgb3B0cyk7XHJcbiAgICAgICAgaWYgKHN1YnMpIHsgc3Vicy5wdXNoKHVuc3ViKTsgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzdWJzRm4oKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldENvbnRlbnQoKSB7XHJcbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuKSB7IGZvciAobGV0IGNoaWxkIG9mIEFycmF5LmZyb20odGhpcy5jaGlsZHJlbikpIHsgY2hpbGQuZGVzdHJ1Y3QoKTsgfSB9XHJcbiAgICAgIGlmICh0aGlzLmh0bWxTdWJzKSB7IGZvciAobGV0IHVuc3ViIG9mIEFycmF5LmZyb20odGhpcy5odG1sU3VicykpIHsgdW5zdWIoKTsgfSB9XHJcbiAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgcmV0dXJuIHRoaXMuaHRtbFN1YnMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDaGlsZChjaGlsZCkge1xyXG4gICAgICBpZiAodGhpcy5jaGlsZHJlbiA9PSBudWxsKSB7IHRoaXMuY2hpbGRyZW4gPSBbXTsgfVxyXG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBsaW5rTW9kZWwoZnJvbU1vZGVsLCBmcm9tS2V5LCB0b01vZGVsLCB0b0tleSwgb3B0cykge1xyXG4gICAgICBpZiAob3B0cyA9PSBudWxsKSB7IG9wdHMgPSB7fTsgfVxyXG4gICAgICBsZXQgcGFydGlhbCA9IChvcHRzLnBhcnRpYWwgIT0gbnVsbCkgPyBvcHRzLnBhcnRpYWwgOiBmYWxzZTtcclxuICAgICAgcmV0dXJuIHRoaXMuc3RvcmVTdWJzY3JpYmUoZnJvbU1vZGVsLnN1YnNjcmliZShmcm9tS2V5LCB2YWx1ZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3VhcmQoKCgpID0+IHRvTW9kZWwucHVibGlzaCh0b0tleSwgdmFsdWUsIHtzeW5jOiB0cnVlfSkpLCB0aGlzLnRvU3RyaW5nKCkpO1xyXG4gICAgICB9XHJcbiAgICAgICwge3BhcnRpYWx9KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQocGFyZW50KSB7XHJcbiAgICAgIGxldCBpbml0RXhwcjtcclxuICAgICAgaWYgKHRoaXMuaW5pdERvbmUpIHsgcmV0dXJuOyB9XHJcbiAgICAgIHRoaXMuaW5pdERvbmUgPSB0cnVlO1xyXG4gICAgICB0aGlzLmluaXRQYXJlbnQocGFyZW50KTtcclxuICAgICAgKHRoaXMuaW5pdE1vZGVsKSgpO1xyXG5cclxuICAgICAgaWYgKGluaXRFeHByID0gJC5kYXRhc2V0KHRoaXMubm9kZSwgJ2luaXQnKSkge1xyXG4gICAgICAgIHRoaXMuZGF0YV9pbml0KHRoaXMubm9kZSwgaW5pdEV4cHIpO1xyXG4gICAgICAgICQuZGF0YXNldCh0aGlzLm5vZGUsICdpbml0JywgbnVsbCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZU9ubHkodGhpcy5vcHRzLnJlbmRlcmtleSwgdGhpcy5yZVJlbmRlciwge3BhcnRpYWw6IGZhbHNlfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdFBhcmVudChwYXJlbnQpIHtcclxuICAgICAgaWYgKHBhcmVudCkgeyBwYXJlbnQuYWRkQ2hpbGQodGhpcyk7IH1cclxuICAgICAgbGV0IHBhcmVudE1vZGVsID0gKHBhcmVudCAhPSBudWxsID8gcGFyZW50Lm1vZGVsIDogdW5kZWZpbmVkKSB8fCByaC5tb2RlbDtcclxuICAgICAgbGV0IGlucHV0ID0gX19ndWFyZF9fKCQuZGF0YXNldCh0aGlzLm5vZGUsICdpbnB1dCcpLCB4ID0+IHgudHJpbSgpKTtcclxuICAgICAgbGV0IG91dHB1dCA9IF9fZ3VhcmRfXygkLmRhdGFzZXQodGhpcy5ub2RlLCAnb3V0cHV0JyksIHgxID0+IHgxLnRyaW0oKSk7XHJcblxyXG4gICAgICBpZiAoKGlucHV0ID09PSAnLicpIHx8IChvdXRwdXQgPT09ICcuJykpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbCA9IHBhcmVudE1vZGVsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBrZXlzLCBvcHRzO1xyXG4gICAgICAgIGlmIChpbnB1dCB8fCBvdXRwdXQgfHwgdGhpcy5rZXkpIHsgaWYgKHRoaXMubW9kZWwgPT0gbnVsbCkgeyB0aGlzLm1vZGVsID0gbmV3IHJoLk1vZGVsKCk7IH0gfVxyXG4gICAgICAgIGlmIChpbnB1dCkge1xyXG4gICAgICAgICAgKHtrZXlzLCBvcHRzfSA9IF8ucmVzb2x2ZUlucHV0S2V5cyhpbnB1dCkpO1xyXG4gICAgICAgICAgXy5lYWNoKGtleXMsIGZ1bmN0aW9uKHBhcmVudEtleSwga2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnRLZXkgPT0gbnVsbCkgeyBwYXJlbnRLZXkgPSBrZXk7IH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlua01vZGVsKHBhcmVudE1vZGVsLCBwYXJlbnRLZXksIHRoaXMubW9kZWwsIGtleSwgb3B0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3V0cHV0KSB7XHJcbiAgICAgICAgICAoe2tleXMsIG9wdHN9ID0gXy5yZXNvbHZlSW5wdXRLZXlzKG91dHB1dCkpO1xyXG4gICAgICAgICAgcmV0dXJuIF8uZWFjaChrZXlzLCBmdW5jdGlvbihwYXJlbnRLZXksIGtleSkge1xyXG4gICAgICAgICAgICBpZiAocGFyZW50S2V5ID09IG51bGwpIHsgcGFyZW50S2V5ID0ga2V5OyB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpbmtNb2RlbCh0aGlzLm1vZGVsLCBrZXksIHBhcmVudE1vZGVsLCBwYXJlbnRLZXksIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0TW9kZWwoKSB7XHJcbiAgICAgIGlmICh0aGlzLm1vZGVsQXJncykge1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLm1vZGVsQXJncywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHVibGlzaChrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLCB0aGlzKTtcclxuICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMubW9kZWxBcmdzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdFVJKCkge1xyXG4gICAgICBpZiAocmguX2RlYnVnKSB7XHJcbiAgICAgICAgbGV0IGxvYWRlZFdpZGdldHMgPSAkLmRhdGFzZXQodGhpcy5ub2RlLCAnbG9hZGVkJyk7XHJcbiAgICAgICAgaWYgKGxvYWRlZFdpZGdldHMpIHsgbG9hZGVkV2lkZ2V0cyA9IGAke2xvYWRlZFdpZGdldHN9OyR7dGhpc31gOyB9XHJcbiAgICAgICAgJC5kYXRhc2V0KHRoaXMubm9kZSwgJ2xvYWRlZCcsIGxvYWRlZFdpZGdldHMgfHwgdGhpcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJC5kYXRhc2V0KHRoaXMubm9kZSwgJ2xvYWRlZCcsIHRydWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy50ZW1wbGF0ZUV4cHIpIHsgKHRoaXMuc3Vic2NyaWJlVGVtcGxhdGVFeHByKSgpOyB9XHJcbiAgICAgIGlmICh0aGlzLmluY2x1ZGUpIHsgKHRoaXMuc3Vic2NyaWJlSW5jbHVkZVBhdGgpKCk7IH1cclxuICAgICAgaWYgKHRoaXMudHBsTm9kZSA9PSBudWxsKSB7IHRoaXMudHBsTm9kZSA9IHRoaXMubm9kZTsgfVxyXG4gICAgICByZXR1cm4gKHRoaXMucmVzZXRDb250ZW50KSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN1YnNjcmliZVRlbXBsYXRlRXhwcigpIHtcclxuICAgICAgbGV0IGNvbnN0cnVjdGluZyA9IHRydWU7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlRXhwcih0aGlzLnRlbXBsYXRlRXhwciwgZnVuY3Rpb24odGVtcGxhdGUpIHtcclxuICAgICAgICB0aGlzLnRwbE5vZGUgPSAkLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRlbXBsYXRlKS5maXJzdENoaWxkO1xyXG4gICAgICAgIGlmICghY29uc3RydWN0aW5nKSB7IHJldHVybiB0aGlzLnJlUmVuZGVyKHRydWUpOyB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdHJ1Y3RpbmcgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVFeHByID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHN1YnNjcmliZUluY2x1ZGVQYXRoKCkge1xyXG4gICAgICBfLnJlcXVpcmUodGhpcy5pbmNsdWRlLCB0ZW1wbGF0ZSA9PiB0aGlzLnNldFRlbXBsYXRlKHRlbXBsYXRlKSk7XHJcbiAgICAgIHJldHVybiB0aGlzLmluY2x1ZGUgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGVtcGxhdGUodGVtcGxhdGUpIHtcclxuICAgICAgdGhpcy51c2VUZW1wbGF0ZSA9IHRydWU7XHJcbiAgICAgIHRoaXMudHBsTm9kZSA9ICQuY3JlYXRlRWxlbWVudCgnZGl2JywgdGVtcGxhdGUpLmZpcnN0Q2hpbGQ7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlUmVuZGVyKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlUmVuZGVyKHJlbmRlcikgeyBpZiAoKHJlbmRlciAhPSBudWxsKSAmJiB0aGlzLnRwbE5vZGUpIHsgcmV0dXJuIHRoaXMucmVuZGVyKCk7IH0gfVxyXG5cclxuICAgIHByZVJlbmRlcigpIHtcclxuICAgICAgbGV0IG9sZE5vZGU7XHJcbiAgICAgIGlmICh0aGlzLnVzZVRlbXBsYXRlKSB7XHJcbiAgICAgICAgb2xkTm9kZSA9IHRoaXMubm9kZTtcclxuICAgICAgICB0aGlzLm5vZGUgPSB0aGlzLnRwbE5vZGUuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBvbGROb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RSZW5kZXIob2xkTm9kZSkge1xyXG4gICAgICBpZiAob2xkTm9kZSAmJiBvbGROb2RlLnBhcmVudE5vZGUpIHtcclxuICAgICAgICByZXR1cm4gb2xkTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0aGlzLm5vZGUsIG9sZE5vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWx0ZXJOb2RlQ29udGVudCgpIHt9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICBpZiAocmguX3Rlc3QpIHsgcmgubW9kZWwucHVibGlzaChgdGVzdC4ke3RoaXN9LnJlbmRlci5iZWdpbmAsIF8udGltZSgpKTsgfVxyXG4gICAgICB0aGlzLmluaXRVSSgpO1xyXG4gICAgICBsZXQgb2xkTm9kZSA9IHRoaXMucHJlUmVuZGVyKCk7XHJcbiAgICAgIHRoaXMubm9kZUhvbGRlciA9IG5ldyByaC5Ob2RlSG9sZGVyKFt0aGlzLm5vZGVdKTtcclxuICAgICAgKHRoaXMuYWx0ZXJOb2RlQ29udGVudCkoKTtcclxuICAgICAgdGhpcy5yZXNvbHZlRGF0YUF0dHJzKHRoaXMubm9kZSk7XHJcbiAgICAgIF8ubG9hZERhdGFIYW5kbGVycyh0aGlzLm5vZGUsIHRoaXMpO1xyXG4gICAgICB0aGlzLnBvc3RSZW5kZXIob2xkTm9kZSk7XHJcbiAgICAgIGlmIChyaC5fdGVzdCkgeyByZXR1cm4gcmgubW9kZWwucHVibGlzaChgdGVzdC4ke3RoaXN9LnJlbmRlci5lbmRgLCBfLnRpbWUoKSk7IH1cclxuICAgIH1cclxuXHJcbiAgICBpc1Zpc2libGUoKSB7IHJldHVybiB0aGlzLm5vZGVIb2xkZXIuaXNWaXNpYmxlKCk7IH1cclxuXHJcbiAgICBzaG93KCkgeyByZXR1cm4gdGhpcy5ub2RlSG9sZGVyLnNob3coKTsgfVxyXG5cclxuICAgIGhpZGUoKSB7IHJldHVybiB0aGlzLm5vZGVIb2xkZXIuaGlkZSgpOyB9XHJcblxyXG4gICAgdG9nZ2xlKCkgeyBpZiAodGhpcy5pc1Zpc2libGUoKSkgeyByZXR1cm4gdGhpcy5oaWRlKCk7IH0gZWxzZSB7IHJldHVybiB0aGlzLnNob3coKTsgfSB9XHJcblxyXG4gICAgaXNXaWRnZXROb2RlKG5vZGUpIHsgcmV0dXJuICQuZGF0YXNldChub2RlLCAncmh3aWRnZXQnKTsgfVxyXG5cclxuICAgIGlzRGVzY2VuZGVudChub2RlKSB7XHJcbiAgICAgIGxldCBuZXN0ZWRXaWRnZXQ7XHJcbiAgICAgIGxldCBjaGlsZCA9IG5vZGU7XHJcbiAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgbGV0IHBhcmVudCA9IGNoaWxkLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKCFwYXJlbnQpIHsgYnJlYWs7IH1cclxuICAgICAgICBpZiAodGhpcy5pc1dpZGdldE5vZGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICBuZXN0ZWRXaWRnZXQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZSA9PT0gcGFyZW50KSB7IGJyZWFrOyB9XHJcbiAgICAgICAgY2hpbGQgPSBwYXJlbnQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIChuZXN0ZWRXaWRnZXQgIT0gbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgZWFjaENoaWxkKHNlbGVjdG9yLCBmbikge1xyXG4gICAgICByZXR1cm4gJC5lYWNoQ2hpbGQodGhpcy5ub2RlLCBzZWxlY3RvciwgZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0Rlc2NlbmRlbnQobm9kZSkpIHsgcmV0dXJuIGZuLmNhbGwodGhpcywgbm9kZSk7IH1cclxuICAgICAgfVxyXG4gICAgICAsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGVhY2hEYXRhTm9kZShkYXRhQXR0ciwgZm4pIHtcclxuICAgICAgcmV0dXJuICQuZWFjaERhdGFOb2RlKHRoaXMubm9kZSwgZGF0YUF0dHIsIGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRGVzY2VuZGVudChub2RlKSkgeyByZXR1cm4gZm4uY2FsbCh0aGlzLCBub2RlLCB2YWx1ZSk7IH1cclxuICAgICAgfVxyXG4gICAgICAsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYXZlcnNlTm9kZShub2RlLCBwcmUsIHBvc3QpIHtcclxuICAgICAgcmV0dXJuICQudHJhdmVyc2VOb2RlKG5vZGUsIHByZSwgcG9zdCwgZnVuY3Rpb24oY2hpbGQpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuaXNEZXNjZW5kZW50KGNoaWxkKTtcclxuICAgICAgfVxyXG4gICAgICAsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc29sdmVEYXRhQXR0cnMocG5vZGUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudHJhdmVyc2VOb2RlKHBub2RlLCBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgbGV0IHJlcGVhdFZhbDtcclxuICAgICAgICBpZiAoXy5pc1N0cmluZyhyZXBlYXRWYWwgPSAkLmRhdGFzZXQobm9kZSwgJ3JlcGVhdCcpKSkge1xyXG4gICAgICAgICAgdGhpcy5kYXRhX3JlcGVhdChub2RlLCByZXBlYXRWYWwpO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkLmVhY2hBdHRyaWJ1dGVzKG5vZGUsIGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGxldCBmbk5hbWUgPSB0aGlzLmRhdGFBdHRyTWV0aG9kc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKGZuTmFtZSAmJiB2YWx1ZSkgeyByZXR1cm4gdGhpc1tmbk5hbWVdLmNhbGwodGhpcywgbm9kZSwgdmFsdWUpOyB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAsIHRoaXMpO1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXNvbHZlUmVwZWF0RXhwcihyYXdFeHByKSB7XHJcbiAgICAgIGxldCB2YWx1ZXMgPSBfLnJlc29sdmVQaXBlZEV4cHJlc3Npb24ocmF3RXhwcik7XHJcbiAgICAgIGxldCBvcHRzID0gdmFsdWVzWzFdICYmIF8ucmVzb2x2ZU5pY2VKU09OKHZhbHVlc1sxXSk7XHJcbiAgICAgIGxldCBkYXRhID0gXy5yZXNvbHZlTG9vcEV4cHIodmFsdWVzWzBdKTtcclxuICAgICAgaWYgKG9wdHMgIT0gbnVsbCA/IG9wdHMuZmlsdGVyIDogdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZGF0YVsnZmlsdGVyJ10gPSB0aGlzLl9ldmFsRnVuY3Rpb24oJ2l0ZW0sIGluZGV4Jywgb3B0cy5maWx0ZXIpO1xyXG4gICAgICB9XHJcbiAgICAgIGRhdGFbJ3N0ZXAnXSA9IChvcHRzICE9IG51bGwgPyBvcHRzLnN0ZXAgOiB1bmRlZmluZWQpIHx8IDE7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiB2YXJOYW1lOiBFeDogI3tAZGF0YS50aXRsZX0gbWVhbnMgaXRlbS5kYXRhLnRpdGxlXHJcbiAgICAgKi9cclxuICAgIHJlc29sdmVSZXBlYXRWYXIoZXhwciwgaXRlbSwgaW5kZXgsIGNhY2hlLCBub2RlKSB7XHJcbiAgICAgIHJldHVybiBjYWNoZVtleHByXSA9IGNhY2hlW2V4cHJdIHx8ICgoKSA9PiB7IHN3aXRjaCAoZXhwcikge1xyXG4gICAgICAgIGNhc2UgJ0BpbmRleCc6IHJldHVybiBpbmRleDtcclxuICAgICAgICBjYXNlICdAc2l6ZSc6IHJldHVybiBpdGVtLmxlbmd0aDtcclxuICAgICAgICBjYXNlICd0aGlzJzogcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGlmIChfLmlzVmFsaWRNb2RlbEtleShleHByKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gXy5nZXQoaXRlbSwgZXhwcik7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVJRGF0YUV4cHIobm9kZSwgZXhwciwgaXRlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9IH0pKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzb2x2ZUVuY2xvc2VkVmFyKHZhbHVlLCBpdGVtLCBpbmRleCwgaXRlbUNhY2hlLCBub2RlKSB7XHJcbiAgICAgIHJldHVybiBfLnJlc29sdmVFbmNsb3NlZFZhcih2YWx1ZSwgZnVuY3Rpb24odmFyTmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZXBlYXRWYXIodmFyTmFtZSwgaXRlbSwgaW5kZXgsIGl0ZW1DYWNoZSwgbm9kZSk7XHJcbiAgICAgIH1cclxuICAgICAgLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVFbmNsb3NlVmFyKG5hbWUsIHZhbHVlLCBpdGVtLCBpbmRleCwgaXRlbUNhY2hlLCBub2RlKSB7XHJcbiAgICAgIGxldCBuZXdWYWx1ZSA9IHRoaXMucmVzb2x2ZUVuY2xvc2VkVmFyKHZhbHVlLCBpdGVtLCBpbmRleCwgaXRlbUNhY2hlLCBub2RlKTtcclxuICAgICAgaWYgKG5ld1ZhbHVlID09PSAnJykge1xyXG4gICAgICAgICQucmVtb3ZlQXR0cmlidXRlKG5vZGUsIG5hbWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICQuc2V0QXR0cmlidXRlKG5vZGUsIG5hbWUsIG5ld1ZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmV3VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlV2lkZ2V0RW5jbG9zZVZhcihpdGVtLCBpbmRleCwgaXRlbUNhY2hlLCBub2RlKSB7XHJcbiAgICAgIHJldHVybiBfLmVhY2goWydyaHdpZGdldCcsICdpbnB1dCcsICdvdXRwdXQnLCAnaW5pdCddLCBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9ICQuZGF0YXNldChub2RlLCBuYW1lKSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlRW5jbG9zZVZhcihgZGF0YS0ke25hbWV9YCwgdmFsdWUsIGl0ZW0sIGluZGV4LCBpdGVtQ2FjaGUsIG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzUmVwZWF0KG5vZGUpIHtcclxuICAgICAgcmV0dXJuICQuZGF0YXNldChub2RlLCAncmVwZWF0JykgfHwgJC5kYXRhc2V0KG5vZGUsICdpcmVwZWF0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzb2x2ZU5lc3RlZFJlcGVhdChub2RlLCBpdGVtLCBpbmRleCwgaXRlbUNhY2hlKSB7XHJcbiAgICAgIHJldHVybiBfLmVhY2goWydyZXBlYXQnLCAnaXJlcGVhdCddLCBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9ICQuZGF0YXNldChub2RlLCBuYW1lKSkge1xyXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLnVwZGF0ZUVuY2xvc2VWYXIoYGRhdGEtJHtuYW1lfWAsIHZhbHVlLFxyXG4gICAgICAgICAgICBpdGVtLCBpbmRleCwgaXRlbUNhY2hlLCBub2RlKTtcclxuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJycpIHsgcmV0dXJuICh0eXBlb2YgdGhpc1tgZGF0YV8ke25hbWV9YF0gPT09ICdmdW5jdGlvbicgPyB0aGlzW2BkYXRhXyR7bmFtZX1gXShub2RlLCB2YWx1ZSwgaXRlbSwgaW5kZXgpIDogdW5kZWZpbmVkKTsgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc29sdmVJdGVtSW5kZXgocG5vZGUsIGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgIGlmICghcG5vZGUuY2hpbGRyZW4pIHsgcmV0dXJuOyB9XHJcbiAgICAgIGxldCBpdGVtQ2FjaGUgPSB7fTtcclxuICAgICAgcmV0dXJuICQudHJhdmVyc2VOb2RlKHBub2RlLCBub2RlID0+IHtcclxuICAgICAgICBpZiAoKG5vZGUgIT09IHBub2RlKSAmJiAkLmRhdGFzZXQobm9kZSwgJ3Jod2lkZ2V0JykpIHtcclxuICAgICAgICAgIHRoaXMudXBkYXRlV2lkZ2V0RW5jbG9zZVZhcihpdGVtLCBpbmRleCwgaXRlbUNhY2hlLCBub2RlKTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzUmVwZWF0KG5vZGUpKSB7XHJcbiAgICAgICAgICB0aGlzLnJlc29sdmVOZXN0ZWRSZXBlYXQobm9kZSwgaXRlbSwgaW5kZXgsIGl0ZW1DYWNoZSk7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmVhY2hBdHRyaWJ1dGVzKG5vZGUsIGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBhdHRyc0luZm8pIHtcclxuICAgICAgICAgIGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBsZXQgZm5OYW1lO1xyXG4gICAgICAgICAgICBpZiAoMCA9PT0gbmFtZS5zZWFyY2goJ2RhdGEtJykpIHtcclxuICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMudXBkYXRlRW5jbG9zZVZhcihuYW1lLCB2YWx1ZSxcclxuICAgICAgICAgICAgICAgIGl0ZW0sIGluZGV4LCBpdGVtQ2FjaGUsIG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZm5OYW1lID0gdGhpcy5kYXRhSUF0dHJNZXRob2RzW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXNbZm5OYW1lXS5jYWxsKHRoaXMsIG5vZGUsIHZhbHVlLCBpdGVtLCBpbmRleCwgYXR0cnNJbmZvKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVtb3ZlQXR0cmlidXRlKG5vZGUsIG5hbWUpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICgwID09PSBuYW1lLnNlYXJjaCgnZGF0YS1pLScpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5kYXRhX2lIYW5kbGVyKG5vZGUsIHZhbHVlLCBpdGVtLCBpbmRleCwgbmFtZS5zdWJzdHJpbmcoNykpO1xyXG4gICAgICAgICAgICAgIHJldHVybiAkLnJlbW92ZUF0dHJpYnV0ZShub2RlLCBuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAsIHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBndWFyZChmbiwgZ3VhcmROYW1lKSB7XHJcbiAgICAgIGlmIChndWFyZE5hbWUgPT0gbnVsbCkgeyBndWFyZE5hbWUgPSAndWknOyB9XHJcbiAgICAgIHJldHVybiBzdXBlci5ndWFyZChmbiwgZ3VhcmROYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBkYXRhX3JlcGVhdChub2RlLCByYXdFeHByKSB7XHJcbiAgICAgICQuZGF0YXNldChub2RlLCAncmVwZWF0JywgbnVsbCk7XHJcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXJlcGVhdCcpO1xyXG4gICAgICBsZXQgb3B0cyA9IHRoaXMucmVzb2x2ZVJlcGVhdEV4cHIocmF3RXhwcik7XHJcblxyXG4gICAgICBsZXQgbm9kZUhvbGRlciA9IG5ldyByaC5Ob2RlSG9sZGVyKFtub2RlXSk7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlRGF0YUV4cHIob3B0cy5leHByLCByZXN1bHQgPT4ge1xyXG4gICAgICAgIC8vVE9ETyB1c3ViIG9sZCBzdWJzIHVzaW5nIHN0YWNrIG9mIGh0bWwgc3Vic1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXBlYXROb2Rlcyhub2RlSG9sZGVyLCByZXN1bHQsIG9wdHMsIG5vZGUpO1xyXG4gICAgICB9XHJcbiAgICAgICwge3BhcnRpYWw6IGZhbHNlfSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vaWYgc3RhdGVtZW50IGZvciBkYXRhLXJlcGVhdCBsaWtlIHN0cnVjdHVyZVxyXG4gICAgcmVzb2x2ZV9yaWYobm9kZSwgaXRlbSwgaW5kZXgpIHtcclxuICAgICAgbGV0IGNhbGxiYWNrLCBjbG9uZU5vZGUsIHJhd0V4cHI7XHJcbiAgICAgIGlmIChyYXdFeHByID0gJC5kYXRhc2V0KG5vZGUsICdyaWYnKSkge1xyXG4gICAgICAgIGNhbGxiYWNrID0gdGhpcy5fZXZhbEZ1bmN0aW9uKCdpdGVtLCBpbmRleCcsIHJhd0V4cHIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWNhbGxiYWNrIHx8IGNhbGxiYWNrLmNhbGwodGhpcywgaXRlbSwgaW5kZXgpKSB7XHJcbiAgICAgICAgY2xvbmVOb2RlID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICQuZGF0YXNldChjbG9uZU5vZGUsICdyaWYnLCBudWxsKTtcclxuICAgICAgICBmb3IgKGxldCBjaGlsZCBvZiBBcnJheS5mcm9tKG5vZGUuY2hpbGROb2RlcykpIHtcclxuICAgICAgICAgIGxldCBjbG9uZUNoaWxkID0gdGhpcy5yZXNvbHZlX3JpZihjaGlsZCwgaXRlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgaWYgKGNsb25lQ2hpbGQpIHsgY2xvbmVOb2RlLmFwcGVuZENoaWxkKGNsb25lQ2hpbGQpOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBjbG9uZU5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgX2Z1bmN0aW9uKGFyZywgZXhwciwga2V5cykge1xyXG4gICAgICBsZXQgZGF0YSA9IHRoaXMucmVzb2x2ZUV4cHJlc3Npb24oZXhwcik7XHJcbiAgICAgIGlmIChrZXlzKSB7IGZvciAobGV0IGtleSBvZiBBcnJheS5mcm9tKGRhdGEua2V5cykpIHsga2V5cy5wdXNoKGtleSk7IH0gfVxyXG4gICAgICByZXR1cm4gdGhpcy5fc2FmZUZ1bmN0aW9uKGFyZywgZGF0YS5leHByKTtcclxuICAgIH1cclxuXHJcbiAgICBfZXZhbEZ1bmN0aW9uKGFyZywgZXhwciwga2V5cykge1xyXG4gICAgICByZXR1cm4gdGhpcy5fZnVuY3Rpb24oYXJnLCBgcmV0dXJuICR7ZXhwcn07YCwga2V5cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIGxpc3Qgb3IgcmVwZWF0IGl0ZW1zIGRhdGEgYXR0cmlidXRlcyBoYW5kbGluZyAjIyMjIyMjIyMjIyNcclxuICAgIF9zZXRMb29wVmFyKG9wdHMsIGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgIGxldCBvbGRWYWx1ZSA9IHt9O1xyXG4gICAgICBpZiAob3B0cy5pdGVtKSB7XHJcbiAgICAgICAgb2xkVmFsdWVbJ2l0ZW0nXSA9IHRoaXMudXNlcl92YXJzW29wdHMuaXRlbV07XHJcbiAgICAgICAgdGhpcy51c2VyX3ZhcnNbb3B0cy5pdGVtXSA9IGl0ZW07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG9wdHMuaW5kZXgpIHtcclxuICAgICAgICBvbGRWYWx1ZVsnaW5kZXgnXSA9IHRoaXMudXNlcl92YXJzW29wdHMuaW5kZXhdO1xyXG4gICAgICAgIHRoaXMudXNlcl92YXJzW29wdHMuaW5kZXhdID0gaW5kZXg7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG9sZFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIF9yZXBlYXROb2Rlcyhub2RlSG9sZGVyLCByZXN1bHQsIG9wdHMsIHRtcGxOb2RlKSB7XHJcbiAgICAgIGxldCBjbG9uZU5vZGU7XHJcbiAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkgeyByZXN1bHQgPSBbXTsgfVxyXG4gICAgICBpZiAodGhpcy51c2VyX3ZhcnMgPT0gbnVsbCkgeyB0aGlzLnVzZXJfdmFycyA9IHt9OyB9XHJcbiAgICAgIGxldCBuZXdOb2RlcyA9IFtdO1xyXG4gICAgICBsZXQge2ZpbHRlciwgc3RlcH0gPSBvcHRzO1xyXG4gICAgICBmb3IgKGxldCBzdGVwMSA9IHN0ZXAsIGFzYyA9IHN0ZXAxID4gMCwgaW5kZXggPSBhc2MgPyAwIDogcmVzdWx0Lmxlbmd0aCAtIDE7IGFzYyA/IGluZGV4IDwgcmVzdWx0Lmxlbmd0aCA6IGluZGV4ID49IDA7IGluZGV4ICs9IHN0ZXAxKSB7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSByZXN1bHRbaW5kZXhdO1xyXG4gICAgICAgIGxldCBvbGRWYWx1ZSA9IHRoaXMuX3NldExvb3BWYXIob3B0cywgaXRlbSwgaW5kZXgpO1xyXG4gICAgICAgIGlmICghZmlsdGVyIHx8IGZpbHRlci5jYWxsKHRoaXMsIGl0ZW0sIGluZGV4KSkge1xyXG4gICAgICAgICAgaWYgKGNsb25lTm9kZSA9IHRoaXMucmVzb2x2ZV9yaWYodG1wbE5vZGUsIGl0ZW0sIGluZGV4KSkge1xyXG4gICAgICAgICAgICBuZXdOb2Rlcy5wdXNoKGNsb25lTm9kZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZUl0ZW1JbmRleChjbG9uZU5vZGUsIGl0ZW0sIGluZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlRGF0YUF0dHJzKGNsb25lTm9kZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3NldExvb3BWYXIob3B0cywgb2xkVmFsdWUuaXRlbSwgb2xkVmFsdWUuaW5kZXgpO1xyXG4gICAgICB9XHJcblxyXG5cclxuICAgICAgaWYgKG5ld05vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGxldCB0ZW1wTm9kZSA9IHRtcGxOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgJC5hZGRDbGFzcyh0ZW1wTm9kZSwgJ3JoLWhpZGUnKTtcclxuICAgICAgICBuZXdOb2Rlcy5wdXNoKHRlbXBOb2RlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG5vZGVIb2xkZXIudXBkYXRlTm9kZXMobmV3Tm9kZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGRhdGFfaXJlcGVhdChub2RlLCByYXdFeHByLCBpdGVtLCBpbmRleCwgYXR0cnNJbmZvKSB7XHJcbiAgICAgICQuZGF0YXNldChub2RlLCAnaXJlcGVhdCcsIG51bGwpO1xyXG4gICAgICBsZXQgb3B0cyA9IHRoaXMucmVzb2x2ZVJlcGVhdEV4cHIocmF3RXhwcik7XHJcbiAgICAgIGxldCBub2RlSG9sZGVyID0gbmV3IHJoLk5vZGVIb2xkZXIoW25vZGVdKTtcclxuICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuc3Vic2NyaWJlSURhdGFFeHByKG5vZGUsIG9wdHMuZXhwciwgaXRlbSwgaW5kZXgpO1xyXG4gICAgICB0aGlzLl9yZXBlYXROb2Rlcyhub2RlSG9sZGVyLCByZXN1bHQsIG9wdHMsIG5vZGUpO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogaGVscGVyIG1ldGhvZCBmb3IgcihyZXBlYXQpIGF0dHJpYnV0ZXNcclxuICAgICAqL1xyXG4gICAgc3Vic2NyaWJlSURhdGFFeHByKG5vZGUsIHJhd0V4cHIsIGl0ZW0sIGluZGV4LCBhdHRyc0luZm8pIHtcclxuICAgICAgbGV0IGV4cHJGbiA9IHRoaXMuX2V2YWxGdW5jdGlvbignaXRlbSwgaW5kZXgsIG5vZGUnLCByYXdFeHByKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gZXhwckZuLmNhbGwodGhpcywgaXRlbSwgaW5kZXgsIG5vZGUpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGlmIChyaC5fZGVidWcpIHsgcmV0dXJuIHJoLl9kKCdlcnJvcicsIGBpRXhwcmVzc2lvbjogJHtyYXdFeHByfWAsIGVycm9yLm1lc3NhZ2UpOyB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogZ2V0IHRoZSBrZXkgdmFsdWUgYW5kIGZpbGxzIGl0cyB2YWx1ZSBhcyB0ZXh0IGNvbnRlbnRcclxuICAgICAqIEV4YW1wbGU6IDxhIGRhdGEtaXRleHQ9XCJpdGVtLnRpdGxlXCI+dGVtcCB2YWx1ZTwvYT5cclxuICAgICAqICAgICAgICAgIDxkaXYgZGF0YS1pdGV4dD1cIkBrZXlcIj50ZW1wIHZhbHVlPC9kaXY+XHJcbiAgICAgKi9cclxuICAgIGRhdGFfaXRleHQobm9kZSwgcmF3RXhwciwgaXRlbSwgaW5kZXgsIGF0dHJzSW5mbykge1xyXG4gICAgICAkLnRleHRDb250ZW50KG5vZGUsIHRoaXMuc3Vic2NyaWJlSURhdGFFeHByKG5vZGUsIHJhd0V4cHIsIGl0ZW0sIGluZGV4KSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBnZXQgdGhlIGtleSB2YWx1ZSBhbmQgZmlsbHMgaXRzIHZhbHVlIGFzIEhUTUwgY29udGVudFxyXG4gICAgICogRXhhbXBsZTogPGEgZGF0YS1paHRtbD1cIml0ZW0uZGF0YVwiPnRlbXAgdmFsdWU8L2E+XHJcbiAgICAgKiAgICAgICAgICA8ZGl2IGRhdGEtaWh0bWw9XCJAa2V5XCI+dGVtcCB2YWx1ZTwvZGl2PlxyXG4gICAgICovXHJcbiAgICBkYXRhX2lodG1sKG5vZGUsIHJhd0V4cHIsIGl0ZW0sIGluZGV4LCBhdHRyc0luZm8pIHtcclxuICAgICAgbm9kZS5pbm5lckhUTUwgPSB0aGlzLnN1YnNjcmliZUlEYXRhRXhwcihub2RlLCByYXdFeHByLCBpdGVtLCBpbmRleCk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBnZXQgdGhlIGtleSB2YWx1ZSBhbmQgZmlsbHMgaXRzIHZhbHVlIGFzIHRleHQgY29udGVudFxyXG4gICAgICogRXhhbXBsZTogPGEgZGF0YS1pY2xhc3M9XCJpdGVtLmRhdGE/J2VuYWJsZWQnOidkaXNhYmxlZCdcIj50ZW1wIHZhbHVlPC9hPlxyXG4gICAgICogICAgICAgICAgPGRpdiBkYXRhLWljbGFzcz1cIkBrZXlcIj50ZW1wIHZhbHVlPC9kaXY+XHJcbiAgICAgKi9cclxuICAgIGRhdGFfaWNsYXNzKG5vZGUsIHJhd0V4cHIsIGl0ZW0sIGluZGV4LCBhdHRyc0luZm8pIHtcclxuICAgICAgbGV0IGNsYXNzTmFtZSA9IHRoaXMuc3Vic2NyaWJlSURhdGFFeHByKG5vZGUsIHJhd0V4cHIsIGl0ZW0sIGluZGV4KTtcclxuICAgICAgaWYgKGNsYXNzTmFtZSkgeyAkLmFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7IH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIGdldCB0aGUga2V5IHZhbHVlIGFuZCBmaWxscyBpdHMgdmFsdWUgYXMgdGV4dCBjb250ZW50XHJcbiAgICAgKiBFeGFtcGxlOiA8YSBkYXRhLWlocmVmPVwiaXRlbS51cmxcIj50ZW1wIHZhbHVlPC9hPlxyXG4gICAgICogICAgICAgICAgPGRpdiBkYXRhLWlpZD1cIml0ZW0uaWRcIj50ZW1wIHZhbHVlPC9kaXY+XHJcbiAgICAgKi9cclxuICAgIGRhdGFfaUhhbmRsZXIobm9kZSwgcmF3RXhwciwgaXRlbSwgaW5kZXgsIGF0dHJOYW1lKSB7XHJcbiAgICAgIGxldCBhdHRyVmFsdWUgPSB0aGlzLnN1YnNjcmliZUlEYXRhRXhwcihub2RlLCByYXdFeHByLCBpdGVtLCBpbmRleCk7XHJcbiAgICAgIGlmIChhdHRyVmFsdWUpIHsgJC5zZXRBdHRyaWJ1dGUobm9kZSwgYXR0ck5hbWUsIGF0dHJWYWx1ZSk7IH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIFN0YXRpYyBkYXRhIGF0dHJpYnV0ZXMgaGFuZGxpbmcgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIC8qIGdldCB0aGUga2V5IHZhbHVlIGF0IHRoZSB0aW1lIG9mIHJlbmRlcmluZ1xyXG4gICAgICogYW5kIGZpbGxzIGl0cyB2YWx1ZSBhcyBodG1sIGNvbnRlbnRcclxuICAgICAqIEV4YW1wbGU6IDxhIGRhdGEtc2h0bWw9XCJrZXlcIj50ZW1wIHZhbHVlPC9hPlxyXG4gICAgICogICAgICAgICAgPGRpdiBkYXRhLXNodG1sPVwia2V5XCI+dGVtcCB2YWx1ZTwvZGl2PlxyXG4gICAgICovXHJcbiAgICBkYXRhX3NodG1sKG5vZGUsIGtleSkge1xyXG4gICAgICAkLnJlbW92ZUF0dHJpYnV0ZShub2RlLCAnZGF0YS1zaHRtbCcpO1xyXG4gICAgICByZXR1cm4gbm9kZS5pbm5lckhUTUwgPSB0aGlzLmdldChrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBnZXQgdGhlIGtleSB2YWx1ZSBhbmQgZmlsbHMgaXRzIHZhbHVlIGFzIHRleHQgY29udGVudFxyXG4gICAgICogRXhhbXBsZTogPGEgZGF0YS1zdGV4dD1cImtleVwiPnRlbXAgdmFsdWU8L2E+XHJcbiAgICAgKiAgICAgICAgICA8ZGl2IGRhdGEtc3RleHQ9XCJrZXlcIj50ZW1wIHZhbHVlPC9kaXY+XHJcbiAgICAgKi9cclxuICAgIGRhdGFfc3RleHQobm9kZSwga2V5KSB7XHJcbiAgICAgICQucmVtb3ZlQXR0cmlidXRlKG5vZGUsICdkYXRhLXN0ZXh0Jyk7XHJcbiAgICAgIHJldHVybiAkLnRleHRDb250ZW50KG5vZGUsIHRoaXMuZ2V0KGtleSkgfHwgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyBHZW5lcmljIGRhdGEgYXR0cmlidXRlcyBoYW5kbGluZyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgLypcclxuICAgICAqIGV2YWx1YXRlcyBleHByZXNzaW9uIHZhbHVlIHRvIGluaXRcclxuICAgICAqIEV4YW1wbGU6IGRhdGEtaW5pdD1cIkBrZXkodHJ1ZSlcIlxyXG4gICAgICogICAgICAgICAgZGF0YS1pbml0PVwicmguXy5sb2FkU2NyaXB0KCdwLnRvYycpXCJcclxuICAgICAqL1xyXG4gICAgZGF0YV9pbml0KG5vZGUsIHJhd0V4cHIpIHtcclxuICAgICAgbGV0IHJlc29sdmVkRGF0YSA9IF8ucmVzb2x2ZUV4cHJPcHRpb25zKHJhd0V4cHIpO1xyXG4gICAgICBsZXQgY2FsbGJhY2sgPSB0aGlzLl9mdW5jdGlvbignbm9kZScsIHJlc29sdmVkRGF0YS5leHByKTtcclxuICAgICAgY2FsbGJhY2sgPSBfLmFwcGx5Q2FsbGJhY2tPcHRpb25zKGNhbGxiYWNrLCByZXNvbHZlZERhdGEub3B0cyk7XHJcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXMsIG5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBoZWxwZXIgbWV0aG9kIGZvciBkYXRhIG1ldGhvZHMgaGF2aW5nIGV4cHJlc3Npb24gbGlrZSBkYXRhLWlmXHJcbiAgICAgKi9cclxuICAgIHN1YnNjcmliZURhdGFFeHByKHJhd0V4cHIsIGhhbmRsZXIsIG9wdHMpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaWJlRXhwcihyYXdFeHByLCBoYW5kbGVyLCB0aGlzLmh0bWxTdWJzLCBvcHRzKTtcclxuICAgIH1cclxuICAgIF9kYXRhX2V2ZW50X2NhbGxiYWNrKHJhd0V4cHIpIHtcclxuICAgICAgbGV0IGRhdGEgPSBXaWRnZXQucHJvdG90eXBlLl9ldmVudENhbGxCYWNrRGF0YVtyYXdFeHByXTtcclxuICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgIGRhdGEgPSB7fTtcclxuICAgICAgICBsZXQgdmFsdWUgPSBfLnJlc29sdmVQaXBlZEV4cHJlc3Npb24ocmF3RXhwcik7XHJcbiAgICAgICAgZGF0YS5jYWxsYmFjayA9IHRoaXMuX2Z1bmN0aW9uKCdldmVudCwgbm9kZScsIHZhbHVlWzBdKTtcclxuICAgICAgICBpZiAodmFsdWVbMV0pIHsgZGF0YS5vcHRzID0gXy5yZXNvbHZlTmljZUpTT04odmFsdWVbMV0pOyB9XHJcbiAgICAgICAgV2lkZ2V0LnByb3RvdHlwZS5fZXZlbnRDYWxsQmFja0RhdGFbcmF3RXhwcl0gPSBkYXRhO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBzdWJzY3JpYmVzIHRvIGtleXMgYW5kIGV2YWx1YXRlcyBleHByZXNzaW9uIHZhbHVlIHRvIHNob3cgb3IgaGlkZVxyXG4gICAgICogRXhhbXBsZTogZGF0YS1pZj1cIkBrZXlcIlxyXG4gICAgICogICAgICAgICAgZGF0YS1pZj1cIiFAa2V5JiZAa2V5MlwiXHJcbiAgICAgKiAgICAgICAgICBkYXRhLWlmPSd0aGlzLmdldChcImtleVwiLCBcInZhbHVlXCIpJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1pZj1cIkBrZXk9PXZhbHVlXCJcclxuICAgICAqICAgICAgICAgIGRhdGEtaWY9XCJAa2V5IT09dmFsdWVcIlxyXG4gICAgICovXHJcbiAgICBkYXRhX2lmKG5vZGUsIHJhd0V4cHIpIHtcclxuICAgICAgbGV0IG5vZGVIb2xkZXIgPSBuZXcgcmguTm9kZUhvbGRlcihbbm9kZV0pO1xyXG4gICAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVEYXRhRXhwcihyYXdFeHByLCBmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICBpZiAocmVzdWx0KSB7IHJldHVybiBub2RlSG9sZGVyLnNob3coKTsgfSBlbHNlIHsgcmV0dXJuIG5vZGVIb2xkZXIuaGlkZSgpOyB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRhdGFfaGlkZGVuKG5vZGUsIHJhd0V4cHIpIHtcclxuICAgICAgbGV0IG5vZGVIb2xkZXIgPSBuZXcgcmguTm9kZUhvbGRlcihbbm9kZV0pO1xyXG4gICAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVEYXRhRXhwcihyYXdFeHByLCByZXN1bHQgPT4gbm9kZUhvbGRlci5hY2Nlc3NpYmxlKCFyZXN1bHQpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogc3Vic2NyaWJlcyB0byBhIGtleSBhbmQgZmlsbHMgaXRzIHZhbHVlIGFzIGh0bWwgY29udGVudFxyXG4gICAgICogRXhhbXBsZTogPGEgZGF0YS1odG1sPVwiQGtleVwiPnRlbXAgdmFsdWU8L2E+XHJcbiAgICAgKiAgICAgICAgICA8ZGl2IGRhdGEtaHRtbD1cIkBrZXlbJ3VybCddXCI+dGVtcCB2YWx1ZTwvZGl2PlxyXG4gICAgICovXHJcbiAgICBkYXRhX2h0bWwobm9kZSwgcmF3RXhwcikge1xyXG4gICAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVEYXRhRXhwcihyYXdFeHByLCBmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHsgcmVzdWx0ID0gJyc7IH1cclxuICAgICAgICBub2RlLmlubmVySFRNTCA9IHJlc3VsdDtcclxuICAgICAgICAvL1RPRE8gdW5zdWIgb2xkIHN1YnNjcmliZXNcclxuICAgICAgICByZXR1cm4gJC5lYWNoQ2hpbGROb2RlKG5vZGUsIGNoaWxkID0+IHRoaXMucmVzb2x2ZURhdGFBdHRycyhjaGlsZCkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogc3Vic2NyaWJlcyB0byBhIGtleSBhbmQgZmlsbHMgaXRzIHZhbHVlIGFzIHRleHQgY29udGVudFxyXG4gICAgICogRXhhbXBsZTogPGEgZGF0YS10ZXh0PVwiQGtleVwiPnRlbXAgdmFsdWU8L2E+XHJcbiAgICAgKiAgICAgICAgICA8ZGl2IGRhdGEtdGV4dD1cIkBrZXlbJ3RpdGxlJ11cIj50ZW1wIHZhbHVlPC9kaXY+XHJcbiAgICAgKi9cclxuICAgIGRhdGFfdGV4dChub2RlLCByYXdFeHByKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZURhdGFFeHByKHJhd0V4cHIsIGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkgeyByZXN1bHQgPSAnJzsgfVxyXG4gICAgICAgIHJldHVybiAkLnRleHRDb250ZW50KG5vZGUsIHJlc3VsdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLypcclxuICAgICAqIHByb3ZpZGUgZXhwcmVzc2lvbiB0byB1cGRhdGUgdGhlIGNsYXNzIGF0dHJpYnV0ZVxyXG4gICAgICogRXhhbXBsZTogZGF0YS1jbGFzcz1cInNlbGVjdGVkOiAje0BpbmRleH0gPT0gQC5kYXRhaWR4XCJcclxuICAgICAqIGRhdGEtY2xhc3M9XCJzZWxlY3RlZDogQGtleTE7IGJvbGQ6IEBrZXkyXCJcclxuICAgICAqL1xyXG4gICAgZGF0YV9jbGFzcyhub2RlLCBhdHRyc0RhdGEpIHtcclxuICAgICAgcmV0dXJuIF8uZWFjaCh0aGlzLnJlc29sdmVBdHRyKGF0dHJzRGF0YSksIGZ1bmN0aW9uKHJhd0V4cHIsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgIGxldCBub2RlSG9sZGVyID0gbmV3IHJoLk5vZGVIb2xkZXIoW25vZGVdKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVEYXRhRXhwcihyYXdFeHByLCBmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgIGxldCBhZGRSZW1vdmVDbGFzcyA9IHJlc3VsdCA/IFtjbGFzc05hbWVdIDogW107XHJcbiAgICAgICAgICByZXR1cm4gbm9kZUhvbGRlci51cGRhdGVDbGFzcyhhZGRSZW1vdmVDbGFzcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogVG8gdXBkYXRlIGFueSBodG1sIHRhZyBhdHRyaWJ1dGUuXHJcbiAgICAgKiBFeGFtcGxlOiA8YSBkYXRhLWF0dHI9XCJocmVmOmxpbmtfa2V5XCI+R29vZ2xlPC9hPlxyXG4gICAgICogICAgICAgICAgPGJ1dHRvbiBkYXRhLWF0dHI9XCJkaXNhYmxlZDprZXlcIj50ZW1wIHZhbHVlPC9idXR0b24+XHJcbiAgICAgKi9cclxuICAgIGRhdGFfYXR0cihub2RlLCBhdHRyc0RhdGEpIHtcclxuICAgICAgcmV0dXJuIF8uZWFjaCh0aGlzLnJlc29sdmVBdHRyKGF0dHJzRGF0YSksIGZ1bmN0aW9uKHJhd0V4cHIsIGF0dHJfbmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZURhdGFFeHByKHJhd0V4cHIsIGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkLnNldEF0dHJpYnV0ZShub2RlLCBhdHRyX25hbWUsIHJlc3VsdCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCQuaGFzQXR0cmlidXRlKG5vZGUsIGF0dHJfbmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICQucmVtb3ZlQXR0cmlidXRlKG5vZGUsIGF0dHJfbmFtZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogVG8gdXBkYXRlIHN0eWxlIGF0dHJpYnV0ZSBvZiBIVE1MIG5vZGUuXHJcbiAgICAgKiBFeGFtcGxlOlxyXG4gICAgICogPHNwYW4gc3R5bGU9XCJ2aXNpYmxlOiB0cnVlO1wiIGRhdGEtY3NzPVwidmlzaWJsZTogQGtleVwiPiBzb21lIHRleHQgPC9zcGFuPlxyXG4gICAgICogPGxpIHN0eWxlPVwiY29sb3I6IGJsdWU7IGRpc3BsYXk6IGJsb2NrO1wiIGRhdGEtY3NzPVwiY29sb3I6XHJcbiAgICAgKiBALnNlbGVjdGVkX2NvbG9yOyBkaXNwbGF5OiBALmRhdGFpZHggPiAxMCA/ICdub25lJyA6ICdibG9jaydcIj48L2xpPlxyXG4gICAgICovXHJcbiAgICBkYXRhX2Nzcyhub2RlLCBhdHRyc0RhdGEpIHtcclxuICAgICAgcmV0dXJuIF8uZWFjaCh0aGlzLnJlc29sdmVBdHRyKGF0dHJzRGF0YSksIGZ1bmN0aW9uKHJhd0V4cHIsIHN0eWxlTmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZURhdGFFeHByKHJhd0V4cHIsIChyZXN1bHQgPSBudWxsKSA9PiAvLyBudWxsIHRvIGZvcmNlIHNldCBjc3NcclxuICAgICAgICAgICQuY3NzKG5vZGUsIHN0eWxlTmFtZSwgcmVzdWx0KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogd29ya3MgbGlrZSBkYXRhLWlmIGJ1dCBzZXRzIHRoZSBzdGF0ZXMgY2hlY2tlZFxyXG4gICAgICogRXhhbXBsZTpcclxuICAgICAqIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZ3JvdXAxXCIgdmFsdWU9XCJQcmludFwiIGRhdGEtY2hlY2tlZD1cImtleVwiIC8+XHJcbiAgICAgKiA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImdyb3VwMVwiIHZhbHVlPVwiT25saW5lXCIgZGF0YS1jaGVja2VkPVwia2V5XCIgLz5cclxuICAgICAqL1xyXG4gICAgZGF0YV9jaGVja2VkKG5vZGUsIGtleSkge1xyXG4gICAgICBpZiAoXy5pc1ZhbGlkTW9kZWxDb25zdEtleShrZXkpKSB7IGtleSA9IGNvbnN0cyhrZXkpOyB9XHJcbiAgICAgIGxldCB0eXBlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTtcclxuICAgICAgaWYgKCh0eXBlID09PSAnY2hlY2tib3gnKSB8fCAodHlwZSA9PT0gJ3JhZGlvJykpIHtcclxuICAgICAgICBsZXQgbm9kZVZhbHVlO1xyXG4gICAgICAgIGlmICgkLmdldEF0dHJpYnV0ZShub2RlLCAnY2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICB0aGlzLmd1YXJkKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wdWJsaXNoKGtleSwgbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJywge3N5bmM6IHRydWV9KSk7IH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbm9kZS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgbm9kZVZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XHJcbiAgICAgICAgICBsZXQgdmFsdWUgPVxyXG4gICAgICAgICAgICBub2RlVmFsdWUgPT09IG51bGwgP1xyXG4gICAgICAgICAgICAgIG5vZGUuY2hlY2tlZFxyXG4gICAgICAgICAgICA6IG5vZGUuY2hlY2tlZCA/XHJcbiAgICAgICAgICAgICAgbm9kZVZhbHVlXHJcbiAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICB1bmRlZmluZWQ7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5ndWFyZChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucHVibGlzaChrZXksIHZhbHVlLCB7c3luYzogdHJ1ZX0pOyB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0bWxTdWJzLnB1c2godGhpcy5zdWJzY3JpYmUoa2V5LCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgbm9kZVZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XHJcbiAgICAgICAgICBpZiAobm9kZVZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hlY2tlZCA9IHZhbHVlID09PSBub2RlVmFsdWU7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbm9kZS5jaGVja2VkID0gdmFsdWUgPT09IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIHN1YnNjcmliZXMgdG8gYSBrZXkgYW5kIGZpbGxzIGl0cyB2YWx1ZSBhcyBodG1sIGNvbnRlbnRcclxuICAgICAqIEV4YW1wbGU6XHJcbiAgICAgKiA8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLXZhbHVlPVwia2V5XCIgLz5cclxuICAgICAqIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPVwiT25saW5lXCIgZGF0YS12YWx1ZT1cImtleVwiIC8+XHJcbiAgICAgKi9cclxuICAgIGRhdGFfdmFsdWUobm9kZSwga2V5KSB7XHJcbiAgICAgIGlmIChfLmlzVmFsaWRNb2RlbENvbnN0S2V5KGtleSkpIHsga2V5ID0gY29uc3RzKGtleSk7IH1cclxuICAgICAgbGV0IG5vZGVHdWFyZCA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgIGlmIChub2RlLnZhbHVlKSB7IHRoaXMuZ3VhcmQoKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wdWJsaXNoKGtleSwgbm9kZS52YWx1ZSwge3N5bmM6IHRydWV9KTsgfSksIG5vZGVHdWFyZCk7IH1cclxuXHJcbiAgICAgIG5vZGUub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3VhcmQoKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5ndWFyZChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucHVibGlzaChrZXksIG5vZGUudmFsdWUsIHtzeW5jOiB0cnVlfSk7IH0pO1xyXG4gICAgICAgICB9KSwgbm9kZUd1YXJkKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmh0bWxTdWJzLnB1c2godGhpcy5zdWJzY3JpYmUoa2V5LCB2YWx1ZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3VhcmQoKCgpID0+IG5vZGUudmFsdWUgPSB2YWx1ZSksIG5vZGVHdWFyZCk7XHJcbiAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIF9yZWdpc3Rlcl9ldmVudF93aXRoX3Jhd0V4cHIobmFtZSwgbm9kZSwgcmF3RXhwcikge1xyXG4gICAgICBsZXQge2NhbGxiYWNrfSA9IHRoaXMucmVzb2x2ZUV2ZW50UmF3RXhwcihyYXdFeHByKTtcclxuICAgICAgXy5hZGRFdmVudExpc3RlbmVyKG5vZGUsIG5hbWUsIGUgPT4gY2FsbGJhY2suY2FsbCh0aGlzLCBlLCBlLmN1cnJlbnRUYXJnZXQpKTtcclxuICAgICAgcmV0dXJuIGNhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBFeGFtcGxlOiBkYXRhLWNsaWNrPSdAa2V5KFwidmFsdWVcIiknXHJcbiAgICAgKiAgICAgICAgICBkYXRhLWNsaWNrPSd0aGlzLnB1Ymxpc2goXCJrZXlcIiwgXCJ2YWx1ZVwiKSdcclxuICAgICAqICAgICAgICAgIGRhdGEtY2xpY2s9J0BrZXkoXCJ2YWx1ZVwiKTsgZXZlbnQucHJldmVudERlZmF1bHQoKTsnXHJcbiAgICAgKi9cclxuICAgIGRhdGFfY2xpY2sobm9kZSwgcmF3RXhwcikge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVnaXN0ZXJfZXZlbnRfd2l0aF9yYXdFeHByKCdjbGljaycsIG5vZGUsIHJhd0V4cHIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBFeGFtcGxlOiBkYXRhLW1vdXNlb3Zlcj0nQGtleShcInZhbHVlXCIpJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1tb3VzZW92ZXI9J3RoaXMucHVibGlzaChcImtleVwiLCBcInZhbHVlXCIpJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1tb3VzZW92ZXI9J0BrZXkoXCJ2YWx1ZVwiKTsgZXZlbnQucHJldmVudERlZmF1bHQoKTsnXHJcbiAgICAgKi9cclxuICAgIGRhdGFfbW91c2VvdmVyKG5vZGUsIHJhd0V4cHIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdGVyX2V2ZW50X3dpdGhfcmF3RXhwcignbW91c2VvdmVyJywgbm9kZSwgcmF3RXhwcik7XHJcbiAgICB9XHJcblxyXG4gICAgZGF0YV9tb3VzZW91dChub2RlLCByYXdFeHByKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZWdpc3Rlcl9ldmVudF93aXRoX3Jhd0V4cHIoJ21vdXNlb3V0Jywgbm9kZSwgcmF3RXhwcik7XHJcbiAgICB9XHJcblxyXG4gICAgZGF0YV9mb2N1cyhub2RlLCByYXdFeHByKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZWdpc3Rlcl9ldmVudF93aXRoX3Jhd0V4cHIoJ2ZvY3VzJywgbm9kZSwgcmF3RXhwcik7XHJcbiAgICB9XHJcblxyXG4gICAgZGF0YV9ibHVyKG5vZGUsIHJhd0V4cHIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdGVyX2V2ZW50X3dpdGhfcmF3RXhwcignYmx1cicsIG5vZGUsIHJhd0V4cHIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiB0cmlnZ2VyXHJcbiAgICAgKiBFeGFtcGxlOiBkYXRhLXRyaWdnZXI9Jy5sLmdvX3RvX3RvcCdcclxuICAgICAqICAgICAgICAgIGRhdGEtdHJpZ2dlcj0nRVZUX1NFQVJDSF9QQUdFJ1xyXG4gICAgICovXHJcbiAgICBkYXRhX3RyaWdnZXIobm9kZSwga2V5KSB7XHJcbiAgICAgIGlmIChfLmlzVmFsaWRNb2RlbENvbnN0S2V5KGtleSkpIHsga2V5ID0gY29uc3RzKGtleSk7IH1cclxuICAgICAgcmV0dXJuIF8uYWRkRXZlbnRMaXN0ZW5lcihub2RlLCAnY2xpY2snLCAoKSA9PiB0aGlzLnB1Ymxpc2goa2V5LCBudWxsKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIGNhbGwgbWVtYmVyIG9yIGdsb2JhbCBtZXRob2Qgb24gY2xpY2tcclxuICAgICAqIGFkdmFudGFnZSBpcyB5b3Ugd2lsbCBnZXQgZXZlbnQgYXMgYXJndW1lbnRcclxuICAgICAqIEV4YW1wbGU6IGRhdGEtbWV0aG9kPSdoYW5kbGVTYXZlJyA9PiBkYXRhLWNsaWNrPSd0aGlzLmhhbmRsZVNhdmUoZXZlbnQpJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1tZXRob2Q9J2hhbmRsZUNhbmNlbCdcclxuICAgICAqL1xyXG4gICAgZGF0YV9tZXRob2Qobm9kZSwgbWV0aG9kKSB7XHJcbiAgICAgIHJldHVybiBfLmFkZEV2ZW50TGlzdGVuZXIobm9kZSwgJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgeyByZXR1cm4gKHRoaXNbbWV0aG9kXSB8fCB3aW5kb3dbbWV0aG9kXSkoZXZlbnQpOyB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZGF0YV90b2dnbGUobm9kZSwgcmF3QXJncykge1xyXG4gICAgICBsZXQgb3B0cztcclxuICAgICAgbGV0IGtleXMgPSBbXTtcclxuICAgICAgbGV0IGRhdGEgPSBXaWRnZXQucHJvdG90eXBlLl90b2dnbGVEYXRhW3Jhd0FyZ3NdO1xyXG4gICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgbGV0IHBpcGVkQXJncyA9IF8ucmVzb2x2ZVBpcGVkRXhwcmVzc2lvbihyYXdBcmdzKTtcclxuICAgICAgICBsZXQgY29uZmlnID0gcGlwZWRBcmdzLnNoaWZ0KCkgfHwgJyc7XHJcbiAgICAgICAgY29uZmlnID0gXy5leHBsb2RlQW5kTWFwKGNvbmZpZywgJzsnLCAnOicsIHt0cmltOiB0cnVlfSk7XHJcbiAgICAgICAgaWYgKHBpcGVkQXJnc1swXSkgeyBvcHRzID0gXy5yZXNvbHZlTmljZUpTT04ocGlwZWRBcmdzWzBdKTsgfVxyXG4gICAgICAgIGRhdGEgPSB7a2V5VmFsdWVzOiBjb25maWcsIG9wdHN9O1xyXG4gICAgICAgIFdpZGdldC5wcm90b3R5cGUuX3RvZ2dsZURhdGFbcmF3QXJnc10gPSBkYXRhO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBfLmVhY2goZGF0YS5rZXlWYWx1ZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ3VhcmQoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnB1Ymxpc2goa2V5LCB2YWx1ZSA9PT0gJ3RydWUnLCB7c3luYzogdHJ1ZX0pOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgLCB0aGlzKTtcclxuXHJcbiAgICAgIGxldCBjYWxsYmFjayA9IGtleSA9PiB0aGlzLmd1YXJkKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wdWJsaXNoKGtleSwgIXRoaXMuZ2V0KGtleSksIHtzeW5jOiB0cnVlfSk7IH0pO1xyXG4gICAgICBpZiAoZGF0YS5vcHRzKSB7IGNhbGxiYWNrID0gXy5hcHBseUNhbGxiYWNrT3B0aW9ucyhjYWxsYmFjaywgZGF0YS5vcHRzKTsgfVxyXG5cclxuICAgICAgcmV0dXJuIF8uYWRkRXZlbnRMaXN0ZW5lcihub2RlLCAnY2xpY2snLCBldmVudCA9PiBfLmVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7IGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgeyByZXR1cm4gY2FsbGJhY2soa2V5KTsgfSB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIFRvZ2dsZSBtb2RlbCB2YXJpYWJsZSBvbiBjbGlja1xyXG4gICAgICogRXhhbXBsZTogZGF0YS10b2dnbGVjbGFzcz0ncmgtaGlkZSdcclxuICAgICAqICAgICAgICAgIGRhdGEtdG9nZ2xlY2xhc3M9J29wZW4nXHJcbiAgICAgKiAgICAgICAgICA8ZGl2IGNsYXNzPVwib3BlblwiIGRhdGEtdG9nZ2xlY2xhc3M9J29wZW4sY2xvc2VkJz5cclxuICAgICAqL1xyXG4gICAgZGF0YV90b2dnbGVjbGFzcyhub2RlLCBjbGFzc05hbWVzKSB7XHJcbiAgICAgIGxldCBuZXdDbGFzc2VzID0gXy5zcGxpdEFuZFRyaW0oY2xhc3NOYW1lcywgJywnKTtcclxuICAgICAgcmV0dXJuIF8uYWRkRXZlbnRMaXN0ZW5lcihub2RlLCAnY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xyXG4gICAgICAgICAgbm9kZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XHJcbiAgICAgICAgICByZXR1cm4gXy5lYWNoKG5ld0NsYXNzZXMsIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoJC5oYXNDbGFzcyhub2RlLCBjbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICQucmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXR1cm4gJC5hZGRDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBFeGFtcGxlOiBkYXRhLWNoYW5nZT0nQGtleShcInZhbHVlXCIpJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1jaGFuZ2U9J3RoaXMucHVibGlzaChcImtleVwiLCBcInZhbHVlXCIpJ1xyXG4gICAgICovXHJcbiAgICBkYXRhX2NoYW5nZShub2RlLCByYXdFeHByKSB7XHJcbiAgICAgIGxldCBkYXRhID0gdGhpcy5fZGF0YV9ldmVudF9jYWxsYmFjayhyYXdFeHByKTtcclxuICAgICAgbGV0IGNhbGxiYWNrID0gXy5hcHBseUNhbGxiYWNrT3B0aW9ucyhkYXRhLmNhbGxiYWNrLCBkYXRhLm9wdHMpO1xyXG4gICAgICByZXR1cm4gbm9kZS5vbmNoYW5nZSA9IGV2ZW50ID0+IGNhbGxiYWNrLmNhbGwodGhpcywgZXZlbnQsIGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBFeGFtcGxlOiBkYXRhLWtleWRvd249J0B0ZXh0KG5vZGUudmFsdWUpOyB8IGtleUNvZGU6IDEzJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1rZXlkb3duPSdldmVudC5rZXlDb2RlID09IDEzICYmIEB0ZXh0KG5vZGUudmFsdWUpJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1rZXlkb3duPSd0aGlzLnB1Ymxpc2goXCJrZXlcIiwgXCJteXZhbHVlXCIpOydcclxuICAgICAqICAgICAgICAgIGRhdGEta2V5ZG93bm9wdGlvbnM9J2RlYm91bmNlOjMwMCdcclxuICAgICAqL1xyXG4gICAgZGF0YV9rZXlkb3duKG5vZGUsIHJhd0V4cHIpIHtcclxuICAgICAgbGV0IGRhdGEgPSB0aGlzLl9kYXRhX2V2ZW50X2NhbGxiYWNrKHJhd0V4cHIpO1xyXG4gICAgICBsZXQgY2FsbGJhY2sgPSBfLmFwcGx5Q2FsbGJhY2tPcHRpb25zKGRhdGEuY2FsbGJhY2ssIGRhdGEub3B0cyk7XHJcbiAgICAgIGxldCBrZXlDb2RlID0gZGF0YS5vcHRzICYmIGRhdGEub3B0cy5rZXlDb2RlO1xyXG5cclxuICAgICAgcmV0dXJuIG5vZGUub25rZXlkb3duID0gZXZlbnQgPT4ge1xyXG4gICAgICAgIGlmICgha2V5Q29kZSB8fCAoa2V5Q29kZSA9PT0gZXZlbnQua2V5Q29kZSkpIHtcclxuICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXMsIGV2ZW50LCBldmVudC5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIEV4YW1wbGU6IGRhdGEta2V5dXA9J2lmKGtleSA9PSAxMylAdGV4dChub2RlLnZhbHVlKTsnXHJcbiAgICAgKiAgICAgICAgICBkYXRhLWtleXVwPSdAdGV4dChub2RlLnZhbHVlKSB8IGtleUNvZGU6IDEzJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1rZXl1cD0ndGhpcy5wdWJsaXNoKFwia2V5XCIsIFwibXl2YWx1ZVwiKSB8IGRlYm91bmNlOjMwMCdcclxuICAgICAqL1xyXG4gICAgZGF0YV9rZXl1cChub2RlLCByYXdFeHByKSB7XHJcbiAgICAgIGxldCBkYXRhID0gdGhpcy5fZGF0YV9ldmVudF9jYWxsYmFjayhyYXdFeHByKTtcclxuICAgICAgbGV0IGNhbGxiYWNrID0gXy5hcHBseUNhbGxiYWNrT3B0aW9ucyhkYXRhLmNhbGxiYWNrLCBkYXRhLm9wdHMpO1xyXG4gICAgICBsZXQga2V5Q29kZSA9IGRhdGEub3B0cyAmJiBkYXRhLm9wdHMua2V5Q29kZTtcclxuXHJcbiAgICAgIHJldHVybiBub2RlLm9ua2V5dXAgPSBldmVudCA9PiB7XHJcbiAgICAgICAgaWYgKCFrZXlDb2RlIHx8IChrZXlDb2RlID09PSBldmVudC5rZXlDb2RlKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpcywgZXZlbnQsIGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogRXhhbXBsZTogZGF0YS1zY3JvbGw9J0B0ZXh0KG5vZGUudmFsdWUpIHwgZGVib3VuY2U6MzAwJ1xyXG4gICAgICogICAgICAgICAgZGF0YS1zY3JvbGw9J3RoaXMucHVibGlzaChcImtleVwiLCBcIm15dmFsdWVcIiknXHJcbiAgICAgKi9cclxuICAgIGRhdGFfc2Nyb2xsKG5vZGUsIHJhd0V4cHIpIHtcclxuICAgICAgbGV0IGRhdGEgPSB0aGlzLl9kYXRhX2V2ZW50X2NhbGxiYWNrKHJhd0V4cHIpO1xyXG4gICAgICBsZXQgeyBvcHRzIH0gPSBkYXRhO1xyXG4gICAgICBsZXQgZGVsdGEgPSAob3B0cyAmJiBvcHRzLmRlbHRhKSB8fCAxMDA7XHJcbiAgICAgIGxldCBjYWxsYmFjayA9IGV2ZW50ID0+IHtcclxuICAgICAgICBsZXQgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgaWYgKG5vZGUuc2Nyb2xsVG9wID4gKG5vZGUuc2Nyb2xsSGVpZ2h0IC0gKHJlY3QuaGVpZ2h0ICsgZGVsdGEpKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGRhdGEuY2FsbGJhY2suY2FsbCh0aGlzLCBldmVudCwgbm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKG9wdHMpIHsgY2FsbGJhY2sgPSBfLmFwcGx5Q2FsbGJhY2tPcHRpb25zKGNhbGxiYWNrLCBvcHRzKTsgfVxyXG4gICAgICByZXR1cm4gXy5hZGRFdmVudExpc3RlbmVyKG5vZGUsICdzY3JvbGwnLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBkYXRhX2xvYWQobm9kZSwgdmFsdWUpIHtcclxuICAgICAgbGV0IHBhaXIgPSB2YWx1ZS5zcGxpdCgnOicpO1xyXG4gICAgICBsZXQganNQYXRoID0gcGFpclswXTtcclxuICAgICAgbGV0IGtleSA9IHBhaXJbMV07XHJcbiAgICAgIGlmICghV2lkZ2V0LnByb3RvdHlwZS5fbG9hZERhdGFbanNQYXRoXSkge1xyXG4gICAgICAgIHJldHVybiBfLmFkZEV2ZW50TGlzdGVuZXIobm9kZSwgJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgaWYgKCFXaWRnZXQucHJvdG90eXBlLl9sb2FkRGF0YVtqc1BhdGhdKSB7XHJcbiAgICAgICAgICAgIFdpZGdldC5wcm90b3R5cGUuX2xvYWREYXRhW2pzUGF0aF0gPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgJC5hZGRDbGFzcyhub2RlLCAnbG9hZGluZycpO1xyXG4gICAgICAgICAgICAgIHZhciB1bnN1YiA9IHRoaXMuc3Vic2NyaWJlT25seShrZXksIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJC5yZW1vdmVDbGFzcyhub2RlLCAnbG9hZGluZycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuc3ViKCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF8ubG9hZFNjcmlwdChqc1BhdGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGF0YV9jb250cm9sbGVyKG5vZGUsIHZhbHVlKSB7XHJcbiAgICAgIGlmICh0aGlzLnVzZXJfdmFycyA9PSBudWxsKSB7IHRoaXMudXNlcl92YXJzID0ge307IH1cclxuICAgICAgZm9yIChsZXQgZGF0YSBvZiBBcnJheS5mcm9tKF8uc3BsaXRBbmRUcmltKHZhbHVlLCAnOycpKSkge1xyXG4gICAgICAgIHZhciBjdHJsQ2xhc3MsIG9wdHM7XHJcbiAgICAgICAgbGV0IHBhaXIgPSBfLnJlc29sdmVQaXBlZEV4cHJlc3Npb24oZGF0YSk7XHJcbiAgICAgICAgaWYgKHBhaXJbMV0pIHsgb3B0cyA9IF8ucmVzb2x2ZU5pY2VKU09OKHBhaXJbMV0pOyB9XHJcbiAgICAgICAgcGFpciA9IF8uc3BsaXRBbmRUcmltKHBhaXJbMF0sICc6Jyk7XHJcbiAgICAgICAgaWYgKHBhaXIubGVuZ3RoID09PSAwKSB7IHBhaXIgPSBfLnNwbGl0QW5kVHJpbShwYWlyWzBdLCAnIGFzICcpOyB9XHJcbiAgICAgICAgaWYgKHBhaXJbMF0gIT0gbnVsbCkgeyBjdHJsQ2xhc3MgPSByaC5jb250cm9sbGVyKHBhaXJbMF0pOyB9XHJcbiAgICAgICAgbGV0IGN0cmxOYW1lID0gcGFpclsxXTtcclxuICAgICAgICBpZiAoY3RybENsYXNzICYmICF0aGlzLnVzZXJfdmFyc1tjdHJsTmFtZV0pIHtcclxuICAgICAgICAgIGxldCBjb250cm9sbGVyID0gbmV3IGN0cmxDbGFzcyh0aGlzLCBvcHRzKTtcclxuICAgICAgICAgIGlmIChjdHJsTmFtZSkgeyB0aGlzLnVzZXJfdmFyc1tjdHJsTmFtZV0gPSBjb250cm9sbGVyOyB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChyaC5fZGVidWcgJiYgIWN0cmxDbGFzcykge1xyXG4gICAgICAgICAgcmguX2QoJ2Vycm9yJywgYENvbnRyb2xsZXIgJHtjdHJsQ2xhc3N9IG5vdCBmb3VuZGApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRhdGFfc2NyZWVudmFyKG5vZGUsIHZhbHVlKSB7XHJcbiAgICAgIGxldCBzVmFycyA9IF8uc3BsaXRBbmRUcmltKHZhbHVlLCAnLCcpO1xyXG4gICAgICBsZXQgY3VycmVudF9zY3JlZW4gPSBfLmZpbmRJbmRleCh0aGlzLmdldChjb25zdHMoJ0tFWV9TQ1JFRU4nKSksICh2LCBrKSA9PiB2LmF0dGFjaGVkKTtcclxuICAgICAgbGV0IGNhY2hlID0ge307XHJcbiAgICAgIGNhY2hlW2N1cnJlbnRfc2NyZWVuXSA9IHt9O1xyXG5cclxuICAgICAgbGV0IHNjcmVlbktleXMgPSB0aGlzLmdldChjb25zdHMoJ0tFWV9TQ1JFRU4nKSk7XHJcbiAgICAgIHJldHVybiBfLmVhY2goKF8ua2V5cyhzY3JlZW5LZXlzKSksIGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZU9ubHkoYCR7Y29uc3RzKCdLRVlfU0NSRUVOJyl9LiR7a2V5fS5hdHRhY2hlZGAsIGF0dGFjaGVkID0+IHtcclxuICAgICAgICAgIGxldCBuYW1lO1xyXG4gICAgICAgICAgaWYgKCFhdHRhY2hlZCkgeyByZXR1cm47IH1cclxuICAgICAgICAgIF8uZWFjaChzVmFycywgZnVuY3Rpb24oc1Zhcikge1xyXG4gICAgICAgICAgICBjYWNoZVtjdXJyZW50X3NjcmVlbl1bc1Zhcl0gPSB0aGlzLmdldChzVmFyKTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlW2tleV0gIT0gbnVsbCkgeyByZXR1cm4gdGhpcy5wdWJsaXNoKHNWYXIsIGNhY2hlW2tleV1bc1Zhcl0pOyB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAsIHRoaXMpO1xyXG4gICAgICAgICAgcmV0dXJuIGNhY2hlW25hbWUgPSAoY3VycmVudF9zY3JlZW4gPSBrZXkpXSAhPSBudWxsID8gY2FjaGVbbmFtZV0gOiAoY2FjaGVbbmFtZV0gPSB7fSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgICwgdGhpcyk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBXaWRnZXQuaW5pdENsYXNzKCk7XHJcbiAgcmV0dXJuIFdpZGdldDtcclxufSkoKTtcclxuXHJcbiAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIFV0aWxpdHkgbWV0aG9kcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG5yaC53aWRnZXRzID0ge307XHJcbnJoLldpZGdldCA9IFdpZGdldDtcclxucmgud2lkZ2V0cy5CYXNpYyA9IFdpZGdldDtcclxuXHJcbmZ1bmN0aW9uIF9fZ3VhcmRfXyh2YWx1ZSwgdHJhbnNmb3JtKSB7XHJcbiAgcmV0dXJuICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsKSA/IHRyYW5zZm9ybSh2YWx1ZSkgOiB1bmRlZmluZWQ7XHJcbn1cclxuIiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxuXHJcbnJoLnJlZ2lzdGVyRGF0YUF0dHIgID0gZnVuY3Rpb24oYXR0ck5hbWUsIERhdGFBdHRySGFuZGxlciwgV2lkZ2V0KSB7XHJcbiAgaWYgKFdpZGdldCA9PSBudWxsKSB7ICh7IFdpZGdldCB9ID0gcmgpOyB9XHJcbiAgbGV0IG1ldGhvZE5hbWUgPSBgZGF0YV8ke2F0dHJOYW1lfWA7XHJcbiAgV2lkZ2V0LnByb3RvdHlwZS5kYXRhQXR0ck1ldGhvZHNbYGRhdGEtJHthdHRyTmFtZX1gXSA9IG1ldGhvZE5hbWU7XHJcbiAgV2lkZ2V0LnByb3RvdHlwZS5kYXRhQXR0cnMucHVzaChhdHRyTmFtZSk7XHJcbiAgcmV0dXJuIFdpZGdldC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihub2RlLCBhdHRyVmFsdWUpIHtcclxuICAgIHJldHVybiBuZXcgRGF0YUF0dHJIYW5kbGVyKHRoaXMsIG5vZGUsIGF0dHJWYWx1ZSk7XHJcbiAgfTtcclxufTtcclxuIiwibGV0IHsgcmggfSA9IHdpbmRvdztcclxubGV0IHsgXyB9ID0gcmg7XHJcbmxldCB7ICQgfSA9IHJoO1xyXG5sZXQgeyBjb25zdHMgfSA9IHJoO1xyXG5cclxuY2xhc3MgUmVzaXplIHtcclxuICBjb25zdHJ1Y3Rvcih3aWRnZXQsIG5vZGUsIHJhd0V4cHIpIHtcclxuICAgIHRoaXMuaGFuZGxlTW91c2VEb3duID0gdGhpcy5oYW5kbGVNb3VzZURvd24uYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaGFuZGxlTW91c2VNb3ZlID0gdGhpcy5oYW5kbGVNb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgIHRoaXMud2lkZ2V0ID0gd2lkZ2V0O1xyXG4gICAgdGhpcy5ub2RlID0gbm9kZTtcclxuICAgIGxldCB7Y2FsbGJhY2ssIG9wdHN9ID0gdGhpcy53aWRnZXQucmVzb2x2ZVJhd0V4cHJXaXRoVmFsdWUocmF3RXhwcik7XHJcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xyXG4gICAgdGhpcy5jYWxsYmFjayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzLndpZGdldCk7IH07XHJcblxyXG4gICAgaWYgKG9wdHMubWF4eCA9PSBudWxsKSB7IG9wdHMubWF4eCA9IDE7IH1cclxuICAgIGlmIChvcHRzLm1pbnggPT0gbnVsbCkgeyBvcHRzLm1pbnggPSAwOyB9XHJcbiAgICBpZiAob3B0cy5tYXh5ID09IG51bGwpIHsgb3B0cy5tYXh5ID0gMTsgfVxyXG4gICAgaWYgKG9wdHMubWlueSA9PSBudWxsKSB7IG9wdHMubWlueSA9IDA7IH1cclxuICAgIHRoaXMucmVzaXplID0gZmFsc2U7XHJcbiAgICBcclxuICAgIF8uaW5pdE1vdXNlTW92ZSgpO1xyXG4gICAgXy5hZGRFdmVudExpc3RlbmVyKHRoaXMubm9kZSwgJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlTW91c2VEb3duKTtcclxuICAgIHRoaXMud2lkZ2V0LnN1YnNjcmliZShjb25zdHMoJ0VWVF9NT1VTRU1PVkUnKSwgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlTW91c2VEb3duKGV2dCkge1xyXG4gICAgaWYgKGV2dC53aGljaCAhPT0gMSkgeyByZXR1cm47IH1cclxuICAgIHRoaXMucmVzaXplID0gKGV2dC50YXJnZXQgPT09IHRoaXMubm9kZSkgJiYgIWV2dC5kZWZhdWx0UHJldmVudGVkO1xyXG4gICAgaWYgKHRoaXMucmVzaXplKSB7XHJcbiAgICAgIGxldCByZXN1bHQgPSAodGhpcy5jYWxsYmFjaykoKTtcclxuICAgICAgcmV0dXJuIHRoaXMucmVzaXplID0gKHJlc3VsdCAhPT0gZmFsc2UpICYmIChyZXN1bHQgIT09IG51bGwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlTW91c2VNb3ZlKG9iaikge1xyXG4gICAgaWYgKG9iai5kZWZhdWx0UHJldmVudGVkKSB7IHRoaXMucmVzaXplID0gZmFsc2U7IH1cclxuICAgIGlmICghdGhpcy5yZXNpemUpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgb2JqLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xyXG4gICAgaWYgKG9iai53aGljaCA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wdWJsaXNoKG9iaik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5yZXNpemUgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEJhc2VXaWR0aCgpIHsgcmV0dXJuIHRoaXMub3B0cy5iYXNleCB8fCBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoOyB9XHJcbiAgICBcclxuICBnZXRCYXNlSGVpZ2h0KCkgeyByZXR1cm4gdGhpcy5vcHRzLmJhc2V5IHx8IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0OyB9XHJcbiAgXHJcbiAgcHVibGlzaChvYmopIHtcclxuICAgIGxldCBiYXNlID0gdGhpcy5nZXRCYXNlV2lkdGgoKTtcclxuICAgIGxldCBydGwgPSAncnRsJyA9PT0gdGhpcy53aWRnZXQuZ2V0KGNvbnN0cygnS0VZX0RJUicpKTtcclxuICAgIGxldCBuZXdWYWx1ZSA9IHJ0bCA/IGJhc2UgLSBvYmoueCA6IG9iai54O1xyXG4gICAgaWYgKCF0aGlzLnB1Ymxpc2hQb3MoYmFzZSwgdGhpcy5vcHRzLm1pbngsIHRoaXMub3B0cy5tYXh4LCB0aGlzLm9wdHMueCwgbmV3VmFsdWUpKSB7XHJcbiAgICAgIGJhc2UgPSB0aGlzLmdldEJhc2VIZWlnaHQoKTtcclxuICAgICAgbmV3VmFsdWUgPSBydGwgPyBiYXNlIC0gb2JqLnkgOiBvYmoueTtcclxuICAgICAgcmV0dXJuIHRoaXMucHVibGlzaFBvcyhiYXNlLCB0aGlzLm9wdHMubWlueSwgdGhpcy5vcHRzLm1heHksIHRoaXMub3B0cy55LCBuZXdWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaXNoUG9zKGJhc2UsIG1pbiwgbWF4LCBrZXksIG5ld1ZhbHVlKSB7XHJcbiAgICBpZiAoKGtleSAhPSBudWxsKSAmJiAobmV3VmFsdWUgIT0gbnVsbCkpIHtcclxuICAgICAgbGV0IG9sZFZhbHVlID0gdGhpcy53aWRnZXQuZ2V0KGtleSk7XHJcbiAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICBpZiAoKG1heCAqIGJhc2UpIDwgbmV3VmFsdWUpIHtcclxuICAgICAgICAgIG5ld1ZhbHVlID0gbWF4ICogYmFzZTtcclxuICAgICAgICB9IGVsc2UgaWYgKChtaW4gKiBiYXNlKSA+IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICBuZXdWYWx1ZSA9IG1pbiAqIGJhc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMud2lkZ2V0LnB1Ymxpc2goa2V5LCBgJHtuZXdWYWx1ZX1weGApO1xyXG4gICAgICAgICh0aGlzLmNhbGxiYWNrKSgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5yaC5yZWdpc3RlckRhdGFBdHRyKCdyZXNpemUnLCBSZXNpemUpO1xyXG4iLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5sZXQgeyBfIH0gPSByaDtcclxubGV0IHsgJCB9ID0gcmg7XHJcblxyXG5jbGFzcyBUYWJsZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHdpZGdldCwgbm9kZSwga2V5KSB7XHJcbiAgICB0aGlzLndpZGdldCA9IHdpZGdldDtcclxuICAgIHRoaXMubm9kZSA9IG5vZGU7XHJcbiAgICB0aGlzLndpZGdldC5wdWJsaXNoKGtleSwgdGhpcy5leHRyYWN0Um93Q29sdW1uTWF0cml4KHRoaXMubm9kZSkpO1xyXG4gIH1cclxuIFxyXG4gIGV4dHJhY3RSb3dDb2x1bW5NYXRyaXgobm9kZSkge1xyXG4gICAgbGV0IHJvd0NvbE1hdHJpeCA9IFtdO1xyXG4gICAgbGV0IHJvd0VsZW1lbnRzID0gW107XHJcbiAgICB0aGlzLndpZGdldC50cmF2ZXJzZU5vZGUobm9kZSwgZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICBpZiAoJ1REJyA9PT0gJC5ub2RlTmFtZShub2RlKSkge1xyXG4gICAgICAgIHJvd0VsZW1lbnRzLnB1c2goJC5pbm5lckhUTUwobm9kZSkpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSBlbHNlIGlmICgnVFInID09PSAkLm5vZGVOYW1lKG5vZGUpKSB7XHJcbiAgICAgICAgaWYgKHJvd0VsZW1lbnRzLmxlbmd0aCAhPT0gMCkgeyByb3dDb2xNYXRyaXgucHVzaChyb3dFbGVtZW50cyk7IH1cclxuICAgICAgICByb3dFbGVtZW50cyA9IFtdO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICBpZiAocm93RWxlbWVudHMubGVuZ3RoICE9PSAwKSB7IHJvd0NvbE1hdHJpeC5wdXNoKHJvd0VsZW1lbnRzKTsgfVxyXG4gICAgcmV0dXJuIHJvd0NvbE1hdHJpeDtcclxuICB9XHJcbn1cclxuXHJcbnJoLnJlZ2lzdGVyRGF0YUF0dHIoJ3RhYmxlJywgVGFibGUpO1xyXG4iLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5sZXQgeyBfIH0gPSByaDtcclxubGV0IHsgJCB9ID0gcmg7XHJcblxyXG5jbGFzcyBUYWJsZU5lc3RlZERhdGEgZXh0ZW5kcyByaC5XaWRnZXQge1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XHJcbiAgICBzdXBlcihvcHRzKTtcclxuICAgIHRoaXMucm93Q29sTWF0cml4ID0gdGhpcy5leHRyYWN0Um93Q29sdW1uTWF0cml4KHRoaXMubm9kZSk7XHJcbiAgfVxyXG4gXHJcbiAgZXh0cmFjdFJvd0NvbHVtbk1hdHJpeChub2RlKSB7XHJcbiAgICBsZXQgcm93Q29sTWF0cml4ID0gW107XHJcbiAgICBsZXQgcm93RWxlbWVudHMgPSBbXTtcclxuICAgIHRoaXMudHJhdmVyc2VOb2RlKG5vZGUsIGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgaWYgKCdURCcgPT09ICQubm9kZU5hbWUobm9kZSkpIHtcclxuICAgICAgICBpZiAodGhpcy5oYXNPbmx5VGFibGUobm9kZSkpIHtcclxuICAgICAgICAgIGxldCBjaGlsZE1hdHJpeCA9IHRoaXMuZXh0cmFjdFJvd0NvbHVtbk1hdHJpeChub2RlLmNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgIGlmIChjaGlsZE1hdHJpeC5sZW5ndGggIT09IDApIHsgcm93RWxlbWVudHMucHVzaCh7Y2hpbGQ6IGNoaWxkTWF0cml4fSk7IH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcm93RWxlbWVudHMucHVzaCh7aHRtbDogJC5pbm5lckhUTUwobm9kZSl9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9IGVsc2UgaWYgKCdUUicgPT09ICQubm9kZU5hbWUobm9kZSkpIHtcclxuICAgICAgICBpZiAocm93RWxlbWVudHMubGVuZ3RoICE9PSAwKSB7IHJvd0NvbE1hdHJpeC5wdXNoKHJvd0VsZW1lbnRzKTsgfVxyXG4gICAgICAgIHJvd0VsZW1lbnRzID0gW107XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9KTtcclxuICAgIGlmIChyb3dFbGVtZW50cy5sZW5ndGggIT09IDApIHsgcm93Q29sTWF0cml4LnB1c2gocm93RWxlbWVudHMpOyB9XHJcbiAgICByZXR1cm4gcm93Q29sTWF0cml4O1xyXG4gIH1cclxuXHJcbiAgaGFzT25seVRhYmxlKG5vZGUpIHtcclxuICAgIHJldHVybiAoKG5vZGUuY2hpbGRyZW4gIT0gbnVsbCA/IG5vZGUuY2hpbGRyZW4ubGVuZ3RoIDogdW5kZWZpbmVkKSA9PT0gMSkgJiYgKCdUQUJMRScgPT09ICQubm9kZU5hbWUobm9kZS5jaGlsZHJlblswXSkpO1xyXG4gIH1cclxufVxyXG5cclxuLy9yaC5yZWdpc3RlckRhdGFBdHRyICd0YWJsZXInLCBUYWJsZU5lc3RlZERhdGFcclxud2luZG93LnJoLndpZGdldHMuVGFibGVOZXN0ZWREYXRhID0gVGFibGVOZXN0ZWREYXRhOyIsIi8vSmF2YVNjcmlwdCBoYW5kbGVyLlxyXG5sZXQgcmggPSByZXF1aXJlKFwiLi4vLi4vc3JjL2xpYi9yaFwiKVxyXG5cclxucmguSW5kaWdvU2V0U2lkZWJhciA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBzaWRlQmFyVG9TZXQgPSByaC5tb2RlbC5nZXQocmguY29uc3RzKCdTSURFQkFSX1NUQVRFJykpO1xyXG5cclxuXHR2YXIgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXTtcclxuXHR2YXIgdG9jID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2MtaG9sZGVyXCIpO1xyXG5cdHZhciBpZHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkeC1ob2xkZXJcIik7XHJcblx0dmFyIGdsbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2xvLWhvbGRlclwiKTtcclxuXHR2YXIgZnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmdHMtaG9sZGVyXCIpO1xyXG5cdHZhciBmaWx0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbHRlci1ob2xkZXJcIik7XHJcblx0dmFyIGZhdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmF2b3JpdGVzLWhvbGRlclwiKTtcclxuXHR2YXIgbW9iaWxlTWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9iaWxlLW1lbnUtaG9sZGVyXCIpO1xyXG5cclxuXHR2YXIgdmlzaWJsZUNsYXNzID0gXCJsYXlvdXQtdmlzaWJsZVwiO1xyXG5cclxuXHR2YXIgc2V0VmlzaWJsZSA9IGZ1bmN0aW9uKGVsZW0pIHtcclxuXHRcdGlmKHR5cGVvZihlbGVtKSAhPSBcInVuZGVmaW5lZFwiICYmIGVsZW0gIT0gbnVsbCkge1xyXG5cdFx0XHRlbGVtLmNsYXNzTGlzdC5hZGQodmlzaWJsZUNsYXNzKTtcclxuXHJcblx0XHRcdC8vS2V5Ym9hcmQgZm9jdXMgb24gZmlyc3QgbGluayBlbGVtZW50IGluIHRoZSBwb3B1cC12aXNpYmxlLiBUaGlzIGFsbG93cyBiZXR0ZXIga2V5Ym9hcmQgYWNjZXNzLlxyXG5cdFx0XHR2YXIgaW5wdXQgPSBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIilbMF07XHJcblx0XHRcdGlmKHR5cGVvZihpbnB1dCkgIT0gXCJ1bmRlZmluZWRcIiAmJiByaC5tb2RlbC5nZXQocmguY29uc3RzKCdLRVlfU0NSRUVOX0RFU0tUT1AnKSkpIHtcclxuXHRcdFx0XHRpZiAoaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwid1NlYXJjaEZpZWxkXCIpKSB7XHJcblx0XHRcdFx0XHRyaC5tb2RlbC5jcHVibGlzaCgnRVZUX0NMT1NFX1NFQVJDSF9TVUdHRVNUSU9OJywgdHJ1ZSk7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpPT57XHJcblx0XHRcdFx0XHRcdGlucHV0LmZvY3VzKCk7XHJcblx0XHRcdFx0XHR9LDMwMCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRpbnB1dC5mb2N1cygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmIChyaC5tb2RlbC5nZXQocmguY29uc3RzKCdLRVlfU0NSRUVOX0RFU0tUT1AnKSkpIHtcclxuXHRcdFx0XHR2YXIgbGlzdCA9IGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaVwiKTtcclxuXHJcblx0XHRcdFx0aWYodHlwZW9mKGxpc3RbMF0pICE9IFwidW5kZWZpbmVkXCIpIHtcclxuXHRcdFx0XHRcdGxpc3RbMF0uZm9jdXMoKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHZhciBsaW5rcyA9IGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpO1xyXG5cdFx0XHRcdFx0aWYodHlwZW9mKGxpbmtzWzFdKSAhPSBcInVuZGVmaW5lZFwiKSB7XHJcblx0XHRcdFx0XHRcdGxpbmtzWzFdLmZvY3VzKCk7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYodHlwZW9mKGxpbmtzWzBdKSAhPSBcInVuZGVmaW5lZFwiKSB7XHJcblx0XHRcdFx0XHRcdGxpbmtzWzBdLmZvY3VzKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHZhciBzZXRIaWRkZW4gPSBmdW5jdGlvbihlbGVtKSB7XHJcblx0XHRpZih0eXBlb2YoZWxlbSkgIT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtICE9IG51bGwpIHtcclxuXHRcdFx0ZWxlbS5jbGFzc0xpc3QucmVtb3ZlKHZpc2libGVDbGFzcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR2YXIgbWVudURlbGF5ID0gXCJoYXMtZGVsYXlcIjtcclxuXHR2YXIgbWVudUltbWVkaWF0ZSA9IFwibm8tdHJhbnNmb3JtXCI7XHJcblxyXG5cdHZhciBzaG93T3RoZXJNZW51ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRtb2JpbGVNZW51LmNsYXNzTGlzdC5hZGQobWVudURlbGF5KTtcclxuXHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0XHRcdG1vYmlsZU1lbnUuY2xhc3NMaXN0LnJlbW92ZShtZW51RGVsYXkpO1xyXG5cdFx0XHRtb2JpbGVNZW51LmNsYXNzTGlzdC5hZGQobWVudUltbWVkaWF0ZSk7XHJcblx0XHR9LDc1MCk7XHJcblx0fVxyXG5cclxuXHR2YXIgaGlkZU90aGVyTWVudSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdFx0XHRtb2JpbGVNZW51LmNsYXNzTGlzdC5yZW1vdmUobWVudUltbWVkaWF0ZSk7XHJcblx0XHR9LCA3NTApO1xyXG5cdH1cclxuXHJcblx0Ym9keS5jbGFzc0xpc3QuYWRkKFwicG9wdXAtdmlzaWJsZVwiKTtcclxuXHJcblx0c3dpdGNoKHNpZGVCYXJUb1NldCkge1xyXG5cdFx0Y2FzZSBcInRvY1wiOlxyXG5cdFx0XHRzaG93T3RoZXJNZW51KCk7XHJcblx0XHRcdHNldFZpc2libGUodG9jKTtcclxuXHRcdFx0c2V0SGlkZGVuKGlkeCk7XHJcblx0XHRcdHNldEhpZGRlbihnbG8pO1xyXG5cdFx0XHRzZXRIaWRkZW4oZnRzKTtcclxuXHRcdFx0c2V0SGlkZGVuKGZpbHRlcik7XHJcblx0XHRcdHNldEhpZGRlbihmYXYpO1xyXG5cdFx0XHRzZXRIaWRkZW4obW9iaWxlTWVudSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcImlkeFwiOlxyXG5cdFx0XHRzaG93T3RoZXJNZW51KCk7XHJcblx0XHRcdHNldFZpc2libGUoaWR4KTtcclxuXHRcdFx0c2V0SGlkZGVuKHRvYyk7XHJcblx0XHRcdHNldEhpZGRlbihnbG8pO1xyXG5cdFx0XHRzZXRIaWRkZW4oZnRzKTtcclxuXHRcdFx0c2V0SGlkZGVuKGZpbHRlcik7XHJcblx0XHRcdHNldEhpZGRlbihmYXYpO1xyXG5cdFx0XHRzZXRIaWRkZW4obW9iaWxlTWVudSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcImdsb1wiOlxyXG5cdFx0XHRzaG93T3RoZXJNZW51KCk7XHJcblx0XHRcdHNldFZpc2libGUoZ2xvKTtcclxuXHRcdFx0c2V0SGlkZGVuKGlkeCk7XHJcblx0XHRcdHNldEhpZGRlbih0b2MpO1xyXG5cdFx0XHRzZXRIaWRkZW4oZnRzKTtcclxuXHRcdFx0c2V0SGlkZGVuKGZpbHRlcik7XHJcblx0XHRcdHNldEhpZGRlbihmYXYpO1xyXG5cdFx0XHRzZXRIaWRkZW4obW9iaWxlTWVudSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcImZ0c1wiOlxyXG5cdFx0XHRzaG93T3RoZXJNZW51KCk7XHJcblx0XHRcdHNldFZpc2libGUoZnRzKTtcclxuXHRcdFx0c2V0SGlkZGVuKGlkeCk7XHJcblx0XHRcdHNldEhpZGRlbihnbG8pO1xyXG5cdFx0XHRzZXRIaWRkZW4odG9jKTtcclxuXHRcdFx0c2V0SGlkZGVuKGZpbHRlcik7XHJcblx0XHRcdHNldEhpZGRlbihmYXYpO1xyXG5cdFx0XHRzZXRIaWRkZW4obW9iaWxlTWVudSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcImZpbHRlclwiOlxyXG5cdFx0XHRzaG93T3RoZXJNZW51KCk7XHJcblx0XHRcdHNldFZpc2libGUoZmlsdGVyKTtcclxuXHRcdFx0c2V0SGlkZGVuKGlkeCk7XHJcblx0XHRcdHNldEhpZGRlbihnbG8pO1xyXG5cdFx0XHRzZXRIaWRkZW4oZnRzKTtcclxuXHRcdFx0c2V0SGlkZGVuKHRvYyk7XHJcblx0XHRcdHNldEhpZGRlbihmYXYpO1xyXG5cdFx0XHRzZXRIaWRkZW4obW9iaWxlTWVudSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcImZhdm9yaXRlc1wiOlxyXG5cdFx0XHRzaG93T3RoZXJNZW51KCk7XHJcblx0XHRcdHNldFZpc2libGUoZmF2KTtcclxuXHRcdFx0c2V0SGlkZGVuKGlkeCk7XHJcblx0XHRcdHNldEhpZGRlbihnbG8pO1xyXG5cdFx0XHRzZXRIaWRkZW4oZnRzKTtcclxuXHRcdFx0c2V0SGlkZGVuKHRvYyk7XHJcblx0XHRcdHNldEhpZGRlbihmaWx0ZXIpO1xyXG5cdFx0XHRzZXRIaWRkZW4obW9iaWxlTWVudSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIm1lbnVcIjpcclxuXHRcdFx0c2V0VmlzaWJsZShtb2JpbGVNZW51KTtcclxuXHRcdFx0aGlkZU90aGVyTWVudSgpO1xyXG5cdFx0XHRzZXRIaWRkZW4oaWR4KTtcclxuXHRcdFx0c2V0SGlkZGVuKGdsbyk7XHJcblx0XHRcdHNldEhpZGRlbihmdHMpO1xyXG5cdFx0XHRzZXRIaWRkZW4odG9jKTtcclxuXHRcdFx0c2V0SGlkZGVuKGZhdik7XHJcblx0XHRcdHNldEhpZGRlbihmaWx0ZXIpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGRlZmF1bHQ6IC8vTm90aGluZy4gU2hvdyB0b3BpY1xyXG5cdFx0XHRzZXRIaWRkZW4oaWR4KTtcclxuXHRcdFx0c2V0SGlkZGVuKGdsbyk7XHJcblx0XHRcdHNldEhpZGRlbihmdHMpO1xyXG5cdFx0XHRzZXRIaWRkZW4odG9jKTtcclxuXHRcdFx0c2V0SGlkZGVuKGZpbHRlcik7XHJcblx0XHRcdHNldEhpZGRlbihmYXYpO1xyXG5cdFx0XHRzZXRIaWRkZW4obW9iaWxlTWVudSk7XHJcblx0XHRcdGhpZGVPdGhlck1lbnUoKTtcclxuXHRcdFx0Ym9keS5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXAtdmlzaWJsZVwiKTtcclxuXHRcdFx0aWYocmgubW9kZWwuZ2V0KHJoLmNvbnN0cygnS0VZX1NDUkVFTl9ERVNLVE9QJykpKSB7XHJcblx0XHRcdFx0cmguSW5kaWdvU2V0Rm9jdXNPblNlYXJjaCgpO1xyXG5cdFx0XHR9XHJcblx0fVxyXG59XHJcbnJoLkluZGlnb1NldEZvY3VzT25TZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpO1xyXG5cdGZvcih2YXIgaT0wO2k8aW5wdXQubGVuZ3RoO2krKyl7XHJcblx0XHRpZihpbnB1dFtpXS5jbGFzc0xpc3QuY29udGFpbnMoXCJ3U2VhcmNoRmllbGRcIikpe1xyXG5cdFx0XHRyaC5tb2RlbC5jcHVibGlzaCgnRVZUX0NMT1NFX1NFQVJDSF9TVUdHRVNUSU9OJywgdHJ1ZSk7XHJcblx0XHRcdHNldFRpbWVvdXQoKCk9PntcclxuXHRcdFx0XHRpbnB1dFtpXS5mb2N1cygpO1xyXG5cdFx0XHR9LDMwMCk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5yaC5JbmRpZ29TZXRTaWRlYmFyU2VhcmNoID0gZnVuY3Rpb24oKSB7XHJcblx0cmgubW9kZWwucHVibGlzaChyaC5jb25zdHMoXCJTSURFQkFSX1NUQVRFXCIpLCBcImZ0c1wiKTtcclxufVxyXG5yaC5JbmRpZ29TZXRUcmFuc2l0aW9uQWxsb3cgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXTtcclxuXHJcblx0dmFyIGFsbG93UGhvbmUgPSBcImFsbG93LXBob25lLXRyYW5zaXRpb25zXCI7XHJcblx0dmFyIGFsbG93VGFibGV0ID0gXCJhbGxvdy10YWJsZXQtdHJhbnNpdGlvbnNcIjtcclxuXHR2YXIgYWxsb3dEZXNrdG9wID0gXCJhbGxvdy1kZXNrdG9wLXRyYW5zaXRpb25zXCI7XHJcblxyXG5cdGJvZHkuY2xhc3NMaXN0LnJlbW92ZShhbGxvd1Bob25lKTtcclxuXHRib2R5LmNsYXNzTGlzdC5yZW1vdmUoYWxsb3dUYWJsZXQpO1xyXG5cdGJvZHkuY2xhc3NMaXN0LnJlbW92ZShhbGxvd0Rlc2t0b3ApO1xyXG5cclxuXHR2YXIgdG9TZXQgPSBmYWxzZTtcclxuXHRpZihyaC5tb2RlbC5nZXQocmguY29uc3RzKCdLRVlfU0NSRUVOX1BIT05FJykpID09IHRydWUpIHtcclxuXHRcdHRvU2V0ID0gYWxsb3dQaG9uZTtcclxuXHR9IGVsc2UgaWYocmgubW9kZWwuZ2V0KHJoLmNvbnN0cygnS0VZX1NDUkVFTl9UQUJMRVQnKSkgPT0gdHJ1ZSkge1xyXG5cdFx0dG9TZXQgPSBhbGxvd1RhYmxldDtcclxuXHR9IGVsc2UgaWYocmgubW9kZWwuZ2V0KHJoLmNvbnN0cygnS0VZX1NDUkVFTl9ERVNLVE9QJykpID09IHRydWUpIHtcclxuXHRcdHRvU2V0ID0gYWxsb3dEZXNrdG9wO1xyXG5cdH1cclxuXHJcblx0c2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cclxuXHRcdGJvZHkuY2xhc3NMaXN0LnJlbW92ZShhbGxvd1Bob25lKTsvL0Fsd2F5cyBtYWtlIHN1cmUgdGhlcmUgaXMgb25seSAxXHJcblx0XHRib2R5LmNsYXNzTGlzdC5yZW1vdmUoYWxsb3dUYWJsZXQpO1xyXG5cdFx0Ym9keS5jbGFzc0xpc3QucmVtb3ZlKGFsbG93RGVza3RvcCk7XHJcblxyXG5cdFx0Ym9keS5jbGFzc0xpc3QuYWRkKHRvU2V0KTtcclxuXHJcblx0fSwgMTApO1xyXG5cclxufVxyXG5cclxucmguaW5pdEluZGlnbyA9ICgpID0+IHtcclxuXHJcblx0cmgubW9kZWwuc3Vic2NyaWJlKHJoLmNvbnN0cyhcIlNJREVCQVJfU1RBVEVcIiksIHJoLkluZGlnb1NldFNpZGViYXIpO1xyXG5cdHJoLm1vZGVsLnN1YnNjcmliZShyaC5jb25zdHMoXCJFVlRfU0VBUkNIX0lOX1BST0dSRVNTXCIpLCByaC5JbmRpZ29TZXRTaWRlYmFyU2VhcmNoKTtcclxuXHRyaC5tb2RlbC5zdWJzY3JpYmUocmguY29uc3RzKFwiS0VZX1NDUkVFTlwiKSwgcmguSW5kaWdvU2V0VHJhbnNpdGlvbkFsbG93KTtcclxuXHJcblx0Ly9XaGVuIG9wZW5pbmcgdGhlIHBhZ2UsIGNoZWNrIHdoZXRoZXIgdGhlcmUgaXMgYSBoaWdobGlnaHQgdGVybS5cclxuXHQvL0lmIGZvdW5kLCBhZGQgaXQgdG8gdGhlIHNlYXJjaCBib3hcclxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0XHR2YXIgaGlnaGxpZ2h0ID0gZ2V0VXJsUGFyYW1ldGVyKFJISElHSExJR0hUVEVSTSk7XHJcblx0XHRpZihoaWdobGlnaHQgIT0gXCJcIikge1xyXG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpO1xyXG5cdFx0XHRmb3IodmFyIGk9MDtpPGlucHV0Lmxlbmd0aDtpKyspe1xyXG5cdFx0XHRcdGlmKGlucHV0W2ldLmNsYXNzTGlzdC5jb250YWlucyhcIndTZWFyY2hGaWVsZFwiKSl7XHJcblx0XHRcdFx0XHRpbnB1dFtpXS52YWx1ZSA9IGhpZ2hsaWdodDtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG4gICAgcmgubW9kZWwucHVibGlzaChyaC5jb25zdHMoJ0tFWV9TRUFSQ0hfVEVSTScpLCBoaWdobGlnaHQpO1xyXG5cdCAgfVxyXG4gIH0sIDI1MCk7XHJcblxyXG5cdC8vRm9yIEtleWJvYXJkIGFjY2Vzc2liaWxpdHksIGdldCB0aGUgRVNDIGtleSB0byBjbG9zZSBvdmVybGF5c1xyXG5cdGRvY3VtZW50Lm9ua2V5ZG93biA9IGZ1bmN0aW9uKGV2dCkge1xyXG5cdFx0ZXZ0ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuXHRcdGlmIChldnQua2V5Q29kZSA9PSAyNykge1xyXG5cdFx0XHRyaC5tb2RlbC5wdWJsaXNoKHJoLmNvbnN0cygnU0lERUJBUl9TVEFURScpLCBmYWxzZSk7XHJcblx0XHRcdHJoLkluZGlnb1NldEZvY3VzT25TZWFyY2goKTsvL0ZvY3VzIG9uIHRoZSBzZWFyY2ggZm9yIGtleWJvYXJkIGFjY2Vzc2liaWxpdHlcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcbiIsImxldCB7IF8gfSA9IHdpbmRvdy5yaDtcclxuXHJcblxyXG5fLnN0YWNrVHJhY2UgPSBmdW5jdGlvbigpIHtcclxuICBsZXQgZXJyID0gbmV3IEVycm9yKCk7XHJcbiAgcmV0dXJuIGVyci5zdGFjaztcclxufTtcclxuXHJcbl8uc2FmZUV4ZWMgPSBmbiA9PlxyXG4gIGZ1bmN0aW9uKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBpZiAocmguX2RlYnVnKSB7IHJoLl9kKCdlcnJvcicsIGBGdW5jdGlvbjogJHtmbn1gLCBlcnJvci5tZXNzYWdlKTsgfVxyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH1cclxuO1xyXG4iLCJsZXQgeyBfIH0gPSB3aW5kb3cucmg7XHJcblxyXG5cclxuXy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24ob2JqLCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgaWYgKG9iaiA9PSBudWxsKSB7IG9iaiA9IHdpbmRvdzsgfVxyXG4gIGlmIChvYmouYWRkRXZlbnRMaXN0ZW5lciAhPSBudWxsKSB7XHJcbiAgICByZXR1cm4gb2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgZmFsc2UpO1xyXG4gIH0gZWxzZSBpZiAob2JqLmF0dGFjaEV2ZW50ICE9IG51bGwpIHtcclxuICAgIHJldHVybiBvYmouYXR0YWNoRXZlbnQoYG9uJHtldmVudE5hbWV9YCwgY2FsbGJhY2spO1xyXG4gIH1cclxufTtcclxuXHJcbl8ucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKG9iaiwgZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG4gIGlmIChvYmogPT0gbnVsbCkgeyBvYmogPSB3aW5kb3c7IH1cclxuICBpZiAob2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIgIT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGZhbHNlKTtcclxuICB9IGVsc2UgaWYgKG9iai5kZXRhY2hFdmVudCAhPSBudWxsKSB7XHJcbiAgICByZXR1cm4gb2JqLmRldGFjaEV2ZW50KGBvbiR7ZXZlbnROYW1lfWAsIGNhbGxiYWNrKTtcclxuICB9XHJcbn07XHJcblxyXG5fLmlzVG91Y2hFbmFibGVkID0gKCkgPT4gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXy5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKGUpIHtcclxuICBpZiAoZS5wcmV2ZW50RGVmYXVsdCAhPSBudWxsKSB7XHJcbiAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gIH1cclxufTtcclxuXHJcbl8ubW91c2VCdXR0b24gPSBmdW5jdGlvbihlKSB7XHJcbiAgaWYgKCdidXR0b25zJyBpbiBlKSB7XHJcbiAgICByZXR1cm4gZS5idXR0b25zO1xyXG4gIH0gZWxzZSBpZiAoJ3doaWNoJyBpbiBlKSB7XHJcbiAgICByZXR1cm4gZS53aGljaDtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGUuYnV0dG9uO1xyXG4gIH1cclxufTtcclxuXHJcbl8uaW5pdE1vdXNlTW92ZSA9IChmdW5jdGlvbigpIHtcclxuICBsZXQgaW5pdERvbmUgPSBmYWxzZTtcclxuICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoIWluaXREb25lKSB7XHJcbiAgICAgIGluaXREb25lID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIF8uYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudCwgJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoIWUuZGVmYXVsdFByZXZlbnRlZCkge1xyXG4gICAgICAgICAgbGV0IG9iaiA9IHt4OiBlLmNsaWVudFgsIHk6IGUuY2xpZW50WSwgd2hpY2g6IF8ubW91c2VCdXR0b24oZSl9O1xyXG4gICAgICAgICAgcmgubW9kZWwucHVibGlzaChyaC5jb25zdHMoJ0VWVF9NT1VTRU1PVkUnKSwgb2JqLCB7c3luYzogdHJ1ZX0pO1xyXG4gICAgICAgICAgaWYgKG9iai5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybiBfLnByZXZlbnREZWZhdWx0KGUpOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59KSgpO1xyXG5cclxuXy5nZXRTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCAhPSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybiBbcGFnZVhPZmZzZXQsIHBhZ2VZT2Zmc2V0XTtcclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIHN4LCBzeSwgZCA9IGRvY3VtZW50LFxyXG4gICAgICByID0gZC5kb2N1bWVudEVsZW1lbnQsXHJcbiAgICAgIGIgPSBkLmJvZHk7XHJcbiAgICBzeCA9IHIuc2Nyb2xsTGVmdCB8fCBiLnNjcm9sbExlZnQgfHwgMDtcclxuICAgIHN5ID0gci5zY3JvbGxUb3AgfHwgYi5zY3JvbGxUb3AgfHwgMDtcclxuICAgIHJldHVybiBbc3gsIHN5XTtcclxuICB9XHJcbn1cclxuXHJcbl8uaW5pdFRvdWNoRXZlbnQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgbGV0IGluaXREb25lID0gZmFsc2U7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCFpbml0RG9uZSAmJiBfLmlzVG91Y2hFbmFibGVkKCkpIHtcclxuICAgICAgbGV0IHgsIHksIHkxO1xyXG4gICAgICBpbml0RG9uZSA9IHRydWU7XHJcbiAgICAgIGxldCB4MSA9ICh5MSA9ICh4ID0gKHkgPSAwKSkpO1xyXG4gIFxyXG4gICAgICBsZXQgY2FsY3VsYXRlRGlyZWN0aW9uID0gXy5kZWJvdW5jZShmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgZGlyZWN0aW9uO1xyXG4gICAgICAgIGxldCBhbmdsZSA9IE1hdGguYXRhbigoeTEgLSB5KSAvICh4MSAtIHgpKTtcclxuICAgICAgICBpZiAoeDEgPiB4KSB7XHJcbiAgICAgICAgICBkaXJlY3Rpb24gPVxyXG4gICAgICAgICAgICBhbmdsZSA+IChNYXRoLlBJIC8gNCkgP1xyXG4gICAgICAgICAgICAgICdkb3duJ1xyXG4gICAgICAgICAgICA6IGFuZ2xlIDwgKC1NYXRoLlBJIC8gNCkgP1xyXG4gICAgICAgICAgICAgICd1cCdcclxuICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICdyaWdodCc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGRpcmVjdGlvbiA9XHJcbiAgICAgICAgICAgIGFuZ2xlID4gKE1hdGguUEkgLyA0KSA/XHJcbiAgICAgICAgICAgICAgJ3VwJ1xyXG4gICAgICAgICAgICA6IGFuZ2xlIDwgKC1NYXRoLlBJIC8gNCkgP1xyXG4gICAgICAgICAgICAgICdkb3duJ1xyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgJ2xlZnQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByaC5tb2RlbC5wdWJsaXNoKCcudG91Y2htb3ZlJywge3gsIHksIHgxLCB5MX0pO1xyXG4gICAgICAgIHJoLm1vZGVsLnB1Ymxpc2gocmguY29uc3RzKCdFVlRfU1dJUEVfRElSJyksIGRpcmVjdGlvbiwge3N5bmM6IHRydWV9KTtcclxuICAgICAgICByaC5tb2RlbC5wdWJsaXNoKHJoLmNvbnN0cygnRVZUX1NXSVBFX0RJUicpLCBudWxsKTtcclxuICAgICAgICByZXR1cm4geCA9ICh5ID0gMCk7XHJcbiAgICAgIH1cclxuICAgICAgLCAyMDApO1xyXG5cclxuICAgICAgcmV0dXJuIF8uYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudCwgJ3RvdWNobW92ZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB4MSA9IChlLnRvdWNoZXNbMF0gIT0gbnVsbCA/IGUudG91Y2hlc1swXS5wYWdlWCA6IHVuZGVmaW5lZCkgfHwgMDtcclxuICAgICAgICB5MSA9IChlLnRvdWNoZXNbMF0gIT0gbnVsbCA/IGUudG91Y2hlc1swXS5wYWdlWSA6IHVuZGVmaW5lZCkgfHwgMDtcclxuICAgICAgICBpZiAoKHggPT09IDApICYmICh5ID09PSAwKSkge1xyXG4gICAgICAgICAgeCA9IHgxO1xyXG4gICAgICAgICAgeSA9IHkxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FsY3VsYXRlRGlyZWN0aW9uKCk7XHJcbiAgICAgICAgcmV0dXJuIF8ucHJldmVudERlZmF1bHQoZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pKCk7XHJcbiIsImxldCB7IF8gfSA9IHdpbmRvdy5yaDtcclxuXHJcbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnNcclxuXHJcbi8vIEV4OiBAa2V5KCd3b3cnKSA9PiB0aGlzLnB1Ymxpc2goJ2tleScsICd3b3cnKTtcclxubGV0IHB1Ymxpc2hSZWd4ID0gLyhefFteXFxcXF0pQChbXFx3XFwuXSopXFwoKC4qKVxcKS87XHJcblxyXG4vLyBFeDogeCA9IEBrZXkgPT4geCA9IHRoaXMuZ2V0KCdrZXknKTtcclxubGV0IGdldFJlZ3ggPSAvKF58W15cXFxcXSlAKFtcXHdcXC5dKikvO1xyXG5cclxuLy8gRXg6IHggPSBAS0VZID0+IHggPSByaC5jb25zdHMoJ0tFWScpXHJcbmxldCBtb2RlbENvbnN0c1JlZ3ggPSAvQChbQS1aXVtfQS1aMC05XSopLztcclxuXHJcblxyXG5fLnJlc29sdmVQdWJsaXNoID0gZnVuY3Rpb24oZXhwcmVzc2lvbikge1xyXG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAocHVibGlzaFJlZ3gpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBsZXQgbWF0Y2ggPSByZWdleC5leGVjKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKCFtYXRjaCkgeyBicmVhazsgfVxyXG4gICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZShtYXRjaFswXSxcclxuICAgICAgYCR7bWF0Y2hbMV19IHRoaXMucHVibGlzaCgnJHttYXRjaFsyXX0nLCAke21hdGNoWzNdfSlgKTtcclxuICB9XHJcbiAgcmV0dXJuIGV4cHJlc3Npb247XHJcbn07XHJcblxyXG5fLnJlc29sdmVHZXQgPSBmdW5jdGlvbihleHByZXNzaW9uLCBrZXlzKSB7XHJcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChnZXRSZWd4KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgbGV0IG1hdGNoID0gcmVnZXguZXhlYyhleHByZXNzaW9uKTtcclxuICAgIGlmICghbWF0Y2gpIHsgYnJlYWs7IH1cclxuICAgIGlmIChrZXlzICYmICgtMSA9PT0ga2V5cy5pbmRleE9mKG1hdGNoWzJdKSkpIHsga2V5cy5wdXNoKG1hdGNoWzJdKTsgfVxyXG4gICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZShtYXRjaFswXSxcclxuICAgICAgYCR7bWF0Y2hbMV19IHRoaXMuZ2V0KCcke21hdGNoWzJdfScpYCk7XHJcbiAgfVxyXG4gIHJldHVybiBleHByZXNzaW9uO1xyXG59O1xyXG5cclxuXy5yZXNvbHZlTW9kZWxDb25zdCA9IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcclxuICBsZXQgc3ViZXhwID0gJyc7XHJcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChtb2RlbENvbnN0c1JlZ3gpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBsZXQgbWF0Y2ggPSByZWdleC5leGVjKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKCFtYXRjaCkgeyBicmVhazsgfVxyXG4gICAgbGV0IGtleSA9IHJoLmNvbnN0cyhtYXRjaFsxXSk7XHJcbiAgICBpZiAoa2V5ICE9IG51bGwpIHtcclxuICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZShtYXRjaFswXSwgYEAke2tleX1gKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBpbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMV0ubGVuZ3RoICsgMTtcclxuICAgICAgc3ViZXhwICs9IGV4cHJlc3Npb24uc3Vic3RyaW5nKDAsIGluZGV4KTtcclxuICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24uc3Vic3RyaW5nKGluZGV4KTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHN1YmV4cCArIGV4cHJlc3Npb247XHJcbn07XHJcblxyXG5fLnJlc29sdmVNb2RlbEtleXMgPSBmdW5jdGlvbihleHByZXNzaW9uLCBrZXlzKSB7XHJcbiAgcmV0dXJuIHRoaXMucmVzb2x2ZUdldCh0aGlzLnJlc29sdmVQdWJsaXNoKHRoaXMucmVzb2x2ZU1vZGVsQ29uc3QoZXhwcmVzc2lvbikpLCBrZXlzKTtcclxufTtcclxuXHJcbl8uaXNWYWxpZE1vZGVsS2V5ID0gZnVuY3Rpb24oa2V5KSB7XHJcbiAgaWYgKChrZXkgPT09ICd0cnVlJykgfHwgKGtleSA9PT0gJ2ZhbHNlJykpIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgbGV0IG1hdGNoID0ga2V5Lm1hdGNoKC9bLl9hLXpBLVpdWy5fYS16QS1aMC05IF0qLyk7XHJcbiAgcmV0dXJuIG1hdGNoICYmIChtYXRjaFswXSA9PT0ga2V5KTtcclxufTtcclxuXHJcbl8uaXNWYWxpZE1vZGVsQ29uc3RLZXkgPSBmdW5jdGlvbihrZXkpIHtcclxuICBsZXQgbWF0Y2ggPSBrZXkubWF0Y2goL1tBLVpdW19BLVowLTldKi8pO1xyXG4gIHJldHVybiBtYXRjaCAmJiAobWF0Y2hbMF0gPT09IGtleSk7XHJcbn07XHJcblxyXG5fLmdldCA9IGZ1bmN0aW9uKG9iaiwgaXRlbUtleSkge1xyXG4gIGxldCB2YWx1ZTtcclxuICBsZXQga2V5cyA9IGl0ZW1LZXkuc3BsaXQoJy4nKTtcclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwga2V5cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgIGxldCBrZXkgPSBrZXlzW2luZGV4XTtcclxuICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICB2YWx1ZSA9IG9ialtrZXldO1xyXG4gICAgfSBlbHNlIGlmICh2YWx1ZSkge1xyXG4gICAgICB2YWx1ZSA9IHZhbHVlW2tleV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHZhbHVlO1xyXG59O1xyXG5cclxuXy5ncm91cEJ5ID0gZnVuY3Rpb24oYXJyYXksIGtleU9ySXRlcmF0b3IpIHtcclxuICB2YXIgaXRlcmF0b3IsIGtleVxyXG4gIGlmICh0eXBlb2Yga2V5ICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBrZXkgPSBTdHJpbmcoa2V5T3JJdGVyYXRvcilcclxuICAgIGl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW1ba2V5XSB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGl0ZXJhdG9yID0ga2V5T3JJdGVyYXRvclxyXG4gIH1cclxuICByZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBpdGVtKSB7XHJcbiAgICB2YXIga2V5ID0gaXRlcmF0b3IoaXRlbSlcclxuICAgIG1lbW9ba2V5XSA9IG1lbW9ba2V5XSB8fCBbXVxyXG4gICAgbWVtb1trZXldLnB1c2goaXRlbSlcclxuICAgIHJldHVybiBtZW1vXHJcbiAgfSwge30pXHJcbn1cclxuXHJcbl8uaXNTY3JlZW5BdHRhY2hlZCA9IHNjcnJlbk5hbWUgPT4gdHJ1ZSA9PT0gcmgubW9kZWwuZ2V0KGAke3JoLmNvbnN0cygnS0VZX1NDUkVFTicpfS4ke3NjcnJlbk5hbWV9LmF0dGFjaGVkYCk7XHJcblxyXG5fLnBhcmVudEtleSA9IGZ1bmN0aW9uKGZ1bGxLZXkpIHtcclxuICBsZXQga2V5cyA9IGZ1bGxLZXkuc3BsaXQoJy4nKTtcclxuICAoa2V5cy5wb3ApKCk7XHJcbiAgcmV0dXJuIGtleXMuam9pbignLicpO1xyXG59O1xyXG5cclxuXy5sYXN0S2V5ID0gZnVuY3Rpb24oZnVsbEtleSkge1xyXG4gIGxldCBrZXlzID0gZnVsbEtleS5zcGxpdCgnLicpO1xyXG4gIHJldHVybiBrZXlzW2tleXMubGVuZ3RoIC0gMV07XHJcbn07XHJcblxyXG5fLnNwbGl0S2V5ID0gZnVuY3Rpb24oZnVsbEtleSkge1xyXG4gIGxldCBrZXlzID0gZnVsbEtleS5zcGxpdCgnLicpO1xyXG4gIGxldCBrZXkgPSAoa2V5cy5wb3ApKCk7XHJcbiAgbGV0IHBhcmVudEtleSA9IGtleXMuam9pbignLicpO1xyXG4gIHJldHVybiB7a2V5LCBwYXJlbnRLZXl9O1xyXG59O1xyXG4iLCJsZXQgeyBfIH0gPSB3aW5kb3cucmg7XHJcblxyXG4vL1JlZ3VsYXIgRXhwcmVzc2lvbnNcclxuXHJcbi8vRXg6IFwiYWJjICN7dmFyMX1cIlxyXG5sZXQgZW5jbG9zZWRWYXJSZWd4ID0gL1xcI3soW159XSopXFx9L2c7XHJcbmxldCB1c2VyVmFyUmVneCA9IC9cXCQoW19hLXpBLVpdW19hLXpBLVowLTldKikvZztcclxubGV0IHJlZ3hTdHJpbmdSZWd4ID0gL1xcQlxcLyhbXlxcL10qKVxcLy9nO1xyXG5cclxuXy50b1JlZ0V4cCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gIGxldCByZWd4O1xyXG4gIGlmICghc3RyIHx8ICFfLmlzU3RyaW5nKHN0cikpIHsgcmV0dXJuIHN0cjsgfVxyXG4gIGxldCBtYXRjaGVzID0gc3RyLm1hdGNoKHJlZ3hTdHJpbmdSZWd4KTtcclxuICBsZXQgbWF0Y2ggPSBtYXRjaGVzICYmIG1hdGNoZXNbMF07XHJcbiAgaWYgKG1hdGNoKSB7XHJcbiAgICBsZXQgcGF0dGVybiA9IG1hdGNoLnN1YnN0cmluZygxLCBtYXRjaC5sZW5ndGggLSAxKTtcclxuICAgIGxldCBmbGFnID0gc3RyLnN1YnN0cmluZyhtYXRjaC5sZW5ndGgpO1xyXG4gICAgcmVneCA9IG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZyk7XHJcbiAgfVxyXG4gIHJldHVybiByZWd4IHx8IHN0cjtcclxufTtcclxuXHJcbl8uc3BsaXRBbmRUcmltID0gZnVuY3Rpb24oc3RyaW5nLCBzcGxpdEtleSkge1xyXG4gIGlmIChzdHJpbmcgPT0gbnVsbCkgeyBzdHJpbmcgPSAnJzsgfVxyXG4gIHJldHVybiBfLm1hcChzdHJpbmcuc3BsaXQoc3BsaXRLZXkpLCB2YWx1ZSA9PiB2YWx1ZS50cmltKCkpO1xyXG59O1xyXG5cclxuLypcclxuICogRXhwbG9kZXMgYSBzdHJpbmcgYmFzZWQgb24gZXhwbG9kZUtleSB0aGVuXHJcbiAqIGNyZWF0ZXMgYSBtYXAgdXNpbmcgdGhlIGV4cGxvZGVkIHN0cmluZ3MgYnkgc3BsaXR0aW5nIHRoZW0gZnVydGhlciBvbiBtYXBLZXlcclxuICovXHJcbl8uZXhwbG9kZUFuZE1hcCA9IGZ1bmN0aW9uKHN0cmluZywgZXhwbG9kZUtleSwgbWFwS2V5LCBvcHRzKSB7XHJcbiAgaWYgKHN0cmluZyA9PSBudWxsKSB7IHN0cmluZyA9ICcgJzsgfVxyXG4gIGlmIChvcHRzID09IG51bGwpIHsgb3B0cyA9IHt9OyB9XHJcbiAgbGV0IHBhaXJzID0gc3RyaW5nLnNwbGl0KGV4cGxvZGVLZXkpO1xyXG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAoYCR7bWFwS2V5fSguKyk/YCk7XHJcbiAgbGV0IG1hcCA9IHt9O1xyXG5cclxuICBmb3IgKGxldCByYXdQYWlyIG9mIEFycmF5LmZyb20ocGFpcnMpKSB7XHJcbiAgICBsZXQgcGFpciA9IHJhd1BhaXIuc3BsaXQocmVnZXgpO1xyXG4gICAgbGV0IGtleSA9IHBhaXJbMF0udHJpbSgpO1xyXG4gICAgbGV0IHZhbHVlID0gcGFpclsxXTtcclxuXHJcbiAgICBpZiAob3B0cy5jYXNlSW5zZW5zaXRpdmUpIHsga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7IH1cclxuICAgIGlmIChvcHRzLnRyaW0pIHsgdmFsdWUgPSB2YWx1ZSAmJiB2YWx1ZS50cmltKCk7IH1cclxuICAgIGlmICgob3B0cy5kZWZhdWx0ICE9IG51bGwpICYmICh2YWx1ZSA9PSBudWxsKSkgeyB2YWx1ZSA9IG9wdHMuZGVmYXVsdDsgfVxyXG5cclxuICAgIGlmIChrZXkgIT09ICcnKSB7IG1hcFtrZXldID0gdmFsdWU7IH1cclxuICB9XHJcbiAgcmV0dXJuIG1hcDtcclxufTtcclxuXHJcbl8ucmVzb2x2ZU5hbWVkVmFyID0gZnVuY3Rpb24oZXhwcikge1xyXG4gIGxldCBtYXRjaGVzO1xyXG4gIGlmIChtYXRjaGVzID0gZXhwci5tYXRjaCh1c2VyVmFyUmVneCkpIHtcclxuICAgIGZvciAobGV0IG1hdGNoIG9mIEFycmF5LmZyb20obWF0Y2hlcykpIHtcclxuICAgICAgZXhwciA9IGV4cHIucmVwbGFjZShtYXRjaCwgYHRoaXMudXNlcl92YXJzLiR7bWF0Y2guc3Vic3RyaW5nKDEpfWApO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZXhwcjtcclxufTtcclxuXHJcbl8ucmVzb2x2ZUVuY2xvc2VkVmFyID0gZnVuY3Rpb24oZXhwciwgY2FsbGJhY2ssIGNvbnRleHQpIHtcclxuICBsZXQgbWF0Y2hlcztcclxuICBpZiAoY29udGV4dCA9PSBudWxsKSB7IGNvbnRleHQgPSB0aGlzOyB9XHJcbiAgaWYgKG1hdGNoZXMgPSBleHByLm1hdGNoKGVuY2xvc2VkVmFyUmVneCkpIHtcclxuICAgIGZvciAobGV0IG1hdGNoIG9mIEFycmF5LmZyb20obWF0Y2hlcykpIHtcclxuICAgICAgbGV0IG5hbWUgPSBtYXRjaC5zdWJzdHJpbmcoMiwgbWF0Y2gubGVuZ3RoIC0gMSkudHJpbSgpO1xyXG4gICAgICBsZXQgdmFsdWUgPSBjYWxsYmFjay5jYWxsKGNvbnRleHQsIG5hbWUpO1xyXG4gICAgICBleHByID0gZXhwci5yZXBsYWNlKG1hdGNoLCAodmFsdWUgIT0gbnVsbCkgPyB2YWx1ZSA6ICcnKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGV4cHI7XHJcbn07XHJcblxyXG4vLyB1c2UgJy4nIGFzIGF0dHJpYiBuYW1lIHRvIHBhc3Mgb3B0cyBmb3IgYXR0cnMgZGF0YVxyXG5fLnJlc29sdmVBdHRyID0gc3RyaW5nID0+XHJcbiAgXy5yZWR1Y2UoXy5leHBsb2RlQW5kTWFwKHN0cmluZywgJzsnLCAnOicpLCBmdW5jdGlvbihyLCB2LCBrKSB7XHJcbiAgICBfLmVhY2goay5zcGxpdCgnLCcpLCBrZXkgPT4gcltrZXkudHJpbSgpXSA9IHYpO1xyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG4gICwge30pXHJcbjtcclxuXHJcbl8ucmVzb2x2ZU5pY2VKU09OID0gZnVuY3Rpb24oc3RyaW5nKSB7XHJcbiAgaWYgKHN0cmluZyA9PSBudWxsKSB7IHN0cmluZyA9ICcnOyB9XHJcbiAgc3RyaW5nID0gKHN0cmluZy50cmltKSgpO1xyXG4gIGlmICghc3RyaW5nKSB7IHJldHVybiB7fTsgfVxyXG4gIGlmIChzdHJpbmdbMF0gPT09ICd7Jykge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyaW5nKTtcclxuICB9IGVsc2Uge1xyXG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoLycvZywgJ1wiJyk7XHJcbiAgICBzdHJpbmcgPSBgeyR7c3RyaW5nfX1gO1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyaW5nLnJlcGxhY2UoLyhcXHt8LClcXHMqKC4rPylcXHMqOi9nLCAnJDEgXCIkMlwiOicpKTtcclxuICB9XHJcbn07XHJcblxyXG5fLnJlc29sdmVQaXBlZEV4cHJlc3Npb24gPSBmdW5jdGlvbihzdHJpbmcpIHtcclxuICBpZiAoc3RyaW5nID09IG51bGwpIHsgc3RyaW5nID0gJyc7IH1cclxuICBsZXQgY29uY2F0TmV4dCA9IGZhbHNlO1xyXG4gIHJldHVybiBfLnJlZHVjZShzdHJpbmcuc3BsaXQoJ3wnKSwgZnVuY3Rpb24ocmVzdWx0LCBpdGVtKSB7XHJcbiAgICBsZXQgbWVyZ2VkSXRlbTtcclxuICAgIGlmIChjb25jYXROZXh0ICYmIChyZXN1bHQubGVuZ3RoID4gMCkpIHtcclxuICAgICAgbWVyZ2VkSXRlbSA9IGAke3Jlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV19IHx8JHtpdGVtfWA7XHJcbiAgICAgIHJlc3VsdC5sZW5ndGggPSByZXN1bHQubGVuZ3RoIC0gMTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uY2F0TmV4dCA9IGl0ZW0ubGVuZ3RoID09PSAwO1xyXG4gICAgaWYgKG1lcmdlZEl0ZW0pIHsgaXRlbSA9IG1lcmdlZEl0ZW07IH1cclxuICAgIFxyXG4gICAgaWYgKGl0ZW0ubGVuZ3RoICE9PSAwKSB7IHJlc3VsdC5wdXNoKGl0ZW0udHJpbSgpKTsgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgLCBbXSk7XHJcbn07XHJcblxyXG5fLnJlc29sdmVMb29wRXhwciA9IGZ1bmN0aW9uKGNvbmZpZykge1xyXG4gIGxldCB2YWx1ZSA9IGNvbmZpZy5zcGxpdCgnOicpO1xyXG4gIGlmICh2YWx1ZS5sZW5ndGggPiAxKSB7XHJcbiAgICBsZXQgdmFycyA9IF8uc3BsaXRBbmRUcmltKHZhbHVlLnNoaWZ0KCksICcsJyk7XHJcbiAgICByZXR1cm4ge2V4cHI6IHZhbHVlWzBdLCBpbmRleDogdmFyc1swXSwgaXRlbTogdmFyc1sxXX07XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiB7ZXhwcjogdmFsdWVbMF19O1xyXG4gIH1cclxufTtcclxuXHJcbl8ucmVzb2x2ZVdpZGdldEFyZ3MgPSBmdW5jdGlvbihyYXdBcmdzKSB7XHJcbiAgbGV0IHBhaXJzID0gcmF3QXJncy5zcGxpdCgnOycpO1xyXG4gIHJldHVybiBfLm1hcChwYWlycywgZnVuY3Rpb24ocGFpcikge1xyXG4gICAgbGV0IHdBcmc7XHJcbiAgICBsZXQgcGlwZWRBcmdzID0gXy5yZXNvbHZlUGlwZWRFeHByZXNzaW9uKHBhaXIpO1xyXG4gICAgbGV0IGFyZ3MgPSAocGlwZWRBcmdzLnNoaWZ0KSgpIHx8ICcnO1xyXG4gICAgYXJncyA9IGFyZ3Muc3BsaXQoLzooLispPy8pO1xyXG4gICAgbGV0IHdOYW1lID0gYXJnc1swXS50cmltKCk7XHJcbiAgICBsZXQgcmF3QXJnID0gcGFpci5zdWJzdHJpbmcod05hbWUubGVuZ3RoKS50cmltKCk7XHJcbiAgICBpZiAocmF3QXJnWzBdID09PSAnOicpIHsgcmF3QXJnID0gcmF3QXJnLnN1YnN0cmluZygxKTsgfVxyXG4gICAgaWYgKHdBcmcgPSBhcmdzWzFdKSB7XHJcbiAgICAgIGlmICgtMSAhPT0gd0FyZy5zZWFyY2goJzonKSkge1xyXG4gICAgICAgIHdBcmcgPSBfLmV4cGxvZGVBbmRNYXAod0FyZywgJywnLCAnOicsIHt0cmltOiB0cnVlfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd0FyZyA9IHthcmc6IHdBcmd9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge3dOYW1lLCB3QXJnLCBwaXBlZEFyZ3MsIHJhd0FyZ307XHJcbn0pO1xyXG59O1xyXG5cclxuXy5yZXNvbHZlRXhwck9wdGlvbnMgPSBmdW5jdGlvbihyYXdBcmdzKSB7XHJcbiAgbGV0IG9wdHM7XHJcbiAgbGV0IHZhbHVlcyA9IF8ucmVzb2x2ZVBpcGVkRXhwcmVzc2lvbihyYXdBcmdzKTtcclxuICBpZiAodmFsdWVzWzFdKSB7IG9wdHMgPSBfLnJlc29sdmVOaWNlSlNPTih2YWx1ZXNbMV0pOyB9XHJcbiAgcmV0dXJuIHtleHByOiB2YWx1ZXNbMF0sIG9wdHN9O1xyXG59O1xyXG5cclxuXy5yZXNvbHZlSW5wdXRLZXlzID0gZnVuY3Rpb24ocmF3QXJncykge1xyXG4gIGxldCBvcHRzO1xyXG4gIGxldCB2YWx1ZXMgPSBfLnJlc29sdmVQaXBlZEV4cHJlc3Npb24ocmF3QXJncyk7XHJcbiAgaWYgKHZhbHVlc1sxXSkgeyBvcHRzID0gXy5yZXNvbHZlTmljZUpTT04odmFsdWVzWzFdKTsgfVxyXG4gIGxldCBrZXlzID0gXy5leHBsb2RlQW5kTWFwKHZhbHVlc1swXSwgJywnLCAnOicsIHt0cmltOiB0cnVlfSk7XHJcbiAgcmV0dXJuIHtrZXlzLCBvcHRzfTtcclxufTtcclxuXHJcbl8uYXBwbHlDYWxsYmFja09wdGlvbnMgPSBmdW5jdGlvbihjYWxsYmFjaywgb3B0cykge1xyXG4gIGxldCBuZXdDYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gIGlmIChvcHRzICYmIG9wdHMuZGVib3VuY2UpIHtcclxuICAgIG5ld0NhbGxiYWNrID0gXy5kZWJvdW5jZShuZXdDYWxsYmFjaywgb3B0cy5kZWJvdW5jZSk7XHJcbiAgfVxyXG4gICAgXHJcbiAgaWYgKG9wdHMgJiYgb3B0cy50b2dnbGVUaW1lb3V0KSB7XHJcbiAgICBuZXdDYWxsYmFjayA9IF8udG9nZ2xlVGltZW91dChuZXdDYWxsYmFjaywgb3B0cy50b2dnbGVUaW1lb3V0KTtcclxuICB9XHJcblxyXG4gIGlmIChvcHRzICYmIG9wdHMudGltZW91dCkge1xyXG4gICAgbmV3Q2FsbGJhY2sgPSBfLnRpbWVvdXQobmV3Q2FsbGJhY2ssIG9wdHMudGltZW91dCk7XHJcbiAgfVxyXG5cclxuICBpZiAob3B0cyAmJiBvcHRzLmRlZmVyKSB7XHJcbiAgICBuZXdDYWxsYmFjayA9IF8udGltZW91dChuZXdDYWxsYmFjaywgMSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3Q2FsbGJhY2s7XHJcbn07XHJcblxyXG5fLnBhcnNlSW50ID0gZnVuY3Rpb24oc3RyaW5nLCBkZWZhdWx0VmFsdWUsIGJhc2UpIHtcclxuICBpZiAoYmFzZSA9PSBudWxsKSB7IGJhc2UgPSAxMDsgfVxyXG4gIGlmICgoc3RyaW5nICE9IG51bGwpICYmIChzdHJpbmcgIT09ICcnKSkge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgYmFzZSk7XHJcbiAgfSBlbHNlIGlmIChkZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHN0cmluZztcclxuICB9XHJcbn07XHJcbiIsImxldCB7IF8gfSA9IHdpbmRvdy5yaDtcclxuXHJcbl8uaGFzTm9uQXNjaWlDaGFyID0gZnVuY3Rpb24oc3RyKSB7IGlmIChzdHIgPT0gbnVsbCkgeyBzdHIgPSAnJzsgfSByZXR1cm4gXy5hbnkoc3RyLCBjaCA9PiBjaC5jaGFyQ29kZUF0KDApID4gMTI3KTsgfTtcclxuIiwibGV0IHsgXyB9ID0gd2luZG93LnJoO1xyXG5sZXQgeyBjb25zdHMgfSA9IHdpbmRvdy5yaDtcclxuXHJcblxyXG5fLm1hcFRvRW5jb2RlZFN0cmluZyA9IGZ1bmN0aW9uKG1hcCwgZXhwbG9kZUtleSwgbWFwS2V5KSB7XHJcbiAgaWYgKGV4cGxvZGVLZXkgPT0gbnVsbCkgeyBleHBsb2RlS2V5ID0gJyYnOyB9XHJcbiAgaWYgKG1hcEtleSA9PSBudWxsKSB7IG1hcEtleSA9ICc9JzsgfVxyXG4gIHJldHVybiBfLnJlZHVjZShtYXAsIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xyXG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7IHJlc3VsdCArPSBleHBsb2RlS2V5OyB9XHJcbiAgICAgIHJlc3VsdCArPSBgJHtrZXl9JHttYXBLZXl9JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICAsICcnKTtcclxufTtcclxuXHJcbl8uZW5jb2RlZFN0cmluZ1RvTWFwID0gZnVuY3Rpb24oc3RyaW5nLCBleHBsb2RlS2V5LCBtYXBLZXkpIHtcclxuICBpZiAoZXhwbG9kZUtleSA9PSBudWxsKSB7IGV4cGxvZGVLZXkgPSAnJic7IH1cclxuICBpZiAobWFwS2V5ID09IG51bGwpIHsgbWFwS2V5ID0gJz0nOyB9XHJcbiAgbGV0IG1hcCA9IF8uZXhwbG9kZUFuZE1hcChzdHJpbmcsIGV4cGxvZGVLZXksIG1hcEtleSwge2RlZmF1bHQ6ICcnfSk7XHJcbiAgXy5lYWNoKG1hcCwgKHZhbHVlLCBrZXkpID0+XHJcbiAgeyBcclxuICAgIHRyeVxyXG4gICAge1xyXG4gICAgICBtYXBba2V5XSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSlcclxuICAgICB9XHJcbiAgICBjYXRjaCAoZSlcclxuICAgIHsgXHJcbiAgICAgIG1hcFtrZXldID0gdmFsdWVcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gbWFwO1xyXG59O1xyXG5cclxuXy51cmxQYXJhbXMgPSBmdW5jdGlvbihxdWVyeSkge1xyXG4gIGlmIChxdWVyeSA9PSBudWxsKSB7XHJcbiAgICAgcXVlcnkgPSBfLmV4dHJhY3RQYXJhbVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xyXG4gIH1cclxuICByZXR1cm4gXy5lbmNvZGVkU3RyaW5nVG9NYXAocXVlcnkpO1xyXG59O1xyXG5cclxuXy51cmxQYXJhbSA9IGZ1bmN0aW9uKGtleSwgcXVlcnkpIHtcclxuICBpZiAocXVlcnkgPT0gbnVsbCkgeyBxdWVyeSA9IGxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7IH1cclxuICByZXR1cm4ga2V5ICYmIF8udXJsUGFyYW1zKHF1ZXJ5KVtrZXldO1xyXG59O1xyXG5cclxuXy5oYXNoUGFyYW1zID0gZnVuY3Rpb24oaGFzaCkge1xyXG4gIGlmIChoYXNoID09IG51bGwpIHsgaGFzaCA9IGxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpOyB9XHJcbiAgcmV0dXJuIF8uZW5jb2RlZFN0cmluZ1RvTWFwKGhhc2gpO1xyXG59O1xyXG5cclxuXy5oYXNoUGFyYW0gPSBrZXkgPT4ga2V5ICYmIF8uaGFzaFBhcmFtcygpW2tleV07XHJcblxyXG5fLnVwZGF0ZUhhc2hNYXAgPSBmdW5jdGlvbihjaGFuZ2VNYXAsIGFkZFRvSGlzdG9yeSkge1xyXG4gIGxldCBuZXdNYXAgPSBfLmV4dGVuZCh7fSwgXy5oYXNoUGFyYW1zKCksIGNoYW5nZU1hcCk7XHJcbiAgXy5lYWNoKG5ld01hcCwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICBkZWxldGUgbmV3TWFwW2tleV07XHJcbiAgICB9XHJcbiAgfSlcclxuICBsZXQgaGFzaCA9IF8ubWFwVG9FbmNvZGVkU3RyaW5nKG5ld01hcCk7XHJcbiAgaWYgKGhhc2gubGVuZ3RoID4gMCkgeyBoYXNoID0gYCMke2hhc2h9YDsgfVxyXG5cclxuICBpZiAoYWRkVG9IaXN0b3J5KSB7XHJcbiAgICByZXR1cm4gbG9jYXRpb24uaGFzaCA9IGhhc2g7XHJcbiAgfSBlbHNlIGlmICgoaGFzaCAhPT0gJycpICYmIChsb2NhdGlvbi5oYXNoICE9PSBoYXNoKSkge1xyXG4gICAgcmV0dXJuIGxvY2F0aW9uLnJlcGxhY2UoaGFzaCk7XHJcbiAgfVxyXG59O1xyXG5cclxuXy5xdWV1ZVVwZGF0ZUhhc2hNYXAgPSAoaGFzaE1hcCwgYWRkVG9IaXN0b3J5KSA9PiBfLmRlZmVyKCgpID0+IF8udXBkYXRlSGFzaE1hcChoYXNoTWFwLCBhZGRUb0hpc3RvcnkpKTtcclxuXHJcbl8uc3RyaXBTdHJpbmdCZXR3ZWVuID0gZnVuY3Rpb24oc3RyLCBzdGFydENoYXIsIGVuZENoYXIpIHtcclxuICBsZXQgbmV3U3RyO1xyXG4gIGxldCBzdGFydCA9IHN0ci5pbmRleE9mKHN0YXJ0Q2hhcik7XHJcbiAgaWYgKHN0YXJ0ICE9PSAtMSkge1xyXG4gICAgbGV0IGVuZCA9IHN0ci5pbmRleE9mKGVuZENoYXIpO1xyXG4gICAgaWYgKGVuZCA8IHN0YXJ0KSB7IGVuZCA9IHN0ci5sZW5ndGg7IH1cclxuICAgIG5ld1N0ciA9IGAke3N0ci5zdWJzdHJpbmcoMCwgc3RhcnQpfSR7c3RyLnN1YnN0cmluZyhlbmQsIHN0ci5sZW5ndGgpfWA7XHJcbiAgfVxyXG4gIHJldHVybiBuZXdTdHIgfHwgc3RyO1xyXG59O1xyXG5cclxuXy5zdHJpcFBhcmFtID0gZnVuY3Rpb24odXJsKSB7XHJcbiAgaWYgKHVybCA9PSBudWxsKSB7IHVybCA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7IH1cclxuICByZXR1cm4gXy5zdHJpcFN0cmluZ0JldHdlZW4odXJsLCAnPycsICcjJyk7XHJcbn07XHJcblxyXG5fLnN0cmlwQm9va21hcmsgPSBmdW5jdGlvbih1cmwpIHtcclxuICBpZiAodXJsID09IG51bGwpIHsgdXJsID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjsgfVxyXG4gIHJldHVybiBfLnN0cmlwU3RyaW5nQmV0d2Vlbih1cmwsICcjJywgJz8nKTtcclxufTtcclxuXHJcbl8uZXh0cmFjdFN0cmluZ0JldHdlZW4gPSBmdW5jdGlvbihzdHIsIHN0YXJ0Q2hhciwgZW5kQ2hhcikge1xyXG4gIGxldCBzdWJzdHJpbmc7XHJcbiAgbGV0IHN0YXJ0ID0gc3RyLmluZGV4T2Yoc3RhcnRDaGFyKTtcclxuICBpZiAoc3RhcnQgIT09IC0xKSB7XHJcbiAgICBsZXQgZW5kID0gc3RyLmluZGV4T2YoZW5kQ2hhcik7XHJcbiAgICBpZiAoZW5kIDwgc3RhcnQpIHsgZW5kID0gc3RyLmxlbmd0aDsgfVxyXG4gICAgc3Vic3RyaW5nID0gc3RyLnN1YnN0cmluZyhzdGFydCArIDEsIGVuZCk7XHJcbiAgfVxyXG4gIHJldHVybiBzdWJzdHJpbmcgfHwgJyc7XHJcbn07XHJcblxyXG5fLmV4dHJhY3RQYXJhbVN0cmluZyA9IGZ1bmN0aW9uKHVybCkge1xyXG4gIGlmICh1cmwgPT0gbnVsbCkgeyB1cmwgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmOyB9XHJcbiAgcmV0dXJuIF8uZXh0cmFjdFN0cmluZ0JldHdlZW4odXJsLCAnPycsICcjJyk7XHJcbn07XHJcblxyXG5fLmV4dHJhY3RIYXNoU3RyaW5nID0gZnVuY3Rpb24odXJsKSB7XHJcbiAgaWYgKHVybCA9PSBudWxsKSB7IHVybCA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7IH1cclxuICByZXR1cm4gXy5leHRyYWN0U3RyaW5nQmV0d2Vlbih1cmwsICcjJywgJz8nKTtcclxufTtcclxuXHJcblxyXG4vLyMjIyMjXHJcbi8vIHBhdGhUcmF2ZXJzZVRvKGZyb21QYXRoLCB0b1BhdGgpXHJcbi8vIFRha2VzIGluIHR3byBhYnNvbHV0ZSBwYXRocyBhbmQgc2ltdWxhdGVzXHJcbi8vIHRyYXZlcnNhbCBmcm9tIGZyb21QYXRoIHRvIHRvUGF0aC5cclxuLy8gUmV0dXJucyB0aGUgc3RlcHMgbmVlZWQgdG8gdHJhdmVyc2UgZnJvbVxyXG4vLyBmcm9tUGF0aCB0byB0b1BhdGguXHJcbi8vIyMjIyNcclxuLy8gVE9ETzogQ29tcGxldGUgdGhpcyBtZXRob2RcclxuXy50cmF2ZXJzZVRvUGF0aCA9IChmcm9tUGF0aCwgdG9QYXRoKSA9PiAnJztcclxuXHJcbmxldCBwcm9jZXNzUGF0aFVuaXQgPSBmdW5jdGlvbihmdWxsUGF0aCwgcGF0aFVuaXQsIHNlcGFyYXRvcikge1xyXG4gIGlmIChzZXBhcmF0b3IgPT0gbnVsbCkgeyBzZXBhcmF0b3IgPSAnLyc7IH1cclxuICBzd2l0Y2ggKHBhdGhVbml0KSB7XHJcbiAgICBjYXNlICcuJzogcmV0dXJuIGZ1bGxQYXRoO1xyXG4gICAgY2FzZSAnLi4nOiByZXR1cm4gZnVsbFBhdGguc3Vic3RyaW5nKDAsIGZ1bGxQYXRoLmxhc3RJbmRleE9mKHNlcGFyYXRvcikpO1xyXG4gICAgZGVmYXVsdDogcmV0dXJuIGZ1bGxQYXRoICsgc2VwYXJhdG9yICsgcGF0aFVuaXQ7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8jIyMjI1xyXG4vLyBwYXRoVHJhdmVyc2VCeShmcm9tUGF0aCwgdHJhdmVyc2VCeSlcclxuLy8gVGFrZXMgaW4gdHdvIHBhdGggY29tcG9uZW50cyBhbmQgc2ltdWxhdGVzXHJcbi8vIHRyYXZlcnNhbCBmcm9tIGZyb21QYXRoIGJ5IHRyYXZlcnNlQnkuXHJcbi8vIFJldHVybnMgdGhlIHJlc3VsdGluZyBwYXRoIGFmdGVyIHRoZSB0cmF2ZXJzYWwuXHJcbi8vIEVnOiAnQzovYS9iL2MvJywgJy4uLy4uLycgcmV0dW5zICdDOi9hLydcclxuLy8jIyMjI1xyXG5fLnRyYXZlcnNlQnlQYXRoID0gZnVuY3Rpb24oZnJvbVBhdGgsIHRyYXZlcnNlQnksIHNlcGFyYXRvcikge1xyXG4gIGlmIChzZXBhcmF0b3IgPT0gbnVsbCkgeyBzZXBhcmF0b3IgPSAnLyc7IH1cclxuICBmcm9tUGF0aCA9IGZyb21QYXRoLnN1YnN0cmluZygwLCBmcm9tUGF0aC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpKTtcclxuICBsZXQgcGFydHMgPSB0cmF2ZXJzZUJ5LnNwbGl0KHNlcGFyYXRvcik7XHJcblxyXG4gIGZvciAobGV0IHBhcnQgb2YgQXJyYXkuZnJvbShwYXJ0cykpIHtcclxuICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZnJvbVBhdGggPSBwcm9jZXNzUGF0aFVuaXQoZnJvbVBhdGgsIHBhcnQsIHNlcGFyYXRvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZnJvbVBhdGggKyBzZXBhcmF0b3I7XHJcbn07XHJcblxyXG5fLnNjaGVtZSA9IGZ1bmN0aW9uKHVybCkge1xyXG4gIGxldCBzY2hlbWU7XHJcbiAgbGV0IGluZGV4ID0gdXJsLmluZGV4T2YoJzonKTtcclxuICBpZiAoaW5kZXggIT09IC0xKSB7IHNjaGVtZSA9IHVybC5zdWJzdHJpbmcoMCwgaW5kZXggKyAxKS50b0xvd2VyQ2FzZSgpLnRyaW0oKTsgfVxyXG4gIHJldHVybiBzY2hlbWU7XHJcbn07XHJcbiAgXHJcbl8ucHJvdG9jb2wgPSBmdW5jdGlvbih1cmwpIHtcclxuICBsZXQgcHJvdG9jb2w7XHJcbiAgbGV0IGluZGV4ID0gdXJsLnRyaW0oKS5pbmRleE9mKCc6Jyk7XHJcbiAgaWYgKGluZGV4ICE9PSAtMSkgeyBwcm90b2NvbCA9IHVybC5zdWJzdHJpbmcoMCwgaW5kZXggKyAxKS50b0xvd2VyQ2FzZSgpOyB9XHJcbiAgaWYgKHByb3RvY29sKSB7XHJcbiAgICBsZXQgbWF0Y2ggPSBwcm90b2NvbC5tYXRjaCgvXlthLXpdKzovKTtcclxuICAgIGlmICghbWF0Y2ggfHwgKG1hdGNoWzBdLmxlbmd0aCAhPT0gcHJvdG9jb2wubGVuZ3RoKSkgeyBwcm90b2NvbCA9IHVuZGVmaW5lZDsgfVxyXG4gIH1cclxuICByZXR1cm4gcHJvdG9jb2w7XHJcbn07XHJcblxyXG5fLmlzSW50ZXJuYWwgPSB1cmxOYW1lID0+XHJcbiAgKHVybE5hbWUuaW5kZXhPZignLy8nKSAhPT0gMCkgJiYgKHVybE5hbWUuaW5kZXhPZignLyYjNDc7JykgIT09IDApICYmXHJcbiAgKHVybE5hbWUuaW5kZXhPZignJiM0NzsvJykgIT09IDApICYmICh1cmxOYW1lLmluZGV4T2YoJyYjNDc7JiM0NzsnKSAhPT0gMClcclxuO1xyXG5cclxuXy5pc0phdmFTY3JpcHRVcmwgPSB1cmwgPT4gJ2phdmFzY3JpcHQ6JyA9PT0gXy5zY2hlbWUodXJsKTtcclxuXHJcbl8uaXNSZWxhdGl2ZVVybCA9IHVybCA9PiAhXy5zY2hlbWUodXJsKSAmJiB1cmwudHJpbSgpLmluZGV4T2YoJy8nKTtcclxuXHJcbl8uaXNWYWxpZEZpbGVVcmwgPSBmdW5jdGlvbih1cmwpIHtcclxuICBpZiAodXJsWzBdID09PSAnIycpIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgbGV0IHNjaGVtZSA9IF8uc2NoZW1lKHVybCk7XHJcbiAgcmV0dXJuICFzY2hlbWUgfHwgKFsnaHR0cDonLCAnaHR0cHM6JywgJ2Z0cDonLCAnZmlsZTonXS5pbmRleE9mKHNjaGVtZSkgIT09IC0xKTtcclxufTtcclxuXHJcbl8ubWFrZVJlbGF0aXZlVXJsID0gZnVuY3Rpb24oYWJzVXJsLCBiYXNlVXJsKSB7XHJcbiAgaWYgKGJhc2VVcmwgPT0gbnVsbCkgeyBiYXNlVXJsID0gZGVjb2RlVVJJKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpOyB9XHJcbiAgaWYgKGFic1VybCA9PT0gYmFzZVVybCkgeyByZXR1cm4gJyc7IH1cclxuICBsZXQgYWJzUGF0aCA9IF8uZmlsZVBhdGgoYWJzVXJsKTtcclxuICBsZXQgYmFzZVBhdGggPSBfLmZpbGVQYXRoKGJhc2VVcmwpO1xyXG4gIGxldCByZWxQYXRoID0gXy5tYWtlUmVsYXRpdmVQYXRoKGFic1BhdGgsIGJhc2VQYXRoKTtcclxuICByZXR1cm4gYCR7cmVsUGF0aH0ke2Fic1VybC5zdWJzdHJpbmcoYWJzUGF0aC5sZW5ndGgpfWA7XHJcbn07XHJcblxyXG5fLm1ha2VSZWxhdGl2ZVBhdGggPSBmdW5jdGlvbihhYnNVcmwsIGJhc2VVcmwpIHtcclxuICBsZXQgcmVsVXJsO1xyXG4gIGlmIChiYXNlVXJsID09IG51bGwpIHsgYmFzZVVybCA9IF8uZmlsZVBhdGgoKTsgfVxyXG4gIGlmIChhYnNVcmwgJiYgIV8uaXNSZWxhdGl2ZVVybChhYnNVcmwpICYmICFfLmlzUmVsYXRpdmVVcmwoYmFzZVVybCkpIHtcclxuICAgIGxldCBzcmNQYXJ0cyA9IGFic1VybC5zcGxpdCgnLycpO1xyXG4gICAgbGV0IGJhc2VQYXJ0cyA9IGJhc2VVcmwuc3BsaXQoJy8nKTtcclxuICAgIGxldCBpZHggPSAwO1xyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgaWYgKChzcmNQYXJ0cy5sZW5ndGggPT09IGlkeCkgfHwgKGJhc2VQYXJ0cy5sZW5ndGggPT09IGlkeCkpIHsgYnJlYWs7IH1cclxuICAgICAgaWYgKHNyY1BhcnRzW2lkeF0gIT09IGJhc2VQYXJ0c1tpZHhdKSB7IGJyZWFrOyB9XHJcbiAgICAgIGlkeCsrO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsZXQgcmVsUGFydHMgPSBzcmNQYXJ0cy5zbGljZShpZHgpO1xyXG4gICAgcmVsVXJsID0gJyc7XHJcbiAgICBsZXQgZG90ZG90Y291bnQgPSBiYXNlUGFydHMubGVuZ3RoIC0gaWR4IC0gMTtcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgIGlmIChkb3Rkb3Rjb3VudCA8PSAwKSB7IGJyZWFrOyB9XHJcbiAgICAgIHJlbFVybCArPSAnLi4vJztcclxuICAgICAgZG90ZG90Y291bnQtLTtcclxuICAgIH1cclxuICAgIHJlbFVybCArPSByZWxQYXJ0cy5qb2luKCcvJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJlbFVybCA9IGFic1VybDtcclxuICB9XHJcbiAgcmV0dXJuIHJlbFVybDtcclxufTtcclxuXHJcbl8ubWFrZUZ1bGxVcmwgPSBmdW5jdGlvbihyZWxVcmwsIHBhcmVudFBhdGgpIHtcclxuICBpZiAocGFyZW50UGF0aCA9PSBudWxsKSB7IHBhcmVudFBhdGggPSByaC5fLnBhcmVudFBhdGgoKTsgfVxyXG4gIGlmIChfLmlzUmVsYXRpdmVVcmwocmVsVXJsKSkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5fZ2V0RnVsbFBhdGgocGFyZW50UGF0aCwgcmVsVXJsKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHJlbFVybDtcclxuICB9XHJcbn07XHJcblxyXG5fLmlzTG9jYWwgPSAoKSA9PiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdmaWxlOic7XHJcblxyXG5fLmlzUmVtb3RlID0gKCkgPT4gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonO1xyXG5cclxubGV0IGN1ck9yaWdpbiA9IG51bGw7XHJcbl8uaXNTYW1lT3JpZ2luID0gZnVuY3Rpb24ob3JpZ2luKSB7XHJcbiAgaWYgKF8uaXNMb2NhbCgpKSB7IHJldHVybiB0cnVlOyB9XHJcbiAgbGV0IHsgbG9jYXRpb24gfSA9IHdpbmRvdztcclxuICBpZiAoY3VyT3JpZ2luID09IG51bGwpIHsgY3VyT3JpZ2luID0gbG9jYXRpb24ub3JpZ2luOyB9XHJcbiAgaWYgKGN1ck9yaWdpbiA9PSBudWxsKSB7XHJcbiAgICBjdXJPcmlnaW4gPSBgJHtsb2NhdGlvbi5wcm90b2NvbH0vLyR7bG9jYXRpb24uaG9zdG5hbWV9YDtcclxuICAgIGlmIChsb2NhdGlvbi5wb3J0KSB7IGN1ck9yaWdpbiArPSBgOiR7bG9jYXRpb24ucG9ydH1gOyB9XHJcbiAgfVxyXG4gIHJldHVybiBjdXJPcmlnaW4gPT09IG9yaWdpbjtcclxufTtcclxuXHJcbl8uZmlsZVBhdGggPSBmdW5jdGlvbih1cmwpIHtcclxuICBpZiAodXJsID09IG51bGwpIHsgdXJsID0gZGVjb2RlVVJJKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpOyB9XHJcbiAgbGV0IGluZGV4ID0gdXJsLmluZGV4T2YoJz8nKTtcclxuICBpZiAoaW5kZXggIT09IC0xKSB7IHVybCA9IHVybC5zdWJzdHJpbmcoMCwgaW5kZXgpOyB9XHJcbiAgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xyXG4gIGlmIChpbmRleCAhPT0gLTEpIHsgdXJsID0gdXJsLnN1YnN0cmluZygwLCBpbmRleCk7IH1cclxuICByZXR1cm4gdXJsO1xyXG59O1xyXG5cclxuXy5wYXJlbnRQYXRoID0gZnVuY3Rpb24oZmlsZVBhdGgpIHtcclxuICBpZiAoZmlsZVBhdGggPT0gbnVsbCkgeyBmaWxlUGF0aCA9IF8uZmlsZVBhdGgoKTsgfVxyXG4gIGxldCBpbmRleCA9IGZpbGVQYXRoLmxhc3RJbmRleE9mKCcvJyk7XHJcbiAgaWYgKGluZGV4ICE9PSAtMSkgeyBmaWxlUGF0aCA9IGZpbGVQYXRoLnN1YnN0cmluZygwLCBpbmRleCArIDEpOyB9XHJcbiAgcmV0dXJuIGZpbGVQYXRoO1xyXG59O1xyXG5cclxuXy5nZXRGaWxlTmFtZSA9IGZ1bmN0aW9uKGFic1VybCkge1xyXG4gIGxldCBmaWxlUGF0aCA9IF8uZmlsZVBhdGgoYWJzVXJsKTtcclxuICBsZXQgaWR4ID0gZmlsZVBhdGgubGFzdEluZGV4T2YoJy8nKTtcclxuICBsZXQgZmlpbGVOYW1lID0gaWR4ICE9PSAtMSA/IGZpbGVQYXRoLnN1YnN0cmluZyhpZHggKyAxKSA6IGZpbGVQYXRoO1xyXG4gIHJldHVybiBmaWlsZU5hbWUgfHwgJyc7XHJcbn07XHJcblxyXG5fLmdldEZpbGVFeHRlbnRpb24gPSBmdW5jdGlvbihhYnNVcmwpIHtcclxuICBsZXQgZXh0O1xyXG4gIGxldCBmaWlsZU5hbWUgPSBfLmdldEZpbGVOYW1lKGFic1VybCk7XHJcbiAgbGV0IGlkeCA9IGZpaWxlTmFtZSAhPSBudWxsID8gZmlpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykgOiB1bmRlZmluZWQ7XHJcbiAgaWYgKGlkeCAhPT0gLTEpIHsgZXh0ID0gZmlpbGVOYW1lLnN1YnN0cmluZyhpZHgpOyB9XHJcbiAgcmV0dXJuIGV4dCB8fCAnJztcclxufTtcclxuIiwiaWYgKHdpbmRvdy5yaCA9PSBudWxsKSB7IHdpbmRvdy5yaCA9IHt9OyB9XHJcbmNvbnN0IHsgcmggfSA9IHdpbmRvdztcclxuaWYgKHJoLl8gPT0gbnVsbCkgeyByaC5fID0ge307IH1cclxucmgudXRpbCA9IHJoLl87XHJcbmNvbnN0IHsgXyB9ID0gcmg7XHJcblxyXG5jb25zdCBuYXRpdmVGb3JFYWNoICAgPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcclxuY29uc3QgbmF0aXZlS2V5cyAgICAgID0gT2JqZWN0LmtleXM7XHJcbmNvbnN0IHsgaGFzT3duUHJvcGVydHkgfSAgPSBPYmplY3QucHJvdG90eXBlO1xyXG5cclxuXy50aW1lID0gKCkgPT4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcclxuXHJcbl8uZGVsYXkgPSBmdW5jdGlvbihmbiwgd2FpdCkge1xyXG4gIGNvbnN0IGFyZ3MgPSBbXTsgbGV0IGkgPSAxO1xyXG4gIHdoaWxlICgrK2kgPCBhcmd1bWVudHMubGVuZ3RoKSB7IGFyZ3MucHVzaChhcmd1bWVudHNbaV0pOyB9XHJcbiAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4gZm4uYXBwbHkobnVsbCwgYXJncylcclxuICAsIHdhaXQpO1xyXG59O1xyXG5cclxuXy5kZWZlciA9IGZ1bmN0aW9uKGZuKSB7XHJcbiAgY29uc3QgYXJncyA9IFtdOyBsZXQgaSA9IDA7XHJcbiAgd2hpbGUgKCsraSA8IGFyZ3VtZW50cy5sZW5ndGgpIHsgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7IH1cclxuICByZXR1cm4gdGhpcy5kZWxheS5hcHBseSh0aGlzLCBbZm4sIDFdLmNvbmNhdChhcmdzKSk7XHJcbn07XHJcblxyXG5fLmRlYm91bmNlID0gZnVuY3Rpb24oZm4sIHRocmVzaG9sZCwgZXhlY0FzYXApIHtcclxuICBsZXQgdGltZW91dCA9IG51bGw7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgYXJncyA9IFtdO1xyXG4gICAgZm9yIChsZXQgYXJnIG9mIEFycmF5LmZyb20oYXJndW1lbnRzKSkgeyBhcmdzLnB1c2goYXJnKTsgfVxyXG4gICAgY29uc3Qgb2JqID0gdGhpcztcclxuICAgIGNvbnN0IGRlbGF5ZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKCFleGVjQXNhcCkgeyBmbi5hcHBseShvYmosIGFyZ3MpOyB9XHJcbiAgICAgIHJldHVybiB0aW1lb3V0ID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBpZiAodGltZW91dCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICB9IGVsc2UgaWYgKGV4ZWNBc2FwKSB7XHJcbiAgICAgIGZuLmFwcGx5KG9iaiwgYXJncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGltZW91dCA9IHNldFRpbWVvdXQoZGVsYXllZCwgdGhyZXNob2xkIHx8IDEwMCk7XHJcbiAgfTtcclxufTtcclxuXHJcbl8udGhyb3R0bGUgPSBmdW5jdGlvbihmbiwgdGhyZXNob2xkKSB7XHJcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xyXG4gIGxldCBmbkV4ZWN1dGVkID0gZmFsc2U7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgYXJncyA9IFtdO1xyXG4gICAgZm9yIChsZXQgYXJnIG9mIEFycmF5LmZyb20oYXJndW1lbnRzKSkgeyBhcmdzLnB1c2goYXJnKTsgfVxyXG4gICAgY29uc3Qgb2JqID0gdGhpcztcclxuICAgIGNvbnN0IGRlbGF5ZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKCFmbkV4ZWN1dGVkKSB7IGZuLmFwcGx5KG9iaiwgYXJncyk7IH1cclxuICAgICAgcmV0dXJuIHRpbWVvdXQgPSBudWxsO1xyXG4gICAgfTtcclxuICAgIGlmICh0aW1lb3V0KSB7XHJcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgZm5FeGVjdXRlZCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm4uYXBwbHkob2JqLCBhcmdzKTtcclxuICAgICAgZm5FeGVjdXRlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGRlbGF5ZWQsIHRocmVzaG9sZCB8fCAxMDApO1xyXG4gIH07XHJcbn07XHJcblxyXG5fLnRpbWVvdXQgPSAoZm4sIHdhaXQpID0+XHJcbiAgZnVuY3Rpb24oKSB7XHJcbiAgICBjb25zdCBhcmdzID0gW107XHJcbiAgICBmb3IgKGxldCBhcmcgb2YgQXJyYXkuZnJvbShhcmd1bWVudHMpKSB7IGFyZ3MucHVzaChhcmcpOyB9XHJcbiAgICBjb25zdCBvYmogPSB0aGlzO1xyXG4gICAgY29uc3QgZGVsYXllZCA9ICgpID0+IGZuLmFwcGx5KG9iaiwgYXJncyk7XHJcbiAgICByZXR1cm4gc2V0VGltZW91dChkZWxheWVkLCB3YWl0KTtcclxuICB9XHJcbjtcclxuXHJcbl8udG9nZ2xlVGltZW91dCA9IChmbiwgd2FpdCwgdG9nZ2xlKSA9PlxyXG4gIGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgYXJncyA9IFtdO1xyXG4gICAgZm9yIChsZXQgYXJnIG9mIEFycmF5LmZyb20oYXJndW1lbnRzKSkgeyBhcmdzLnB1c2goYXJnKTsgfVxyXG4gICAgY29uc3Qgb2JqID0gdGhpcztcclxuICAgIGNvbnN0IGRlbGF5ZWQgPSAoKSA9PiBmbi5hcHBseShvYmosIGFyZ3MpO1xyXG4gICAgaWYgKHRvZ2dsZSkge1xyXG4gICAgICBpZiAocmguX2RlYnVnKSB7IGFyZ3MucHVzaChfLnN0YWNrVHJhY2UoKSk7IH1cclxuICAgICAgc2V0VGltZW91dChkZWxheWVkLCB3YWl0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRlbGF5ZWQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0b2dnbGUgPSAhdG9nZ2xlO1xyXG4gIH1cclxuO1xyXG5cclxuLy8gT2JqZWN0IG1ldGhvZHNcclxuXHJcbl8uaGFzID0gKG9iaiwga2V5KSA9PiAob2JqICE9IG51bGwpICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG5cclxuXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgY29uc3Qga2V5cyA9IFtdO1xyXG4gIGlmICghXy5pc09iamVjdChvYmopKSB7IHJldHVybiBrZXlzOyB9XHJcbiAgaWYgKG5hdGl2ZUtleXMpIHsgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTsgfVxyXG4gIGZvciAobGV0IGtleSBpbiBvYmopIHsgaWYgKF8uaGFzKG9iaiwga2V5KSkgeyBrZXlzLnB1c2goa2V5KTsgfSB9XHJcbiAgcmV0dXJuIGtleXM7XHJcbn07XHJcblxyXG4vL0l0ZXJhdG9yc1xyXG5cclxuXy5hbnkgPSBmdW5jdGlvbihvYmosIGZuLCBjb250ZXh0KSB7XHJcbiAgaWYgKGNvbnRleHQgPT0gbnVsbCkgeyBjb250ZXh0ID0gdGhpczsgfVxyXG4gIGlmIChvYmogPT0gbnVsbCkgeyByZXR1cm4gZmFsc2U7IH1cclxuICBjb25zdCBrZXlzID0gKG9iai5sZW5ndGggIT09ICtvYmoubGVuZ3RoKSAmJiBfLmtleXMob2JqKTtcclxuICBjb25zdCB7IGxlbmd0aCB9ID0gKGtleXMgfHwgb2JqKTtcclxuICBsZXQgaW5kZXggPSAwO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBpZiAoaW5kZXggPj0gbGVuZ3RoKSB7IGJyZWFrOyB9XHJcbiAgICBjb25zdCBrZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcclxuICAgIGlmIChmbi5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaikpIHsgcmV0dXJuIHRydWU7IH1cclxuICAgIGluZGV4Kys7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbl8uZWFjaCA9IGZ1bmN0aW9uKG9iaiwgZm4sIGNvbnRleHQpIHtcclxuICBsZXQgdmFsdWU7XHJcbiAgaWYgKGNvbnRleHQgPT0gbnVsbCkgeyBjb250ZXh0ID0gdGhpczsgfVxyXG4gIGlmIChvYmogPT0gbnVsbCkgeyByZXR1cm47IH1cclxuICBpZiAobmF0aXZlRm9yRWFjaCA9PT0gb2JqLmZvckVhY2gpIHtcclxuICAgIG9iai5mb3JFYWNoKGZuLCBjb250ZXh0KTtcclxuICB9IGVsc2UgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSB7XHJcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb2JqLmxlbmd0aDsgaW5kZXgrKykgeyB2YWx1ZSA9IG9ialtpbmRleF07IGZuLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBvYmopOyB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvciAobGV0IGtleSBpbiBvYmopIHsgdmFsdWUgPSBvYmpba2V5XTsgZm4uY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCBvYmopOyB9XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcblxyXG5fLm1hcCA9IGZ1bmN0aW9uKG9iaiwgZm4sIGNvbnRleHQpIHtcclxuICBpZiAoY29udGV4dCA9PSBudWxsKSB7IGNvbnRleHQgPSB0aGlzOyB9XHJcbiAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgXy5lYWNoKG9iaiwgKHZhbHVlLCBrZXksIG9iaikgPT4gcmVzdWx0LnB1c2goZm4uY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCBvYmopKSk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbl8ucmVkdWNlID0gZnVuY3Rpb24ob2JqLCBmbiwgaW5pdGlhbCwgY29udGV4dCkge1xyXG4gIGlmIChjb250ZXh0ID09IG51bGwpIHsgY29udGV4dCA9IHRoaXM7IH1cclxuICBfLmVhY2gob2JqLCAodmFsdWUsIGtleSkgPT4gaW5pdGlhbCA9IGZuLmNhbGwoY29udGV4dCwgaW5pdGlhbCwgdmFsdWUsIGtleSkpO1xyXG4gIHJldHVybiBpbml0aWFsO1xyXG59O1xyXG5cclxuXy5maW5kID0gZnVuY3Rpb24ob2JqLCBmbiwgY29udGV4dCkge1xyXG4gIGlmIChjb250ZXh0ID09IG51bGwpIHsgY29udGV4dCA9IHRoaXM7IH1cclxuICBsZXQgcmVzdWx0ID0gdW5kZWZpbmVkO1xyXG4gIF8uYW55KG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqKSB7XHJcbiAgICBpZiAoZm4uY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCBvYmopKSB7XHJcbiAgICAgIHJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuXy5maW5kSW5kZXggPSBmdW5jdGlvbihvYmosIGZuLCBjb250ZXh0KSB7XHJcbiAgaWYgKGNvbnRleHQgPT0gbnVsbCkgeyBjb250ZXh0ID0gdGhpczsgfVxyXG4gIGxldCByZXN1bHQgPSAtMTtcclxuICBfLmFueShvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iaikge1xyXG4gICAgaWYgKGZuLmNhbGwoY29udGV4dCwgdmFsdWUsIGtleSwgb2JqKSkge1xyXG4gICAgICByZXN1bHQgPSBrZXk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5fLmZpbmRQYXJlbnROb2RlID0gZnVuY3Rpb24obm9kZSwgcm9vdE5vZGUsIGZuLCBjb250ZXh0KSB7XHJcbiAgaWYgKHJvb3ROb2RlID09IG51bGwpIHsgcm9vdE5vZGUgPSBkb2N1bWVudDsgfVxyXG4gIGlmIChjb250ZXh0ID09IG51bGwpIHsgY29udGV4dCA9IHRoaXM7IH1cclxuICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgaWYgKCFub2RlIHx8IChub2RlID09PSByb290Tm9kZSkpIHsgYnJlYWs7IH1cclxuICAgIGlmIChmbi5jYWxsKGNvbnRleHQsIG5vZGUpKSB7XHJcbiAgICAgIHJlc3VsdCA9IG5vZGU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbl8uZmlsdGVyID0gZnVuY3Rpb24ob2JqLCBmbiwgY29udGV4dCkge1xyXG4gIGlmIChjb250ZXh0ID09IG51bGwpIHsgY29udGV4dCA9IHRoaXM7IH1cclxuICBjb25zdCByZXN1bHQgPSBbXTtcclxuICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcclxuICAgIGlmIChmbi5jYWxsKGNvbnRleHQsIHZhbHVlLCBrZXksIG9iaikpIHsgcmV0dXJuIHJlc3VsdC5wdXNoKHZhbHVlKTsgfVxyXG4gIH0pO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5fLmZsYXR0ZW4gPSBvYmogPT5cclxuICBfLnJlZHVjZShvYmosIChyZXN1bHQsIGVsZW0pID0+IHJlc3VsdC5jb25jYXQoZWxlbSlcclxuICAsIFtdKVxyXG47XHJcblxyXG5fLnVuaXF1ZSA9IGZ1bmN0aW9uKG9iaiwgZm4sIGNvbnRleHQpIHtcclxuICBpZiAoY29udGV4dCA9PSBudWxsKSB7IGNvbnRleHQgPSB0aGlzOyB9XHJcbiAgaWYgKGZuKSB7IG9iaiA9IF8ubWFwKG9iaiwgZm4sIGNvbnRleHQpOyB9XHJcbiAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgKHZhbHVlLCBpbmRleCkgPT4gb2JqLmluZGV4T2YodmFsdWUpID09PSBpbmRleCk7XHJcbn07XHJcblxyXG5fLnVuaW9uID0gZnVuY3Rpb24ob2JqLCBmbiwgY29udGV4dCkge1xyXG4gIGlmIChjb250ZXh0ID09IG51bGwpIHsgY29udGV4dCA9IHRoaXM7IH1cclxuICBpZiAoZm4pIHsgb2JqID0gXy5tYXAob2JqLCBmbiwgY29udGV4dCk7IH1cclxuICByZXR1cm4gXy51bmlxdWUoXy5mbGF0dGVuKG9iaikpO1xyXG59O1xyXG5cclxuXy5jb3VudCA9IGZ1bmN0aW9uKG9iaiwgZm4sIGNvbnRleHQpIHtcclxuICBpZiAoY29udGV4dCA9PSBudWxsKSB7IGNvbnRleHQgPSB0aGlzOyB9XHJcbiAgbGV0IGNvdW50ID0gMDtcclxuICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHsgaWYgKGZuLmNhbGwoY29udGV4dCwgdmFsdWUsIGtleSwgb2JqKSkgeyByZXR1cm4gY291bnQrKzsgfSB9KTtcclxuICByZXR1cm4gY291bnQ7XHJcbn07XHJcblxyXG5fLmV4dGVuZCA9IGZ1bmN0aW9uKG9iaiwgb2xkT2JqLCBuZXdPYmopIHtcclxuICBpZiAob2xkT2JqKSB7IF8uZWFjaChvbGRPYmosICh2YWx1ZSwga2V5KSA9PiBvYmpba2V5XSA9IHZhbHVlKTsgfVxyXG4gIGlmIChuZXdPYmopIHsgXy5lYWNoKG5ld09iaiwgKHZhbHVlLCBrZXkpID0+IG9ialtrZXldID0gdmFsdWUpOyB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxuXHJcbl8uYWRkUGF0aE5hbWVLZXkgPSBmdW5jdGlvbihvYmopIHtcclxuICByZXR1cm4gXy5leHRlbmQob2JqLCB7J3BhdGhuYW1lJzogZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSl9KVxyXG59XHJcblxyXG5fLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHsgcmV0dXJuIG9iajsgfVxyXG4gIHJldHVybiBfLnJlZHVjZShvYmosIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xyXG4gICAgcmVzdWx0W2tleV0gPSBfLmNsb25lKHZhbHVlKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gICwge30pO1xyXG59O1xyXG5cclxuXy5jb21wYWN0ID0gYXJyYXkgPT4gXy5maWx0ZXIoYXJyYXksIGl0ZW0gPT4gaXRlbSk7XHJcblxyXG5fLmNvbXBhY3RPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcclxuICBpZiAob2JqID09IG51bGwpIHsgb2JqID0ge307IH1cclxuICByZXR1cm4gXy5yZWR1Y2Uob2JqLCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcclxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgIGlmIChfLmlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlID0gXy5jb21wYWN0T2JqZWN0KHZhbHVlKTtcclxuICAgICAgICBpZiAoIV8uaXNFbXB0eU9iamVjdCh2YWx1ZSkpIHsgcmVzdWx0W2tleV0gPSB2YWx1ZTsgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdFtrZXldID0gIHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICAsIHt9KTtcclxufTtcclxuXHJcbl8uaXNTdHJpbmcgPSB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xyXG5cclxuXy5pc0Z1bmN0aW9uID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xyXG5cclxuXy5pc09iamVjdCA9IHZhbHVlID0+ICh2YWx1ZSAhPT0gbnVsbCkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpO1xyXG5cclxuXy5pc0RlZmluZWQgPSB2YWx1ZSA9PiAodmFsdWUgIT09IG51bGwpICYmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKTtcclxuXHJcbl8uaXNFbXB0eVN0cmluZyA9IHZhbHVlID0+IHZhbHVlLmxlbmd0aCA9PT0gMDtcclxuXHJcbl8uaXNVc2VmdWxTdHJpbmcgPSB2YWx1ZSA9PiBfLmlzRGVmaW5lZCh2YWx1ZSkgJiYgIV8uaXNFbXB0eVN0cmluZyh2YWx1ZSk7XHJcblxyXG5fLmlzRW1wdHlPYmplY3QgPSB2YWx1ZSA9PiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xyXG5cclxuXy5pc0VxdWFsID0gZnVuY3Rpb24ob2JqMSwgb2JqMikge1xyXG4gIGlmICh0eXBlb2Ygb2JqMSAhPT0gdHlwZW9mIG9iajIpIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgaWYgKCFfLmlzRGVmaW5lZChvYmoxKSB8fCAhXy5pc0RlZmluZWQob2JqMikpIHsgcmV0dXJuIG9iajEgPT09IG9iajI7IH1cclxuXHJcbiAgc3dpdGNoICh0eXBlb2Ygb2JqMSkge1xyXG4gICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgcmV0dXJuIF8uaXNFcXVhbE9iamVjdChvYmoxLCBvYmoyKTtcclxuICAgIGNhc2UgJ2FycmF5JzpcclxuICAgICAgcmV0dXJuICFfLmFueShvYmoxLCAodmFsdWUsIGluZGV4KSA9PiAhXy5pc0VxdWFsKHZhbHVlLCBvYmoyW2luZGV4XSkpO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIG9iajEgPT09IG9iajI7XHJcbiAgfVxyXG59O1xyXG5cclxuXy5pc0VxdWFsT2JqZWN0ID0gZnVuY3Rpb24ob2JqMSwgb2JqMikge1xyXG4gIGNvbnN0IGtleXMxID0gXy5maWx0ZXIoXy5rZXlzKG9iajEpLCBrZXkgPT4gb2JqMVtrZXldICE9PSB1bmRlZmluZWQpO1xyXG4gIGNvbnN0IGtleXMyID0gXy5maWx0ZXIoXy5rZXlzKG9iajIpLCBrZXkgPT4gb2JqMltrZXldICE9PSB1bmRlZmluZWQpO1xyXG4gIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cclxuICByZXR1cm4gIV8uYW55KGtleXMxLCBrZXkgPT4gIV8uaXNFcXVhbChvYmoxW2tleV0sIG9iajJba2V5XSkpO1xyXG59O1xyXG5cclxuXHJcbl8uaXNaZXJvQ1NTVmFsdWUgPSB2YWx1ZSA9PiAodmFsdWUgPT09ICcwJykgfHwgKHZhbHVlID09PSAnMHB4JykgfHwgKHZhbHVlID09PSAnMGVtJykgfHwgKHZhbHVlID09PSAnMCUnKTtcclxuXHJcbi8vSGVscGVyIG1ldGhvZHNcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICBsZXQgbG9jYWxEQjtcclxuICB0cnkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rlc3RMb2NhbERCJywgdHJ1ZSk7XHJcbiAgICBsb2NhbERCID0gKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0ZXN0TG9jYWxEQicpICE9IG51bGwpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rlc3RMb2NhbERCJyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGxvY2FsREIgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBfLmNhblVzZUxvY2FsREIgID0gKCkgPT4gbG9jYWxEQjtcclxufSkoKTtcclxuXHJcbl8uaXNJZnJhbWUgPSAoKSA9PiBwYXJlbnQgIT09IHdpbmRvdztcclxuXHJcbl8uZXh0cmFjdFRlbXBEYXRhID0gKGV2ZW50LCB3aWRnZXQsIGRlZmF1bHREYXRhKSA9PiB7XHJcbiAgbGV0IHRlbXBJdGVtcyA9IGRlZmF1bHREYXRhO1xyXG4gIGlmKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdlcnJvcicpIHtcclxuICAgIHJldHVybiB0ZW1wSXRlbXM7XHJcbiAgfVxyXG4gIHRlbXBJdGVtcyA9IHdpZGdldC5nZXQocmguY29uc3RzKCdLRVlfVEVNUF9EQVRBJykpO1xyXG4gIHdpZGdldC5wdWJsaXNoKHJoLmNvbnN0cygnS0VZX1RFTVBfREFUQScpKTtcclxuICByZXR1cm4gdGVtcEl0ZW1zO1xyXG59O1xyXG5cclxuXy5sb2FkU2NyaXB0ID0gKGpzUGF0aCwgYXN5bmMgPSB0cnVlLCBvbmxvYWQgPSBudWxsLCBhdXRvZGVsZXRlID0gZmFsc2UsIG9uZXJyb3IgPSBudWxsKSA9PntcclxuICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gIHNjcmlwdC5hc3luYyA9IGFzeW5jID09PSB0cnVlO1xyXG4gIHNjcmlwdC5zcmMgPSBqc1BhdGg7XHJcbiAgc2NyaXB0Lm9ubG9hZCA9IF8uY3JlYXRlRnVuYyhvbmxvYWQsIGF1dG9kZWxldGUsIHNjcmlwdCk7XHJcbiAgc2NyaXB0Lm9uZXJyb3IgPSAob25lcnJvciAmJiBfLmNyZWF0ZUZ1bmMob25lcnJvciwgYXV0b2RlbGV0ZSwgc2NyaXB0KSkgfHwgc2NyaXB0Lm9ubG9hZDtcclxuICByZXR1cm4gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG59O1xyXG5cclxuXy5jcmVhdGVGdW5jID0gKGZ1bmMsIGF1dG9kZWxldGUsIHNjcmlwdCkgPT4ge1xyXG4gIHJldHVybiBmdW5jdGlvbihhcmdzKSB7XHJcbiAgICBpZiAoYXV0b2RlbGV0ZSkgeyBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcmlwdCk7IH1cclxuICAgIHJldHVybiBmdW5jICYmIGZ1bmMuY2FsbChudWxsLCBhcmdzKTtcclxuICB9XHJcbn07XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgY29uc3QgcmFuZG9tU3RyID0gKCkgPT4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkudG9TdHJpbmcoMzIpLnN1YnN0cmluZygxKTtcclxuXHJcbiAgcmV0dXJuIF8udW5pcXVlSWQgPSAoKSA9PiBgJHtfLnRpbWUoKS50b1N0cmluZygzMil9XyR7cmFuZG9tU3RyKCl9JHtyYW5kb21TdHIoKX0ke3JhbmRvbVN0cigpfWA7XHJcbn0pKCk7XHJcblxyXG5fLm9uZSA9IGZuID0+XHJcbiAgZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZuKSB7XHJcbiAgICAgIGNvbnN0IGZuMSA9IGZuO1xyXG4gICAgICBmbiA9IG51bGw7XHJcbiAgICAgIHJldHVybiBmbjEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICB9XHJcbjtcclxuXHJcbl8uY2FjaGUgPSBmdW5jdGlvbihpc1ZhbGlkLCBjYWNoZSkge1xyXG4gIGlmIChjYWNoZSA9PSBudWxsKSB7IGNhY2hlID0ge307IH1cclxuICByZXR1cm4gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHJldHVybiBjYWNoZVtuYW1lXTtcclxuICAgIH0gZWxzZSBpZiAoIWlzVmFsaWQgfHwgaXNWYWxpZCh2YWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIGNhY2hlW25hbWVdID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuXHJcbl8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGdlbmVyYXRvciwgY2FjaGUpIHtcclxuICBpZiAoY2FjaGUgPT0gbnVsbCkgeyBjYWNoZSA9IHt9OyB9XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgbGV0IGZ1bGxrZXk7XHJcbiAgICBmb3IgKGxldCBhcmcgb2YgQXJyYXkuZnJvbShhcmd1bWVudHMpKSB7XHJcbiAgICAgIGNvbnN0IGtleSA9IF8uaXNTdHJpbmcoYXJnKSA/IGFyZyA6IEpTT04uc3RyaW5naWZ5KGFyZyk7XHJcbiAgICAgIGZ1bGxrZXkgPSAoZnVsbGtleSAhPSBudWxsKSA/IGAke2Z1bGxrZXl9LCAke2tleX1gIDoga2V5O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmdWxsa2V5IGluIGNhY2hlKSB7XHJcbiAgICAgIHJldHVybiBjYWNoZVtmdWxsa2V5XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBjYWNoZVtmdWxsa2V5XSA9IGdlbmVyYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG4vLyBsYXN0IGFyZ3VtZW50IG9mIGdlbmVyYXRvciBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGJhY2sgZnVuY3Rpb25cclxuXy5tZW1vaXplQXN5bmMgPSBmdW5jdGlvbihnZW5lcmF0b3IsIGNhY2hlKSB7XHJcbiAgaWYgKGNhY2hlID09IG51bGwpIHsgY2FjaGUgPSB7fTsgfVxyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIGxldCBjYWxsYmFjaztcclxuICAgIGNvbnN0IGFyZ3MgPSBbXTtcclxuICAgIGZvciAobGV0IGFyZyBvZiBBcnJheS5mcm9tKGFyZ3VtZW50cykpIHsgYXJncy5wdXNoKGFyZyk7IH1cclxuICAgIGlmIChhcmdzLmxlbmd0aCA+IDEpIHsgY2FsbGJhY2sgPSAoYXJncy5wb3ApKCk7IH1cclxuICAgIGNvbnN0IGZ1bGxrZXkgPSBhcmdzLmpvaW4oJywgJyk7XHJcbiAgICBpZiAoZnVsbGtleSBpbiBjYWNoZSkge1xyXG4gICAgICByZXR1cm4gKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrKGNhY2hlW2Z1bGxrZXldKSA6IHVuZGVmaW5lZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcmdzLnB1c2goZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgIGNhY2hlW2Z1bGxrZXldID0gZGF0YTtcclxuICAgICAgICByZXR1cm4gKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrKGRhdGEpIDogdW5kZWZpbmVkKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBnZW5lcmF0b3IuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuXHJcbl8ucmVxdWlyZSA9IF8ubWVtb2l6ZUFzeW5jKChqc1BhdGgsIGNhbGxiYWNrKSA9PiBfLmxvYWRTY3JpcHQoanNQYXRoLCB0cnVlLCAoKSA9PiBjYWxsYmFjayhfLmV4cG9ydHMoKSkpKTtcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICBsZXQgY2FjaGUgPSB1bmRlZmluZWQ7XHJcbiAgcmV0dXJuIF8uZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICBjb25zdCByZXRWYWx1ZSA9IGNhY2hlO1xyXG4gICAgY2FjaGUgPSAodmFsdWUgIT0gbnVsbCkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcclxuICAgIHJldHVybiByZXRWYWx1ZTtcclxuICB9O1xyXG59KSgpO1xyXG4iLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5sZXQgdXRpbCA9IHJoLl87XHJcbmxldCB7ICQgfSA9IHJoO1xyXG5cclxubGV0IGRhdGFXaWRnZXQgPSBmdW5jdGlvbihhdHRyKSB7XHJcbiAgY2xhc3MgRGF0YVdpZGdldCBleHRlbmRzIHJoLldpZGdldCB7XHJcbiAgICBzdGF0aWMgaW5pdENsYXNzKCkge1xyXG4gIFxyXG4gICAgICB0aGlzLnByb3RvdHlwZS5kYXRhQXR0ck1ldGhvZHMgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IG1hcCA9IHt9O1xyXG4gICAgICAgIG1hcFtgZGF0YS0ke2F0dHJ9YF0gPSBgZGF0YV8ke2F0dHJ9YDtcclxuICAgICAgICByZXR1cm4gbWFwO1xyXG4gICAgICAgIH0pKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdHJpbmcoKSB7IHJldHVybiBgJHthdHRyfV8ke3RoaXMuX2NvdW50fWA7IH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XHJcbiAgICAgIHN1cGVyKG9wdHMpO1xyXG4gICAgICBcclxuICAgICAgLy8gVXNlIGdsb2JhbCBtb2RlbCB1bmxlc3Mgc29tZW9uZSBnaXZlcyB5b3UgaW4gamF2YXNjcmlwdFxyXG4gICAgICBpZiAodGhpcy5tb2RlbCA9PSBudWxsKSB7IHRoaXMubW9kZWwgPSByaC5tb2RlbDsgfVxyXG4gICAgICAkLmRhdGFzZXQodGhpcy5ub2RlLCBhdHRyLCBvcHRzLnJhd0FyZyk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdChwYXJlbnQpIHtcclxuICAgICAgaWYgKHRoaXMuaW5pdERvbmUpIHsgcmV0dXJuOyB9XHJcbiAgICAgIHRoaXMuaW5pdERvbmUgPSB0cnVlO1xyXG4gICAgICB0aGlzLmluaXRQYXJlbnQocGFyZW50KTtcclxuICAgICAgdGhpcy5pbml0VUkoKTtcclxuICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZURhdGFBdHRycyh0aGlzLm5vZGUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBEYXRhV2lkZ2V0LmluaXRDbGFzcygpO1xyXG4gICAgICBcclxuICByZXR1cm4gRGF0YVdpZGdldDtcclxufTtcclxuICAgIFxyXG5mb3IgKGxldCBhdHRyIG9mIEFycmF5LmZyb20ocmguV2lkZ2V0LnByb3RvdHlwZS5kYXRhQXR0cnMpKSB7IHdpbmRvdy5yaC53aWRnZXRzW2F0dHJdID0gIGRhdGFXaWRnZXQoYXR0cik7IH0iLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5sZXQgdXRpbCA9IHJoLl87XHJcbmxldCB7ICQgfSA9IHJoO1xyXG5cclxuY2xhc3MgR2xvYmFsIGV4dGVuZHMgcmguV2lkZ2V0IHtcclxuXHJcbiAgY29uc3RydWN0b3Iob3B0cykge1xyXG4gICAgc3VwZXIob3B0cyk7XHJcbiAgICBpZiAodGhpcy5tb2RlbCA9PSBudWxsKSB7IHRoaXMubW9kZWwgPSByaC5tb2RlbDsgfVxyXG4gIH1cclxufVxyXG4gICAgXHJcbndpbmRvdy5yaC53aWRnZXRzLkdsb2JhbCA9IEdsb2JhbDsiLCJsZXQgeyByaCB9ID0gd2luZG93O1xyXG5sZXQgeyBfIH0gPSByaDtcclxubGV0IHsgY29uc3RzIH0gPSByaDtcclxubGV0IHsgV2lkZ2V0IH0gPSByaDtcclxuaW1wb3J0ICQgZnJvbSAnLi4vY29tbW9uL3F1ZXJ5J1xyXG5cclxuY2xhc3MgTGlzdCBleHRlbmRzIFdpZGdldCB7XHJcbiAgc3RhdGljIGluaXRDbGFzcygpIHtcclxuXHJcbiAgICB0aGlzLnByb3RvdHlwZS5kYXRhSUF0dHJzID0gWydjaGlsZCddLmNvbmNhdChXaWRnZXQucHJvdG90eXBlLmRhdGFJQXR0cnMpO1xyXG4gICAgdGhpcy5wcm90b3R5cGUuZGF0YUlBdHRyTWV0aG9kcyA9ICgoKSA9PiBXaWRnZXQucHJvdG90eXBlLm1hcERhdGFBdHRyTWV0aG9kcyhMaXN0LnByb3RvdHlwZS5kYXRhSUF0dHJzKSkoKTtcclxuXHJcbiAgICB0aGlzLnByb3RvdHlwZS5zdXBwb3J0ZWRBcmdzID0gWydub2RlJywgJ21vZGVsJywgJ2tleScsICd1c2VyX3ZhcnMnLCAnZmlsdGVyJyxcclxuICAgICAnc3BsaXRvbicsICdwYXRoJywgJ3RwbE5vZGUnLCAndHBsQ2hpbGROb2RlcyddO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Iob3B0cykge1xyXG4gICAgc3VwZXIob3B0cyk7XHJcbiAgICB0aGlzLnJlUmVuZGVyID0gdGhpcy5yZVJlbmRlci5iaW5kKHRoaXMpO1xyXG5cclxuICAgIGlmICh0aGlzLmtleSA9PSBudWxsKSB7IHRoaXMua2V5ID0gYF8ke3RoaXN9YDsgfVxyXG4gICAgaWYgKHRoaXMucGF0aCA9PSBudWxsKSB7IHRoaXMucGF0aCA9IFtdOyB9XHJcbiAgICBpZiAodGhpcy5jaGlsZHJlbiA9PSBudWxsKSB7IHRoaXMuY2hpbGRyZW4gPSBbXTsgfVxyXG4gICAgaWYgKHRoaXMudXNlcl92YXJzID09IG51bGwpIHsgdGhpcy51c2VyX3ZhcnMgPSB7fTsgfVxyXG4gICAgdGhpcy51c2VUZW1wbGF0ZSA9IHRydWU7XHJcbiAgICB0aGlzLnJlbmRlcmVkSW5kZXggPSAwO1xyXG4gICAgdGhpcy5yZW5kZXJlZENvdW50ID0gMDtcclxuICB9XHJcblxyXG4gIGluaXQocGFyZW50KSB7XHJcbiAgICBpZiAodGhpcy5pbml0RG9uZSkgeyByZXR1cm47IH1cclxuICAgIHN1cGVyLmluaXQocGFyZW50KTtcclxuICAgIHRoaXMuc3Vic2NyaWJlT25seSh0aGlzLmtleSwgdGhpcy5yZVJlbmRlciwgeyBwYXJ0aWFsOiBmYWxzZSB9KTtcclxuICAgIHRoaXMuc3Vic2NyaWJlRXhwcih0aGlzLmtleWV4cHIsIGZ1bmN0aW9uKHJlc3VsdCkgeyBpZiAocmVzdWx0ID09IG51bGwpIHsgcmVzdWx0ID0gW107IH0gcmV0dXJuIHRoaXMucHVibGlzaCh0aGlzLmtleSwgcmVzdWx0LCB7c3luYzogdHJ1ZX0pOyB9KTtcclxuICAgIHRoaXMuc3Vic2NyaWJlKGNvbnN0cygnRVZUX1JFU0laRScpLHRoaXMuY2hlY2tJZk1vcmVJdGVtc3JlcXVpcmVkLmJpbmQodGhpcywgdHJ1ZSkpXHJcbiAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVPbmx5KHRoaXMub3B0cy5sb2FkbW9yZSwgKCkgPT4gdGhpcy5yZW5kZXJDaHVuY2sodHJ1ZSkpO1xyXG4gIH1cclxuXHJcbiAgcGFyc2VPcHRzKG9wdHMpIHtcclxuICAgIHN1cGVyLnBhcnNlT3B0cyhvcHRzKTtcclxuICAgIGlmICh0aGlzLmtleSkge1xyXG4gICAgICBpZiAoXy5pc1ZhbGlkTW9kZWxDb25zdEtleSh0aGlzLmtleSkpIHsgdGhpcy5rZXkgPSBjb25zdHModGhpcy5rZXkpOyB9XHJcbiAgICAgIGlmICghXy5pc1ZhbGlkTW9kZWxLZXkodGhpcy5rZXkpKSB7XHJcbiAgICAgICAgdGhpcy5rZXlleHByID0gdGhpcy5rZXk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcGFyc2VQaXBlZEFyZygpIHtcclxuICAgIGxldCBhcmdzID0gdGhpcy5vcHRzLnBpcGVkQXJncztcclxuICAgIGlmIChhcmdzICE9IG51bGwgPyBhcmdzLnNoaWZ0IDogdW5kZWZpbmVkKSB7XHJcbiAgICAgIGxldCBhcmc7XHJcbiAgICAgIGlmIChhcmcgPSBhcmdzLnNoaWZ0KCkpIHsgdGhpcy5maWx0ZXIgPSBhcmc7IH1cclxuICAgICAgaWYgKGFyZyA9IGFyZ3Muc2hpZnQoKSkgeyB0aGlzLnNwbGl0b24gPSBhcmc7IH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoXy5pc1N0cmluZyh0aGlzLmZpbHRlcikpIHsgdGhpcy5maWx0ZXIgPSB0aGlzLmxpc3RJdGVtRXhwcih0aGlzLmZpbHRlcik7IH1cclxuICAgIGlmIChfLmlzU3RyaW5nKHRoaXMuc3BsaXRvbikpIHsgcmV0dXJuIHRoaXMuc3BsaXRvbiA9IHRoaXMubGlzdEl0ZW1FeHByKHRoaXMuc3BsaXRvbik7IH1cclxuICB9XHJcblxyXG4gIG5vdGlmeUxvYWRpbmcodmFsdWUpIHsgaWYgKHRoaXMub3B0cy5sb2FkaW5nKSB7IHJldHVybiB0aGlzLnB1Ymxpc2godGhpcy5vcHRzLmxvYWRpbmcsIHZhbHVlKTsgfSB9XHJcblxyXG4gIGxpc3RJdGVtRXhwcihleHByKSB7IHJldHVybiB0aGlzLl9ldmFsRnVuY3Rpb24oJ2l0ZW0sIGluZGV4JywgZXhwcik7IH1cclxuXHJcbiAgaXNXaWRnZXROb2RlKG5vZGUpIHsgcmV0dXJuIHN1cGVyLmlzV2lkZ2V0Tm9kZSguLi5hcmd1bWVudHMpIHx8ICQuZGF0YXNldChub2RlLCAnY2hpbGQnKTsgfVxyXG5cclxuICByZVJlbmRlcihyZW5kZXIpIHtcclxuICAgIHRoaXMuZGF0YSA9IG51bGw7XHJcbiAgICB0aGlzLnJlbmRlcmVkSW5kZXggPSAwO1xyXG4gICAgdGhpcy5yZW5kZXJlZENvdW50ID0gMDtcclxuICAgIHJldHVybiBzdXBlci5yZVJlbmRlcihyZW5kZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJlUmVuZGVyKCkge1xyXG4gICAgbGV0IG5vZGU7XHJcbiAgICBsZXQgb2xkTm9kZSA9IHRoaXMubm9kZTtcclxuICAgIGlmICh0aGlzLnRwbENoaWxkTm9kZXMgPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnRwbENoaWxkTm9kZXMgPSAoKCgpID0+IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICAgICAgZm9yIChub2RlIG9mIEFycmF5LmZyb20odGhpcy50cGxOb2RlLmNoaWxkTm9kZXMpKSB7ICAgICAgICAgICByZXN1bHQucHVzaChub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfSkoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ub2RlID0gdGhpcy50cGxOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICByZXR1cm4gb2xkTm9kZTtcclxuICB9XHJcblxyXG4gIGFsdGVyTm9kZUNvbnRlbnQoKSB7XHJcbiAgICBpZiAodGhpcy5kYXRhID09IG51bGwpIHsgdGhpcy5kYXRhID0gdGhpcy5nZXQodGhpcy5rZXkpIHx8IFtdOyB9XHJcbiAgICByZXR1cm4gKHRoaXMucmVuZGVyQ2h1bmNrKSgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ2h1bmNrKHJlc29sdmUgPSBmYWxzZSkge1xyXG4gICAgbGV0IGk7XHJcbiAgICBsZXQgZW5kO1xyXG4gICAgdGhpcy5ub3RpZnlMb2FkaW5nKGZhbHNlKTtcclxuICAgIGZvciAoaSA9IHRoaXMucmVuZGVyZWRJbmRleCwgZW5kID0gdGhpcy5kYXRhLmxlbmd0aCAtIDE7IGkgPD0gZW5kOyBpKyspIHtcclxuICAgICAgbGV0IGl0ZW0gPSB0aGlzLmRhdGFbaV07XHJcbiAgICAgIGlmICh0aGlzLmZpbHRlciAmJiAhdGhpcy5maWx0ZXIoaXRlbSwgaSkpIHsgY29udGludWU7IH1cclxuICAgICAgaWYgKHRoaXMuc3BsaXRvbiAmJiAoaSAhPT0gdGhpcy5yZW5kZXJlZEluZGV4KSAmJiB0aGlzLnNwbGl0b24oaXRlbSwgdGhpcy5yZW5kZXJlZENvdW50KSkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5TG9hZGluZyh0cnVlKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnJlbmRlck9uZUl0ZW0oaXRlbSwgaSwgcmVzb2x2ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyZWRJbmRleCA9IGk7XHJcbiAgICBpZiAodGhpcy5yZW5kZXJlZENvdW50ID09PSAwKSB7IHRoaXMuaGlkZSgpOyB9IGVsc2UgaWYgKCF0aGlzLmlzVmlzaWJsZSgpKSB7IHRoaXMuc2hvdygpOyB9XHJcbiAgICBpZiAodGhpcy5vcHRzLmxvYWRlZCAmJiAoaSA9PT0gdGhpcy5kYXRhLmxlbmd0aCkpIHsgcmV0dXJuIHRoaXMucHVibGlzaCh0aGlzLm9wdHMubG9hZGVkLCB0cnVlKTsgfVxyXG4gICAgdGhpcy5jaGVja0lmTW9yZUl0ZW1zcmVxdWlyZWQocmVzb2x2ZSlcclxuICB9XHJcblxyXG4gIGNoZWNrSWZNb3JlSXRlbXNyZXF1aXJlZChyZXNvbHZlKSB7IFxyXG4gICAgaWYgKHRoaXMucmVuZGVyZWRDb3VudCA+IDApIHtcclxuICAgICAgXy5kZWZlcigoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkTG9hZE1vcmVJdGVtcygpKSB7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlck9uZU1vcmVJdGVtKHJlc29sdmUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyT25lTW9yZUl0ZW0ocmVzb2x2ZSA9IGZhbHNlKSB7XHJcbiAgICBsZXQgaSA9IHRoaXMucmVuZGVyZWRJbmRleCA9IHRoaXMucmVuZGVyZWRJbmRleCArIDFcclxuICAgIGxldCBpdGVtID0gdGhpcy5kYXRhW2ldXHJcbiAgICBpZiAoaXRlbSlcclxuICAgIHsgXHJcbiAgICAgIHRoaXMucmVuZGVyT25lSXRlbShpdGVtLCBpLCByZXNvbHZlKVxyXG4gICAgICB0aGlzLmNoZWNrSWZNb3JlSXRlbXNyZXF1aXJlZChyZXNvbHZlKSAgICAgIFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2hvdWxkTG9hZE1vcmVJdGVtcygpIHtcclxuICAgIGxldCBwYXJlbnROb2RlID0gdGhpcy5ub2RlLm9mZnNldFBhcmVudFxyXG4gICAgaWYgKHBhcmVudE5vZGUgJiYgJC5nZXRBdHRyaWJ1dGUocGFyZW50Tm9kZSwnZGF0YS1zY3JvbGwnKSkge1xyXG4gICAgICBpZiAocGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQgPD0gcGFyZW50Tm9kZS5jbGllbnRIZWlnaHQpIHsgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZWRDb3VudCA8IHRoaXMuZGF0YS5sZW5ndGhcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICByZW5kZXJPbmVJdGVtKGl0ZW0sIGluZGV4LCByZXNvbHZlKSB7XHJcbiAgICB0aGlzLnJlbmRlcmVkSW5kZXggPSBpbmRleDtcclxuICAgIGxldCBnZW5lcmF0ZWluZGV4ID0gdGhpcy5vcHRzLmdlbmVyYXRlaW5kZXggfHwgcmguX2RlYnVnO1xyXG4gICAgZm9yIChsZXQgbm9kZSBvZiBBcnJheS5mcm9tKHRoaXMudHBsQ2hpbGROb2RlcykpIHtcclxuICAgICAgdmFyIG5ld05vZGU7XHJcbiAgICAgIGlmICgobmV3Tm9kZSA9IHRoaXMucmVzb2x2ZV9yaWYobm9kZSwgaXRlbSwgaW5kZXgpKSkge1xyXG4gICAgICAgIGlmIChpbmNyZW1lbnRlZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlcmVkQ291bnQrKztcclxuICAgICAgICAgIHZhciBpbmNyZW1lbnRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChnZW5lcmF0ZWluZGV4KSB7ICQuZGF0YXNldChuZXdOb2RlLCAnbGlzdGluZGV4JywgdGhpcy5yZW5kZXJlZENvdW50IC0gMSk7IH1cclxuICAgICAgICBpZiAobmV3Tm9kZS5oYXNDaGlsZE5vZGVzKCkpIHsgdGhpcy5yZW5kZXJDaGlsZExpc3QobmV3Tm9kZSwgaXRlbSwgaW5kZXgpOyB9XHJcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZUl0ZW1JbmRleChuZXdOb2RlLCBpdGVtLCBpbmRleCk7XHJcbiAgICAgICAgaWYoJC5pc0VsZW1lbnROb2RlKG5ld05vZGUpICYmIHJlc29sdmUpIHtcclxuICAgICAgICAgIHRoaXMucmVzb2x2ZURhdGFBdHRycyhuZXdOb2RlKTtcclxuICAgICAgICAgIF8ubG9hZERhdGFIYW5kbGVycyhuZXdOb2RlLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnZlcnRUb0xpc3RDb250YWluZXIobm9kZSkge31cclxuXHJcbiAgX3BhdGhJZChpbmRleCkge1xyXG4gICAgbGV0IGlkID0gJ18nO1xyXG4gICAgaWQgKz0gdGhpcy5wYXRoLmpvaW4oJ18nKTtcclxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XHJcbiAgICAgIGlmICh0aGlzLnBhdGgubGVuZ3RoID4gMCkgeyBpZCArPSAnXyc7IH1cclxuICAgICAgaWQgKz0gaW5kZXg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQ7XHJcbiAgfVxyXG5cclxuICBfcGF0aEtleShzdWJwYXRoKSB7XHJcbiAgICBpZiAoc3VicGF0aCA9PSBudWxsKSB7IHN1YnBhdGggPSAnJzsgfVxyXG4gICAgc3VicGF0aCA9IHN1YnBhdGgudG9TdHJpbmcoKTtcclxuICAgIGxldCBwYXRoID0gdGhpcy5wYXRoLmpvaW4oJy4nKTtcclxuICAgIGlmICgoc3VicGF0aC5sZW5ndGggPiAwKSAmJiAocGF0aC5sZW5ndGggPiAwKSkge1xyXG4gICAgICByZXR1cm4gYC4ke3BhdGh9LiR7c3VicGF0aH1gO1xyXG4gICAgfSBlbHNlIGlmIChzdWJwYXRoLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmV0dXJuIGAuJHtzdWJwYXRofWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gYC4ke3BhdGh9YDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogQHBhdGg6IHVuaXF1ZSBwYXRoIGZvciBsaXN0XHJcbiAgICogQHBwYXRoOiB1bmlxdWUgcGF0aCBvZiBwYXJlbnRcclxuICAgKi9cclxuICByZXNvbHZlUmVwZWF0VmFyKGV4cHIsIGl0ZW0sIGluZGV4LCBjYWNoZSwgbm9kZSkge1xyXG4gICAgcmV0dXJuIGNhY2hlW2V4cHJdID0gY2FjaGVbZXhwcl0gfHwgKCgpID0+IHsgc3dpdGNoIChleHByKSB7XHJcbiAgICAgIGNhc2UgJ0BpdGVta2V5JzogcmV0dXJuIGAke3RoaXMua2V5fS4ke2luZGV4fWA7XHJcbiAgICAgIGNhc2UgJ0BrZXknOiByZXR1cm4gdGhpcy5rZXk7XHJcbiAgICAgIGNhc2UgJ0BpZCc6IHJldHVybiB0aGlzLl9wYXRoSWQoaW5kZXgpO1xyXG4gICAgICBjYXNlICdAcGlkJzogcmV0dXJuIHRoaXMuX3BhdGhJZCgpO1xyXG4gICAgICBjYXNlICdAcGF0aCc6IHJldHVybiB0aGlzLl9wYXRoS2V5KGluZGV4KTtcclxuICAgICAgY2FzZSAnQHBwYXRoJzogcmV0dXJuIHRoaXMuX3BhdGhLZXkoKTtcclxuICAgICAgY2FzZSAnQGxldmVsJzogcmV0dXJuIHRoaXMucGF0aC5sZW5ndGg7XHJcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBzdXBlci5yZXNvbHZlUmVwZWF0VmFyKGV4cHIsIGl0ZW0sIGluZGV4LCBjYWNoZSwgbm9kZSk7XHJcbiAgICB9IH0pKCk7XHJcbiAgfVxyXG5cclxuICBkYXRhX2NoaWxkKG5vZGUsIHJhd0V4cHIsIGl0ZW0sIGluZGV4LCBhdHRyc0luZm8pIHtcclxuICAgIGlmICghXy5pc1ZhbGlkTW9kZWxLZXkocmF3RXhwcikpIHtcclxuICAgICAgJC5kYXRhc2V0KG5vZGUsICdjaGlsZCcsIHRoaXMuc3Vic2NyaWJlSURhdGFFeHByKG5vZGUsIHJhd0V4cHIsIGl0ZW0sIGluZGV4KSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIGl0IGNhbiBiZSBrZXkgb3IgZXhwcmVzc2lvblxyXG4gICAqIGRhdGEtY2hpbGQ9XCJ2YWx1ZVwiXHJcbiAgICogZGF0YS1jaGlsZD1cIkAucC52YWx1ZVwiXHJcbiAgICovXHJcbiAgcmVuZGVyQ2hpbGRMaXN0KG5vZGUsIGl0ZW0sIGluZGV4KSB7XHJcbiAgICByZXR1cm4gJC5lYWNoRGF0YU5vZGUobm9kZSwgJ2NoaWxkJywgZnVuY3Rpb24oY2hpbGROb2RlLCB2YWx1ZSkge1xyXG4gICAgICB0aGlzLmNvbnZlcnRUb0xpc3RDb250YWluZXIobm9kZSk7XHJcbiAgICAgIHRoaXMucmVzb2x2ZUl0ZW1JbmRleChjaGlsZE5vZGUsIGl0ZW0sIGluZGV4KTtcclxuXHJcbiAgICAgIHZhbHVlID0gJC5kYXRhc2V0KGNoaWxkTm9kZSwgJ2NoaWxkJyk7IC8vZ2V0IHVwZGF0ZWQgdmFsdWVcclxuICAgICAgaWYgKCh2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHx8ICh2YWx1ZSA9PT0gJycpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IGFyZ3MgPSB2YWx1ZS5zcGxpdCgnfCcpO1xyXG4gICAgICAgIGxldCBmaWx0ZXIgPSBhcmdzWzFdO1xyXG4gICAgICAgIGxldCBjaGlsZGtleSA9IGFyZ3NbMF07XHJcblxyXG4gICAgICAgIGxldCBjaGlsZExpc3QgPSBuZXcgTGlzdCh7XHJcbiAgICAgICAgICBub2RlOiBjaGlsZE5vZGUsXHJcbiAgICAgICAgICBtb2RlbDogdGhpcy5tb2RlbCxcclxuICAgICAgICAgIGtleTogY2hpbGRrZXksXHJcbiAgICAgICAgICB1c2VyX3ZhcnM6IHRoaXMudXNlcl92YXJzLFxyXG4gICAgICAgICAgcGF0aDogdGhpcy5wYXRoLmNvbmNhdChbdGhpcy5yZW5kZXJlZENvdW50IC0gMV0pLFxyXG4gICAgICAgICAgZmlsdGVyLFxyXG4gICAgICAgICAgdHBsTm9kZTogY2hpbGROb2RlLmNsb25lTm9kZShmYWxzZSksXHJcbiAgICAgICAgICB0cGxDaGlsZE5vZGVzOiB0aGlzLnRwbENoaWxkTm9kZXNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2hpbGRMaXN0LmluaXQodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZExpc3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAsIHRoaXMpO1xyXG4gIH1cclxufVxyXG5MaXN0LmluaXRDbGFzcygpO1xyXG5cclxud2luZG93LnJoLndpZGdldHMuTGlzdCA9IExpc3Q7XHJcbiIsIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vL1xyXG4vLyBFQ01BU2NyaXB0IDUgUG9seWZpbGxzXHJcbi8vXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIEVTNSAxNS4yIE9iamVjdCBPYmplY3RzXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLy9cclxuLy8gRVM1IDE1LjIuMyBQcm9wZXJ0aWVzIG9mIHRoZSBPYmplY3QgQ29uc3RydWN0b3JcclxuLy9cclxuXHJcbi8vIEVTNSAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YgKCBPIClcclxuLy8gRnJvbSBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvb2JqZWN0Z2V0cHJvdG90eXBlb2YvXHJcbi8vIE5PVEU6IHdvbid0IHdvcmsgZm9yIHR5cGljYWwgZnVuY3Rpb24gVCgpIHt9OyBULnByb3RvdHlwZSA9IHt9OyBuZXcgVDsgY2FzZVxyXG4vLyBzaW5jZSB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkgaXMgZGVzdHJveWVkLlxyXG5pZiAoIU9iamVjdC5nZXRQcm90b3R5cGVPZikge1xyXG4gIE9iamVjdC5nZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICBpZiAobyAhPT0gT2JqZWN0KG8pKSB7IHRocm93IFR5cGVFcnJvcihcIk9iamVjdC5nZXRQcm90b3R5cGVPZiBjYWxsZWQgb24gbm9uLW9iamVjdFwiKTsgfVxyXG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IG8uY29uc3RydWN0b3IucHJvdG90eXBlIHx8IE9iamVjdC5wcm90b3R5cGU7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gICAgLy8gRVM1IDE1LjIuMy4zIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKCBPLCBQIClcclxuLy8gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuLy8gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobywgbmFtZSkge1xyXG4vLyAgICAgICAgICAgIGlmIChvICE9PSBPYmplY3QobykpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuLy8gICAgICAgICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4vLyAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG9bbmFtZV0sXHJcbi8vICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbi8vICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuLy8gICAgICAgICAgICAgICAgfTtcclxuLy8gICAgICAgICAgICB9XHJcbi8vICAgICAgICB9O1xyXG4vLyAgICB9XHJcblxyXG4vLyBFUzUgMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgKCBPIClcclxuaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiAobykge1xyXG4gICAgaWYgKG8gIT09IE9iamVjdChvKSkgeyB0aHJvdyBUeXBlRXJyb3IoXCJPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBjYWxsZWQgb24gbm9uLW9iamVjdFwiKTsgfVxyXG4gICAgdmFyIHByb3BzID0gW10sIHA7XHJcbiAgICBmb3IgKHAgaW4gbykge1xyXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSB7XHJcbiAgICAgICAgcHJvcHMucHVzaChwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIEVTNSAxNS4yLjMuNSBPYmplY3QuY3JlYXRlICggTyBbLCBQcm9wZXJ0aWVzXSApXHJcbmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcclxuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlICE9PSBcIm9iamVjdFwiKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcbiAgICBmdW5jdGlvbiBDdG9yKCkge31cclxuICAgIEN0b3IucHJvdG90eXBlID0gcHJvdG90eXBlO1xyXG4gICAgdmFyIG8gPSBuZXcgQ3RvcigpO1xyXG4gICAgaWYgKHByb3RvdHlwZSkgeyBvLmNvbnN0cnVjdG9yID0gQ3RvcjsgfVxyXG4gICAgaWYgKHByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBpZiAocHJvcGVydGllcyAhPT0gT2JqZWN0KHByb3BlcnRpZXMpKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG8sIHByb3BlcnRpZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG87XHJcbiAgfTtcclxufVxyXG5cclxuLy8gRVMgMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5ICggTywgUCwgQXR0cmlidXRlcyApXHJcbi8vIFBhcnRpYWwgc3VwcG9ydCBmb3IgbW9zdCBjb21tb24gY2FzZSAtIGdldHRlcnMsIHNldHRlcnMsIGFuZCB2YWx1ZXNcclxuKGZ1bmN0aW9uKCkge1xyXG4gIGlmICghT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8XHJcbiAgICAgICEoZnVuY3Rpb24gKCkgeyB0cnkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4Jywge30pOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSAoKSkpIHtcclxuICAgIHZhciBvcmlnID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG8sIHByb3AsIGRlc2MpIHtcclxuICAgICAgLy8gSW4gSUU4IHRyeSBidWlsdC1pbiBpbXBsZW1lbnRhdGlvbiBmb3IgZGVmaW5pbmcgcHJvcGVydGllcyBvbiBET00gcHJvdG90eXBlcy5cclxuICAgICAgaWYgKG9yaWcpIHsgdHJ5IHsgcmV0dXJuIG9yaWcobywgcHJvcCwgZGVzYyk7IH0gY2F0Y2ggKGUpIHt9IH1cclxuXHJcbiAgICAgIGlmIChvICE9PSBPYmplY3QobykpIHsgdGhyb3cgVHlwZUVycm9yKFwiT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxlZCBvbiBub24tb2JqZWN0XCIpOyB9XHJcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18gJiYgKCdnZXQnIGluIGRlc2MpKSB7XHJcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fLmNhbGwobywgcHJvcCwgZGVzYy5nZXQpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18gJiYgKCdzZXQnIGluIGRlc2MpKSB7XHJcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fLmNhbGwobywgcHJvcCwgZGVzYy5zZXQpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgndmFsdWUnIGluIGRlc2MpIHtcclxuICAgICAgICBvW3Byb3BdID0gZGVzYy52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbztcclxuICAgIH07XHJcbiAgfVxyXG59KCkpO1xyXG5cclxuLy8gRVMgMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgKCBPLCBQcm9wZXJ0aWVzIClcclxuaWYgKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAobywgcHJvcGVydGllcykge1xyXG4gICAgaWYgKG8gIT09IE9iamVjdChvKSkgeyB0aHJvdyBUeXBlRXJyb3IoXCJPYmplY3QuZGVmaW5lUHJvcGVydGllcyBjYWxsZWQgb24gbm9uLW9iamVjdFwiKTsgfVxyXG4gICAgdmFyIG5hbWU7XHJcbiAgICBmb3IgKG5hbWUgaW4gcHJvcGVydGllcykge1xyXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BlcnRpZXMsIG5hbWUpKSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIG5hbWUsIHByb3BlcnRpZXNbbmFtZV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbztcclxuICB9O1xyXG59XHJcblxyXG5cclxuLy8gRVM1IDE1LjIuMy4xNCBPYmplY3Qua2V5cyAoIE8gKVxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qva2V5c1xyXG5pZiAoIU9iamVjdC5rZXlzKSB7XHJcbiAgT2JqZWN0LmtleXMgPSBmdW5jdGlvbiAobykge1xyXG4gICAgaWYgKG8gIT09IE9iamVjdChvKSkgeyB0aHJvdyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7IH1cclxuICAgIHZhciByZXQgPSBbXSwgcDtcclxuICAgIGZvciAocCBpbiBvKSB7XHJcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIHtcclxuICAgICAgICByZXQucHVzaChwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9O1xyXG59XHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gRVM1IDE1LjMgRnVuY3Rpb24gT2JqZWN0c1xyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbi8vXHJcbi8vIEVTNSAxNS4zLjQgUHJvcGVydGllcyBvZiB0aGUgRnVuY3Rpb24gUHJvdG90eXBlIE9iamVjdFxyXG4vL1xyXG5cclxuLy8gRVM1IDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kICggdGhpc0FyZyBbLCBhcmcxIFssIGFyZzIsIC4uLiBdXSApXHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Z1bmN0aW9uL2JpbmRcclxuaWYgKCFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCkge1xyXG4gIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKG8pIHtcclxuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykgeyB0aHJvdyBUeXBlRXJyb3IoXCJCaW5kIG11c3QgYmUgY2FsbGVkIG9uIGEgZnVuY3Rpb25cIik7IH1cclxuXHJcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgbm9wID0gZnVuY3Rpb24oKSB7fSxcclxuICAgICAgICBib3VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiBzZWxmLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBub3AgPyB0aGlzIDogbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgIGlmICh0aGlzLnByb3RvdHlwZSlcclxuICAgICAgbm9wLnByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xyXG4gICAgYm91bmQucHJvdG90eXBlID0gbmV3IG5vcCgpO1xyXG4gICAgcmV0dXJuIGJvdW5kO1xyXG4gIH07XHJcbn1cclxuXHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gRVM1IDE1LjQgQXJyYXkgT2JqZWN0c1xyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbi8vXHJcbi8vIEVTNSAxNS40LjMgUHJvcGVydGllcyBvZiB0aGUgQXJyYXkgQ29uc3RydWN0b3JcclxuLy9cclxuXHJcblxyXG4vLyBFUzUgMTUuNC4zLjIgQXJyYXkuaXNBcnJheSAoIGFyZyApXHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2lzQXJyYXlcclxuQXJyYXkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKG8pIHsgcmV0dXJuIEJvb2xlYW4obyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoT2JqZWN0KG8pKSA9PT0gJ1tvYmplY3QgQXJyYXldJyk7IH07XHJcblxyXG5cclxuLy9cclxuLy8gRVM1IDE1LjQuNCBQcm9wZXJ0aWVzIG9mIHRoZSBBcnJheSBQcm90b3R5cGUgT2JqZWN0XHJcbi8vXHJcblxyXG4vLyBFUzUgMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mICggc2VhcmNoRWxlbWVudCBbICwgZnJvbUluZGV4IF0gKVxyXG4vLyBGcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2ZcclxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xyXG4gIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLykge1xyXG4gICAgaWYgKHRoaXMgPT09IHZvaWQgMCB8fCB0aGlzID09PSBudWxsKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcblxyXG4gICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XHJcbiAgICBpZiAobGVuID09PSAwKSB7IHJldHVybiAtMTsgfVxyXG5cclxuICAgIHZhciBuID0gMDtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBuID0gTnVtYmVyKGFyZ3VtZW50c1sxXSk7XHJcbiAgICAgIGlmIChpc05hTihuKSkge1xyXG4gICAgICAgIG4gPSAwO1xyXG4gICAgICB9IGVsc2UgaWYgKG4gIT09IDAgJiYgbiAhPT0gKDEgLyAwKSAmJiBuICE9PSAtKDEgLyAwKSkge1xyXG4gICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAobiA+PSBsZW4pIHsgcmV0dXJuIC0xOyB9XHJcblxyXG4gICAgdmFyIGsgPSBuID49IDAgPyBuIDogTWF0aC5tYXgobGVuIC0gTWF0aC5hYnMobiksIDApO1xyXG5cclxuICAgIGZvciAoOyBrIDwgbGVuOyBrKyspIHtcclxuICAgICAgaWYgKGsgaW4gdCAmJiB0W2tdID09PSBzZWFyY2hFbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxuICB9O1xyXG59XHJcblxyXG4vLyBFUzUgMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZiAoIHNlYXJjaEVsZW1lbnQgWyAsIGZyb21JbmRleCBdIClcclxuLy8gRnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9sYXN0SW5kZXhPZlxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZikge1xyXG4gIEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIChzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXgqLykge1xyXG4gICAgaWYgKHRoaXMgPT09IHZvaWQgMCB8fCB0aGlzID09PSBudWxsKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcblxyXG4gICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XHJcbiAgICBpZiAobGVuID09PSAwKSB7IHJldHVybiAtMTsgfVxyXG5cclxuICAgIHZhciBuID0gbGVuO1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgIG4gPSBOdW1iZXIoYXJndW1lbnRzWzFdKTtcclxuICAgICAgaWYgKG4gIT09IG4pIHtcclxuICAgICAgICBuID0gMDtcclxuICAgICAgfSBlbHNlIGlmIChuICE9PSAwICYmIG4gIT09ICgxIC8gMCkgJiYgbiAhPT0gLSgxIC8gMCkpIHtcclxuICAgICAgICBuID0gKG4gPiAwIHx8IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobikpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGsgPSBuID49IDAgPyBNYXRoLm1pbihuLCBsZW4gLSAxKSA6IGxlbiAtIE1hdGguYWJzKG4pO1xyXG5cclxuICAgIGZvciAoOyBrID49IDA7IGstLSkge1xyXG4gICAgICBpZiAoayBpbiB0ICYmIHRba10gPT09IHNlYXJjaEVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIEVTNSAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5ICggY2FsbGJhY2tmbiBbICwgdGhpc0FyZyBdIClcclxuLy8gRnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9ldmVyeVxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5ldmVyeSkge1xyXG4gIEFycmF5LnByb3RvdHlwZS5ldmVyeSA9IGZ1bmN0aW9uIChmdW4gLyosIHRoaXNwICovKSB7XHJcbiAgICBpZiAodGhpcyA9PT0gdm9pZCAwIHx8IHRoaXMgPT09IG51bGwpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuXHJcbiAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcclxuICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcclxuICAgIGlmICh0eXBlb2YgZnVuICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuXHJcbiAgICB2YXIgdGhpc3AgPSBhcmd1bWVudHNbMV0sIGk7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgaWYgKGkgaW4gdCAmJiAhZnVuLmNhbGwodGhpc3AsIHRbaV0sIGksIHQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gRVM1IDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZSAoIGNhbGxiYWNrZm4gWyAsIHRoaXNBcmcgXSApXHJcbi8vIEZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZVxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5zb21lKSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLnNvbWUgPSBmdW5jdGlvbiAoZnVuIC8qLCB0aGlzcCAqLykge1xyXG4gICAgaWYgKHRoaXMgPT09IHZvaWQgMCB8fCB0aGlzID09PSBudWxsKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcblxyXG4gICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XHJcbiAgICBpZiAodHlwZW9mIGZ1biAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcblxyXG4gICAgdmFyIHRoaXNwID0gYXJndW1lbnRzWzFdLCBpO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpc3AsIHRbaV0sIGksIHQpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gRVM1IDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCAoIGNhbGxiYWNrZm4gWyAsIHRoaXNBcmcgXSApXHJcbi8vIEZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZm9yRWFjaFxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5mb3JFYWNoKSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZnVuIC8qLCB0aGlzcCAqLykge1xyXG4gICAgaWYgKHRoaXMgPT09IHZvaWQgMCB8fCB0aGlzID09PSBudWxsKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcblxyXG4gICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XHJcbiAgICBpZiAodHlwZW9mIGZ1biAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcblxyXG4gICAgdmFyIHRoaXNwID0gYXJndW1lbnRzWzFdLCBpO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGlmIChpIGluIHQpIHtcclxuICAgICAgICBmdW4uY2FsbCh0aGlzcCwgdFtpXSwgaSwgdCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG5cclxuLy8gRVM1IDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwICggY2FsbGJhY2tmbiBbICwgdGhpc0FyZyBdIClcclxuLy8gRnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9NYXBcclxuaWYgKCFBcnJheS5wcm90b3R5cGUubWFwKSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChmdW4gLyosIHRoaXNwICovKSB7XHJcbiAgICBpZiAodGhpcyA9PT0gdm9pZCAwIHx8IHRoaXMgPT09IG51bGwpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuXHJcbiAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcclxuICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcclxuICAgIGlmICh0eXBlb2YgZnVuICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuXHJcbiAgICB2YXIgcmVzID0gW107IHJlcy5sZW5ndGggPSBsZW47XHJcbiAgICB2YXIgdGhpc3AgPSBhcmd1bWVudHNbMV0sIGk7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgaWYgKGkgaW4gdCkge1xyXG4gICAgICAgIHJlc1tpXSA9IGZ1bi5jYWxsKHRoaXNwLCB0W2ldLCBpLCB0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gRVM1IDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyICggY2FsbGJhY2tmbiBbICwgdGhpc0FyZyBdIClcclxuLy8gRnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9GaWx0ZXJcclxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmlsdGVyKSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChmdW4gLyosIHRoaXNwICovKSB7XHJcbiAgICBpZiAodGhpcyA9PT0gdm9pZCAwIHx8IHRoaXMgPT09IG51bGwpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuXHJcbiAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcclxuICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcclxuICAgIGlmICh0eXBlb2YgZnVuICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuXHJcbiAgICB2YXIgcmVzID0gW107XHJcbiAgICB2YXIgdGhpc3AgPSBhcmd1bWVudHNbMV0sIGk7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgaWYgKGkgaW4gdCkge1xyXG4gICAgICAgIHZhciB2YWwgPSB0W2ldOyAvLyBpbiBjYXNlIGZ1biBtdXRhdGVzIHRoaXNcclxuICAgICAgICBpZiAoZnVuLmNhbGwodGhpc3AsIHZhbCwgaSwgdCkpIHtcclxuICAgICAgICAgIHJlcy5wdXNoKHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9O1xyXG59XHJcblxyXG5cclxuLy8gRVM1IDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlICggY2FsbGJhY2tmbiBbICwgaW5pdGlhbFZhbHVlIF0gKVxyXG4vLyBGcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L1JlZHVjZVxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5yZWR1Y2UpIHtcclxuICBBcnJheS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKGZ1biAvKiwgaW5pdGlhbFZhbHVlICovKSB7XHJcbiAgICBpZiAodGhpcyA9PT0gdm9pZCAwIHx8IHRoaXMgPT09IG51bGwpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuXHJcbiAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcclxuICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcclxuICAgIGlmICh0eXBlb2YgZnVuICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgVHlwZUVycm9yKCk7IH1cclxuXHJcbiAgICAvLyBubyB2YWx1ZSB0byByZXR1cm4gaWYgbm8gaW5pdGlhbCB2YWx1ZSBhbmQgYW4gZW1wdHkgYXJyYXlcclxuICAgIGlmIChsZW4gPT09IDAgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgeyB0aHJvdyBUeXBlRXJyb3IoKTsgfVxyXG5cclxuICAgIHZhciBrID0gMDtcclxuICAgIHZhciBhY2N1bXVsYXRvcjtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgYWNjdW11bGF0b3IgPSBhcmd1bWVudHNbMV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgaWYgKGsgaW4gdCkge1xyXG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB0W2srK107XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmIGFycmF5IGNvbnRhaW5zIG5vIHZhbHVlcywgbm8gaW5pdGlhbCB2YWx1ZSB0byByZXR1cm5cclxuICAgICAgICBpZiAoKytrID49IGxlbikgeyB0aHJvdyBUeXBlRXJyb3IoKTsgfVxyXG4gICAgICB9XHJcbiAgICAgIHdoaWxlICh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICB3aGlsZSAoayA8IGxlbikge1xyXG4gICAgICBpZiAoayBpbiB0KSB7XHJcbiAgICAgICAgYWNjdW11bGF0b3IgPSBmdW4uY2FsbCh1bmRlZmluZWQsIGFjY3VtdWxhdG9yLCB0W2tdLCBrLCB0KTtcclxuICAgICAgfVxyXG4gICAgICBrKys7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xyXG4gIH07XHJcbn1cclxuXHJcblxyXG4vLyBFUzUgMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodCAoIGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlIF0gKVxyXG4vLyBGcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L1JlZHVjZVJpZ2h0XHJcbmlmICghQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0ID0gZnVuY3Rpb24gKGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLykge1xyXG4gICAgaWYgKHRoaXMgPT09IHZvaWQgMCB8fCB0aGlzID09PSBudWxsKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcblxyXG4gICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrZm4gIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBUeXBlRXJyb3IoKTsgfVxyXG5cclxuICAgIC8vIG5vIHZhbHVlIHRvIHJldHVybiBpZiBubyBpbml0aWFsIHZhbHVlLCBlbXB0eSBhcnJheVxyXG4gICAgaWYgKGxlbiA9PT0gMCAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcblxyXG4gICAgdmFyIGsgPSBsZW4gLSAxO1xyXG4gICAgdmFyIGFjY3VtdWxhdG9yO1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xyXG4gICAgICBhY2N1bXVsYXRvciA9IGFyZ3VtZW50c1sxXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRvIHtcclxuICAgICAgICBpZiAoayBpbiB0aGlzKSB7XHJcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHRoaXNbay0tXTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWYgYXJyYXkgY29udGFpbnMgbm8gdmFsdWVzLCBubyBpbml0aWFsIHZhbHVlIHRvIHJldHVyblxyXG4gICAgICAgIGlmICgtLWsgPCAwKSB7IHRocm93IFR5cGVFcnJvcigpOyB9XHJcbiAgICAgIH1cclxuICAgICAgd2hpbGUgKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChrID49IDApIHtcclxuICAgICAgaWYgKGsgaW4gdCkge1xyXG4gICAgICAgIGFjY3VtdWxhdG9yID0gY2FsbGJhY2tmbi5jYWxsKHVuZGVmaW5lZCwgYWNjdW11bGF0b3IsIHRba10sIGssIHQpO1xyXG4gICAgICB9XHJcbiAgICAgIGstLTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XHJcbiAgfTtcclxufVxyXG5cclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBFUzUgMTUuNSBTdHJpbmcgT2JqZWN0c1xyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbi8vXHJcbi8vIEVTNSAxNS41LjQgUHJvcGVydGllcyBvZiB0aGUgU3RyaW5nIFByb3RvdHlwZSBPYmplY3RcclxuLy9cclxuXHJcblxyXG4vLyBFUzUgMTUuNS40LjIwIFN0cmluZy5wcm90b3R5cGUudHJpbSgpXHJcbmlmICghU3RyaW5nLnByb3RvdHlwZS50cmltKSB7XHJcbiAgU3RyaW5nLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC9eXFxzKy8sICcnKS5yZXBsYWNlKC9cXHMrJC8sICcnKTtcclxuICB9O1xyXG59XHJcblxyXG5cclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBFUzUgMTUuOSBEYXRlIE9iamVjdHNcclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5cclxuLy9cclxuLy8gRVMgMTUuOS40IFByb3BlcnRpZXMgb2YgdGhlIERhdGUgQ29uc3RydWN0b3JcclxuLy9cclxuXHJcbi8vIEVTNSAxNS45LjQuNCBEYXRlLm5vdyAoIClcclxuLy8gRnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9Db3JlX0phdmFTY3JpcHRfMS41X1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlL25vd1xyXG5pZiAoIURhdGUubm93KSB7XHJcbiAgRGF0ZS5ub3cgPSBmdW5jdGlvbiBub3coKSB7XHJcbiAgICByZXR1cm4gTnVtYmVyKG5ldyBEYXRlKCkpO1xyXG4gIH07XHJcbn1cclxuXHJcblxyXG4vL1xyXG4vLyBFUzUgMTUuOS41IFByb3BlcnRpZXMgb2YgdGhlIERhdGUgUHJvdG90eXBlIE9iamVjdFxyXG4vL1xyXG5cclxuLy8gRVM1IDE1LjkuNC40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAoIClcclxuLy8gSW5zcGlyZWQgYnkgaHR0cDovL3d3dy5qc29uLm9yZy9qc29uMi5qc1xyXG5pZiAoIURhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSB7XHJcbiAgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBwYWQyKG4pIHsgcmV0dXJuICgnMDAnICsgbikuc2xpY2UoLTIpOyB9XHJcbiAgICBmdW5jdGlvbiBwYWQzKG4pIHsgcmV0dXJuICgnMDAwJyArIG4pLnNsaWNlKC0zKTsgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmdldFVUQ0Z1bGxZZWFyKCkgKyAnLScgK1xyXG4gICAgICBwYWQyKHRoaXMuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICtcclxuICAgICAgcGFkMih0aGlzLmdldFVUQ0RhdGUoKSkgKyAnVCcgK1xyXG4gICAgICBwYWQyKHRoaXMuZ2V0VVRDSG91cnMoKSkgKyAnOicgK1xyXG4gICAgICBwYWQyKHRoaXMuZ2V0VVRDTWludXRlcygpKSArICc6JyArXHJcbiAgICAgIHBhZDIodGhpcy5nZXRVVENTZWNvbmRzKCkpICsgJy4nICtcclxuICAgICAgcGFkMyh0aGlzLmdldFVUQ01pbGxpc2Vjb25kcygpKSArICdaJztcclxuICB9O1xyXG59XHJcbiIsIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vL1xyXG4vLyBFQ01BU2NyaXB0IDIwMTUgUG9seWZpbGxzXHJcbi8vXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuKGZ1bmN0aW9uIChnbG9iYWwpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgLy8gU2V0IHRoaXMgdG8gYWx3YXlzIG92ZXJyaWRlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMsIGZvciB0ZXN0aW5nXHJcbiAgLy8gdGhlIHBvbHlmaWxsIGluIGJyb3dzZXJzIHdpdGggcGFydGlhbC9mdWxsIEVTMjAxNSBzdXBwb3J0LlxyXG4gIHZhciBPVkVSUklERV9OQVRJVkVfRk9SX1RFU1RJTkcgPSBmYWxzZTtcclxuXHJcbiAgdmFyIHVuZGVmaW5lZCA9ICh2b2lkIDApOyAvLyBQYXJhbm9pYVxyXG5cclxuICAvLyBIZWxwZXJzXHJcblxyXG4gIGZ1bmN0aW9uIHN0cmljdChvKSB7XHJcbiAgICByZXR1cm4gbyA9PT0gZ2xvYmFsID8gdW5kZWZpbmVkIDogbztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHMpIHtcclxuICAgIHJldHVybiAodHlwZW9mIHMgPT09ICdzeW1ib2wnKSB8fCAoJ1N5bWJvbCcgaW4gZ2xvYmFsICYmIHMgaW5zdGFuY2VvZiBnbG9iYWwuU3ltYm9sKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldFByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG5hbWUpIHtcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG5hbWUpO1xyXG4gICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XHJcbiAgICB3aGlsZSAoIWRlc2MgJiYgcHJvdG8pIHtcclxuICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIG5hbWUpO1xyXG4gICAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVzYztcclxuICB9XHJcblxyXG4gIHZhciBlbnF1ZXVlID0gKGZ1bmN0aW9uKG5hdGl2ZVByb21pc2UsIG5hdGl2ZVNldEltbWVkaWF0ZSkge1xyXG4gICAgaWYgKG5hdGl2ZVByb21pc2UpXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihqb2IpIHsgbmF0aXZlUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHsgam9iKCk7IH0pOyB9O1xyXG4gICAgaWYgKG5hdGl2ZVNldEltbWVkaWF0ZSlcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGpvYikgeyBuYXRpdmVTZXRJbW1lZGlhdGUoam9iKTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbihqb2IpIHsgc2V0VGltZW91dChqb2IsIDApOyB9O1xyXG4gIH0oZ2xvYmFsWydQcm9taXNlJ10sIGdsb2JhbFsnc2V0SW1tZWRpYXRlJ10pKTtcclxuXHJcbiAgZnVuY3Rpb24gZGVmaW5lKG8sIHAsIHYsIG92ZXJyaWRlKSB7XHJcbiAgICBpZiAocCBpbiBvICYmICFvdmVycmlkZSAmJiAhT1ZFUlJJREVfTkFUSVZFX0ZPUl9URVNUSU5HKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgaWYgKHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIC8vIFNhbml0eSBjaGVjayB0aGF0IGZ1bmN0aW9ucyBhcmUgYXBwcm9wcmlhdGVseSBuYW1lZCAod2hlcmUgcG9zc2libGUpXHJcbiAgICAgIC8vY29uc29sZS5hc3NlcnQoaXNTeW1ib2wocCkgfHwgISgnbmFtZScgaW4gdikgfHwgdi5uYW1lID09PSBwIHx8IHYubmFtZSA9PT0gcCArICdfJywgJ0V4cGVjdGVkIGZ1bmN0aW9uIG5hbWUgXCInICsgcC50b1N0cmluZygpICsgJ1wiLCB3YXMgXCInICsgdi5uYW1lICsgJ1wiJyk7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBwLCB7XHJcbiAgICAgICAgdmFsdWU6IHYsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIHAsIHtcclxuICAgICAgICB2YWx1ZTogdixcclxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldF9pbnRlcm5hbChvLCBwLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgcCwge1xyXG4gICAgICB2YWx1ZTogdixcclxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgIHdyaXRhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFNuYXBzaG90IGludHJpbnNpYyBmdW5jdGlvbnNcclxuICB2YXIgJGlzTmFOID0gZ2xvYmFsLmlzTmFOLFxyXG4gICAgICAkcGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQsXHJcbiAgICAgICRwYXJzZUZsb2F0ID0gZ2xvYmFsLnBhcnNlRmxvYXQ7XHJcblxyXG4gIHZhciBFID0gTWF0aC5FLFxyXG4gICAgICBMT0cxMEUgPSBNYXRoLkxPRzEwRSxcclxuICAgICAgTE9HMkUgPSBNYXRoLkxPRzJFLFxyXG4gICAgICBhYnMgPSBNYXRoLmFicyxcclxuICAgICAgY2VpbCA9IE1hdGguY2VpbCxcclxuICAgICAgZXhwID0gTWF0aC5leHAsXHJcbiAgICAgIGZsb29yID0gTWF0aC5mbG9vcixcclxuICAgICAgbG9nID0gTWF0aC5sb2csXHJcbiAgICAgIG1heCA9IE1hdGgubWF4LFxyXG4gICAgICBtaW4gPSBNYXRoLm1pbixcclxuICAgICAgcG93ID0gTWF0aC5wb3csXHJcbiAgICAgIHJhbmRvbSA9IE1hdGgucmFuZG9tLFxyXG4gICAgICBzcXJ0ID0gTWF0aC5zcXJ0O1xyXG5cclxuICB2YXIgb3JpZ19tYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2gsXHJcbiAgICAgIG9yaWdfcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSxcclxuICAgICAgb3JpZ19zZWFyY2ggPSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaCxcclxuICAgICAgb3JpZ19zcGxpdCA9IFN0cmluZy5wcm90b3R5cGUuc3BsaXQ7XHJcblxyXG4gIC8vIFRoZXNlIGFyZSB1c2VkIGZvciBpbXBsZW1lbnRpbmcgdGhlIHBvbHlmaWxscywgYnV0IG5vdCBleHBvcnRlZC5cclxuXHJcbiAgLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTYzODA1OVxyXG4gIC8qKiBAY29uc3RydWN0b3IgKi9cclxuICBmdW5jdGlvbiBFcGhlbWVyb25UYWJsZSgpIHtcclxuICAgIHZhciBzZWNyZXRLZXkgPSBPYmplY3RDcmVhdGUobnVsbCk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29uY2VhbChvKSB7XHJcbiAgICAgIHZhciBvVmFsdWVPZiA9IG8udmFsdWVPZiwgc2VjcmV0cyA9IE9iamVjdENyZWF0ZShudWxsKTtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sICd2YWx1ZU9mJywge1xyXG4gICAgICAgICAgdmFsdWU6IChmdW5jdGlvbihzZWNyZXRLZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChrID09PSBzZWNyZXRLZXkpID8gc2VjcmV0cyA6IG9WYWx1ZU9mLmFwcGx5KG8sIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9KHNlY3JldEtleSkpLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICB3cml0ZWFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgICAgcmV0dXJuIHNlY3JldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmV2ZWFsKG8pIHtcclxuICAgICAgdmFyIHYgPSB0eXBlb2Ygby52YWx1ZU9mID09PSAnZnVuY3Rpb24nICYmIG8udmFsdWVPZihzZWNyZXRLZXkpO1xyXG4gICAgICByZXR1cm4gdiA9PT0gbyA/IG51bGwgOiB2O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBzZWNyZXRLZXkgPSBPYmplY3RDcmVhdGUobnVsbCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgdmFyIHNlY3JldHMgPSByZXZlYWwoa2V5KTtcclxuICAgICAgICBpZiAoc2VjcmV0cyAmJiBIYXNPd25Qcm9wZXJ0eShzZWNyZXRzLCAndmFsdWUnKSkge1xyXG4gICAgICAgICAgZGVsZXRlIHNlY3JldHMudmFsdWU7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXQ6IGZ1bmN0aW9uKGtleSwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHNlY3JldHMgPSByZXZlYWwoa2V5KTtcclxuICAgICAgICByZXR1cm4gKHNlY3JldHMgJiYgSGFzT3duUHJvcGVydHkoc2VjcmV0cywgJ3ZhbHVlJykpID8gc2VjcmV0cy52YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgfSxcclxuICAgICAgaGFzOiBmdW5jdGlvbihrZXkpIHtcclxuICAgICAgICB2YXIgc2VjcmV0cyA9IHJldmVhbChrZXkpO1xyXG4gICAgICAgIHJldHVybiBCb29sZWFuKHNlY3JldHMgJiYgSGFzT3duUHJvcGVydHkoc2VjcmV0cywgJ3ZhbHVlJykpO1xyXG4gICAgICB9LFxyXG4gICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgc2VjcmV0cyA9IHJldmVhbChrZXkpIHx8IGNvbmNlYWwoa2V5KTtcclxuICAgICAgICBzZWNyZXRzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB2YXIgZW1wdHkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG5cclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvL1xyXG4gIC8vIEVDTUFTY3JpcHQgMjAxNVxyXG4gIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvXHJcbiAgLy9cclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMTkuNCBTeW1ib2wgT2JqZWN0c1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyBOT1RFOiBTeW1ib2xzIGFyZSBkZWZpbmVkIGhlcmUgLSBvdXQgb2Ygc3BlYyBvcmRlciAtIHNpbmNlIHdlIG5lZWQgdGhlXHJcbiAgLy8gcHJvcGVydGllcyBhbmQgcHJvdG90eXBlIHRvIGJlIHBvcHVsYXRlZCBmb3Igb3RoZXIgcG9seWZpbGxzLlxyXG5cclxuICAvLyBOT1RFOiBOb3Qgc2VjdXJlLCBub3IgaXMgb2JqWyQkc3ltYm9sXSBoaWRkZW4gZnJvbSBPYmplY3Qua2V5cygpXHJcblxyXG4gIHZhciBzeW1ib2xGb3JLZXk7XHJcbiAgKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlY3JldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICB2YXIgc3ltYm9sTWFwID0ge307XHJcbiAgICBzeW1ib2xGb3JLZXkgPSBmdW5jdGlvbihrKSB7XHJcbiAgICAgIHJldHVybiBzeW1ib2xNYXBba107XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBHbG9iYWxTeW1ib2xSZWdpc3RyeSA9IFtdO1xyXG5cclxuICAgIGZ1bmN0aW9uIHVuaXF1ZShiaXRzKSB7XHJcbiAgICAgIHJldHVybiBBcnJheShiaXRzICsgMSkuam9pbigneCcpLnJlcGxhY2UoL3gvZywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHJhbmRvbSgpIDwgMC41ID8gJ1xcdTIwMEMnIDogJ1xcdTIwMEQnOyAvLyBKV05KIC8gWldKXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDE5LjQuMSBUaGUgU3ltYm9sIENvbnN0cnVjdG9yXHJcbiAgICAvLyAxOS40LjEuMSBTeW1ib2wgKCBkZXNjcmlwdGlvbj11bmRlZmluZWQgKVxyXG4gICAgZnVuY3Rpb24gU3ltYm9sKGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wpKSByZXR1cm4gbmV3IFN5bWJvbChkZXNjcmlwdGlvbiwgc2VjcmV0KTtcclxuICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wgJiYgYXJndW1lbnRzWzFdICE9PSBzZWNyZXQpIHRocm93IFR5cGVFcnJvcigpO1xyXG5cclxuICAgICAgdmFyIGRlc2NTdHJpbmcgPSBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGRlc2NyaXB0aW9uKTtcclxuXHJcbiAgICAgIHNldF9pbnRlcm5hbCh0aGlzLCAnW1tTeW1ib2xEYXRhXV0nLCB1bmlxdWUoMTI4KSk7XHJcbiAgICAgIHNldF9pbnRlcm5hbCh0aGlzLCAnW1tEZXNjcmlwdGlvbl1dJywgZGVzY1N0cmluZyk7XHJcblxyXG4gICAgICBzeW1ib2xNYXBbdGhpc10gPSB0aGlzO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoISgnU3ltYm9sJyBpbiBnbG9iYWwpIHx8IE9WRVJSSURFX05BVElWRV9GT1JfVEVTVElORylcclxuICAgICAgZ2xvYmFsLlN5bWJvbCA9IFN5bWJvbDtcclxuXHJcbiAgICAvLyAxOS40LjIgUHJvcGVydGllcyBvZiB0aGUgU3ltYm9sIENvbnN0cnVjdG9yXHJcblxyXG4gICAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvciAoa2V5KVxyXG4gICAgZGVmaW5lKFN5bWJvbCwgJ2ZvcicsIGZ1bmN0aW9uIGZvcl8oa2V5KSB7XHJcbiAgICAgIHZhciBzdHJpbmdLZXkgPSBTdHJpbmcoa2V5KTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBHbG9iYWxTeW1ib2xSZWdpc3RyeS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIHZhciBlID0gR2xvYmFsU3ltYm9sUmVnaXN0cnlbaV07XHJcbiAgICAgICAgaWYgKFNhbWVWYWx1ZShlWydbW2tleV1dJ10sIHN0cmluZ0tleSkpIHJldHVybiBlWydbW3N5bWJvbF1dJ107XHJcbiAgICAgIH1cclxuICAgICAgdmFyIG5ld1N5bWJvbCA9IFN5bWJvbChrZXkpO1xyXG4gICAgICBHbG9iYWxTeW1ib2xSZWdpc3RyeS5wdXNoKHsnW1trZXldXSc6IHN0cmluZ0tleSwgJ1tbc3ltYm9sXV0nOiBuZXdTeW1ib2x9KTtcclxuICAgICAgcmV0dXJuIG5ld1N5bWJvbDtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIDE5LjQuMi4yIFN5bWJvbC5oYXNJbnN0YW5jZVxyXG4gICAgLy8gMTkuNC4yLjMgU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZVxyXG5cclxuICAgIC8vIDE5LjQuMi40IFN5bWJvbC5pdGVyYXRvclxyXG4gICAgZGVmaW5lKGdsb2JhbC5TeW1ib2wsICdpdGVyYXRvcicsIGdsb2JhbC5TeW1ib2woJ1N5bWJvbC5pdGVyYXRvcicpKTtcclxuXHJcbiAgICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yIChzeW0pXHJcbiAgICBkZWZpbmUoU3ltYm9sLCAna2V5Rm9yJywgZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xyXG4gICAgICBpZiAoIShzeW0gaW5zdGFuY2VvZiBTeW1ib2wpKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBHbG9iYWxTeW1ib2xSZWdpc3RyeS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIHZhciBlID0gR2xvYmFsU3ltYm9sUmVnaXN0cnlbaV07XHJcbiAgICAgICAgaWYgKFNhbWVWYWx1ZShlWydbW3N5bWJvbF1dJ10sIHN5bSkpIHJldHVybiBlWydbW2tleV1dJ107XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIDE5LjQuMi42IFN5bWJvbC5tYXRjaFxyXG4gICAgZGVmaW5lKGdsb2JhbC5TeW1ib2wsICdtYXRjaCcsIGdsb2JhbC5TeW1ib2woJ1N5bWJvbC5tYXRjaCcpKTtcclxuXHJcbiAgICAvLyAxOS40LjIuNyBTeW1ib2wucHJvdG90eXBlXHJcblxyXG4gICAgLy8gMTkuNC4yLjggU3ltYm9sLnJlcGxhY2VcclxuICAgIGRlZmluZShnbG9iYWwuU3ltYm9sLCAncmVwbGFjZScsIGdsb2JhbC5TeW1ib2woJ1N5bWJvbC5yZXBsYWNlJykpO1xyXG5cclxuICAgIC8vIDE5LjQuMi45IFN5bWJvbC5zZWFyY2hcclxuICAgIGRlZmluZShnbG9iYWwuU3ltYm9sLCAnc2VhcmNoJywgZ2xvYmFsLlN5bWJvbCgnU3ltYm9sLnNlYXJjaCcpKTtcclxuXHJcbiAgICAvLyAxOS40LjIuMTAgU3ltYm9sLnNwZWNpZXNcclxuXHJcbiAgICAvLyAxOS40LjIuMTEgU3ltYm9sLnNlYXJjaFxyXG4gICAgZGVmaW5lKGdsb2JhbC5TeW1ib2wsICdzcGxpdCcsIGdsb2JhbC5TeW1ib2woJ1N5bWJvbC5zcGxpdCcpKTtcclxuXHJcbiAgICAvLyAxOS40LjIuMTIgU3ltYm9sLnRvUHJpbWl0aXZlXHJcblxyXG4gICAgLy8gMTkuNC4yLjEzIFN5bWJvbC50b1N0cmluZ1RhZ1xyXG4gICAgZGVmaW5lKGdsb2JhbC5TeW1ib2wsICd0b1N0cmluZ1RhZycsIGdsb2JhbC5TeW1ib2woJ1N5bWJvbC50b1N0cmluZ1RhZycpKTtcclxuXHJcbiAgICAvLyAxOS40LjIuMTQgU3ltYm9sLnVuc2NvcGFibGVzXHJcblxyXG4gICAgLy8gMTkuNC4zIFByb3BlcnRpZXMgb2YgdGhlIFN5bWJvbCBQcm90b3R5cGUgT2JqZWN0XHJcbiAgICAvLyAxOS40LjMuMSBTeW1ib2wucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcblxyXG4gICAgLy8gMTkuNC4zLjIgU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyAoIClcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTeW1ib2wucHJvdG90eXBlLCAndG9TdHJpbmcnLCB7XHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgICAgICB2YXIgcyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICB2YXIgZGVzYyA9IHNbJ1tbRGVzY3JpcHRpb25dXSddO1xyXG4gICAgICAgIHJldHVybiAnU3ltYm9sKCcgKyAoZGVzYyA9PT0gdW5kZWZpbmVkID8gJycgOiBkZXNjKSArIHNbJ1tbU3ltYm9sRGF0YV1dJ10gKyAnKSc7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGVhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTtcclxuXHJcbiAgICAvLyAxOS40LjMuMyBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YgKCApXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3ltYm9sLnByb3RvdHlwZSwgJ3ZhbHVlT2YnLCB7XHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZU9mKCkge1xyXG4gICAgICAgIC8vIFRvIHByZXZlbnQgYXV0b21hdGljIHN0cmluZyBjb252ZXJzaW9uOlxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcigpO1xyXG5cclxuICAgICAgICAvLyBTcGVjIGhhcyBhcHByb3hpbWF0ZWx5IHRoZSBmb2xsb3dpbmc6XHJcbiAgICAgICAgLy92YXIgcyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICAvL2lmIChUeXBlKHMpID09PSAnc3ltYm9sJykgcmV0dXJuIHM7XHJcbiAgICAgICAgLy9pZiAoVHlwZShzKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIC8vaWYgKCEoJ1tbU3ltYm9sRGF0YV1dJyBpbiBzKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgLy9yZXR1cm4gc1snW1tTeW1ib2xEYXRhXV0nXTtcclxuICAgICAgfSxcclxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0ZWFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlIH0pO1xyXG5cclxuICAgIC8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGUgWyBAQHRvU3RyaW5nVGFnIF1cclxuICAgIC8vIChEb25lIGxhdGVyIHRvIHBvbHlmaWxsIHBhcnRpYWwgaW1wbGVtZW50YXRpb25zKVxyXG5cclxuICAgIC8vIDE5LjQuNCBQcm9wZXJ0aWVzIG9mIFN5bWJvbCBJbnN0YW5jZXNcclxuICB9KCkpO1xyXG5cclxuICBjb25zb2xlLmFzc2VydCh0eXBlb2YgZ2xvYmFsLlN5bWJvbCgpID09PSAnc3ltYm9sJyB8fCBzeW1ib2xGb3JLZXkoU3RyaW5nKGdsb2JhbC5TeW1ib2woJ3gnKSkpICE9PSB1bmRlZmluZWQpO1xyXG5cclxuICAvLyBEZWZpbmVkIGhlcmUgc28gdGhhdCBvdGhlciBwcm90b3R5cGVzIGNhbiByZWZlcmVuY2UgaXRcclxuICAvLyAyNS4xLjIgVGhlICVJdGVyYXRvclByb3RvdHlwZSUgT2JqZWN0XHJcbiAgdmFyICRJdGVyYXRvclByb3RvdHlwZSQgPSB7fTtcclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gNiBFQ01BU2NyaXB0IERhdGEgVHlwZXMgYW5kIFZhbHVlc1xyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyA2LjEgRUNNQVNjcmlwdCBMYW5ndWFnZSBUeXBlc1xyXG5cclxuICAvLyBcIlR5cGUoeClcIiBpcyB1c2VkIGFzIHNob3J0aGFuZCBmb3IgXCJ0aGUgdHlwZSBvZiB4XCIuLi5cclxuICBmdW5jdGlvbiBUeXBlKHYpIHtcclxuICAgIHN3aXRjaCAodHlwZW9mIHYpIHtcclxuICAgIGNhc2UgJ3VuZGVmaW5lZCc6IHJldHVybiAndW5kZWZpbmVkJztcclxuICAgIGNhc2UgJ2Jvb2xlYW4nOiByZXR1cm4gJ2Jvb2xlYW4nO1xyXG4gICAgY2FzZSAnbnVtYmVyJzogcmV0dXJuICdudW1iZXInO1xyXG4gICAgY2FzZSAnc3RyaW5nJzogcmV0dXJuICdzdHJpbmcnO1xyXG4gICAgY2FzZSAnc3ltYm9sJzogcmV0dXJuICdzeW1ib2wnO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgaWYgKHYgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XHJcbiAgICAgIGlmICh2IGluc3RhbmNlb2YgZ2xvYmFsLlN5bWJvbCkgcmV0dXJuICdzeW1ib2wnO1xyXG4gICAgICByZXR1cm4gJ29iamVjdCc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyA2LjEuNS4xIFdlbGwtS25vd24gU3ltYm9sc1xyXG4gIHZhciAkJGl0ZXJhdG9yID0gZ2xvYmFsLlN5bWJvbC5pdGVyYXRvcixcclxuICAgICAgJCRtYXRjaCA9IGdsb2JhbC5TeW1ib2wubWF0Y2gsXHJcbiAgICAgICQkcmVwbGFjZSA9IGdsb2JhbC5TeW1ib2wucmVwbGFjZSxcclxuICAgICAgJCRzZWFyY2ggPSBnbG9iYWwuU3ltYm9sLnNlYXJjaCxcclxuICAgICAgJCRzcGxpdCA9IGdsb2JhbC5TeW1ib2wuc3BsaXQsXHJcbiAgICAgICQkdG9TdHJpbmdUYWcgPSBnbG9iYWwuU3ltYm9sLnRvU3RyaW5nVGFnO1xyXG5cclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyA3IEFic3RyYWN0IE9wZXJhdGlvbnNcclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gNy4xIFR5cGUgQ29udmVyc2lvblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyA3LjEuMSBUb1ByaW1pdGl2ZSAoIGlucHV0IFssIFByZWZlcnJlZFR5cGVdIClcclxuICAvLyBqdXN0IHVzZSB2YWx1ZU9mKClcclxuXHJcbiAgLy8gNy4xLjIgVG9Cb29sZWFuICggYXJndW1lbnQgKVxyXG4gIC8vIGp1c3QgdXNlIEJvb2xlYW4oKVxyXG5cclxuICAvLyA3LjEuMyBUb051bWJlciAoIGFyZ3VtZW50IClcclxuICAvLyBqdXN0IHVzZSBOdW1iZXIoKVxyXG5cclxuICAvLyA3LjEuNCBUb0ludGVnZXIgKCBhcmd1bWVudCApXHJcbiAgZnVuY3Rpb24gVG9JbnRlZ2VyKG4pIHtcclxuICAgIG4gPSBOdW1iZXIobik7XHJcbiAgICBpZiAoJGlzTmFOKG4pKSByZXR1cm4gMDtcclxuICAgIGlmIChuID09PSAwIHx8IG4gPT09IEluZmluaXR5IHx8IG4gPT09IC1JbmZpbml0eSkgcmV0dXJuIG47XHJcbiAgICByZXR1cm4gKChuIDwgMCkgPyAtMSA6IDEpICogZmxvb3IoYWJzKG4pKTtcclxuICB9XHJcblxyXG4gIC8vIDcuMS41IFRvSW50MzIgKCBhcmd1bWVudCApXHJcbiAgZnVuY3Rpb24gVG9JbnQzMih2KSB7IHJldHVybiB2ID4+IDA7IH1cclxuXHJcbiAgLy8gNy4xLjYgVG9VaW50MzIgKCBhcmd1bWVudCApXHJcbiAgZnVuY3Rpb24gVG9VaW50MzIodikgeyByZXR1cm4gdiA+Pj4gMDsgfVxyXG5cclxuICAvLyA3LjEuNyBUb0ludDE2ICggYXJndW1lbnQgKVxyXG4gIGZ1bmN0aW9uIFRvSW50MTYodikgeyByZXR1cm4gKHYgPDwgMTYpID4+IDE2OyB9XHJcblxyXG4gIC8vIDcuMS44IFRvVWludDE2ICggYXJndW1lbnQgKVxyXG4gIGZ1bmN0aW9uIFRvVWludDE2KHYpIHsgcmV0dXJuIHYgJiAweEZGRkY7IH1cclxuXHJcbiAgLy8gNy4xLjkgVG9JbnQ4ICggYXJndW1lbnQgKVxyXG4gIGZ1bmN0aW9uIFRvSW50OCh2KSB7IHJldHVybiAodiA8PCAyNCkgPj4gMjQ7IH1cclxuXHJcbiAgLy8gNy4xLjEwIFRvVWludDggKCBhcmd1bWVudCApXHJcbiAgZnVuY3Rpb24gVG9VaW50OCh2KSB7IHJldHVybiB2ICYgMHhGRjsgfVxyXG5cclxuICAvLyA3LjEuMTEgVG9VaW50OENsYW1wICggYXJndW1lbnQgKVxyXG4gIGZ1bmN0aW9uIFRvVWludDhDbGFtcChhcmd1bWVudCkge1xyXG4gICAgdmFyIG51bWJlciA9IE51bWJlcihhcmd1bWVudCk7XHJcbiAgICBpZiAoJGlzTmFOKG51bWJlcikpIHJldHVybiAwO1xyXG4gICAgaWYgKG51bWJlciA8PSAwKSByZXR1cm4gMDtcclxuICAgIGlmIChudW1iZXIgPj0gMjU1KSByZXR1cm4gMjU1O1xyXG4gICAgdmFyIGYgPSBmbG9vcihudW1iZXIpO1xyXG4gICAgaWYgKChmICsgMC41KSA8IG51bWJlcikgcmV0dXJuIGYgKyAxO1xyXG4gICAgaWYgKG51bWJlciA8IChmICsgMC41KSkgcmV0dXJuIGY7XHJcbiAgICBpZiAoZiAlIDIpIHJldHVybiBmICsgMTtcclxuICAgIHJldHVybiBmO1xyXG4gIH1cclxuXHJcbiAgLy8gNy4xLjEyIFRvU3RyaW5nICggYXJndW1lbnQgKVxyXG4gIC8vIGp1c3QgdXNlIFN0cmluZygpXHJcblxyXG4gIC8vIDcuMS4xMyBUb09iamVjdCAoIGFyZ3VtZW50IClcclxuICBmdW5jdGlvbiBUb09iamVjdCh2KSB7XHJcbiAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgcmV0dXJuIE9iamVjdCh2KTtcclxuICB9XHJcblxyXG4gIC8vIDcuMS4xNCBUb1Byb3BlcnR5S2V5ICggYXJndW1lbnQgKVxyXG4gIGZ1bmN0aW9uIFRvUHJvcGVydHlLZXkodikge1xyXG4gICAgcmV0dXJuIFN0cmluZyh2KTtcclxuICB9XHJcblxyXG4gIC8vIDcuMS4xNSBUb0xlbmd0aCAoIGFyZ3VtZW50IClcclxuICBmdW5jdGlvbiBUb0xlbmd0aCh2KSB7XHJcbiAgICB2YXIgbGVuID0gVG9JbnRlZ2VyKHYpO1xyXG4gICAgaWYgKGxlbiA8PSAwKSByZXR1cm4gMDtcclxuICAgIGlmIChsZW4gPT09IEluZmluaXR5KSByZXR1cm4gMHgyMDAwMDAwMDAwMDAwMCAtIDE7IC8vIDJeNTMtMVxyXG4gICAgcmV0dXJuIG1pbihsZW4sIDB4MjAwMDAwMDAwMDAwMDAgLSAxKTsgLy8gMl41My0xXHJcbiAgfVxyXG5cclxuICAvLyA3LjEuMTYgQ2Fub25pY2FsTnVtZXJpY0luZGV4U3RyaW5nICggYXJndW1lbnQgKVxyXG5cclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyA3LjIgVGVzdGluZyBhbmQgQ29tcGFyaXNvbiBPcGVyYXRpb25zXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUgKCBhcmd1bWVudCApXHJcbiAgLy8gNy4yLjIgSXNBcnJheSAoIGFyZ3VtZW50IClcclxuXHJcbiAgLy8gNy4yLjMgSXNDYWxsYWJsZSAoIGFyZ3VtZW50IClcclxuICBmdW5jdGlvbiBJc0NhbGxhYmxlKG8pIHsgcmV0dXJuIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nOyB9XHJcblxyXG4gIC8vIDcuMi40IElzQ29uc3RydWN0b3IgKCBhcmd1bWVudCApXHJcbiAgZnVuY3Rpb24gSXNDb25zdHJ1Y3RvcihvKSB7XHJcbiAgICAvLyBIYWNrcyBmb3IgU2FmYXJpIDcgVHlwZWRBcnJheSBYWFhDb25zdHJ1Y3RvciBvYmplY3RzXHJcbiAgICBpZiAoL0NvbnN0cnVjdG9yLy50ZXN0KE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSkpIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKC9GdW5jdGlvbi8udGVzdChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykpKSByZXR1cm4gdHJ1ZTtcclxuICAgIC8vIFRPRE86IENhbiB0aGlzIGJlIGltcHJvdmVkIG9uP1xyXG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nO1xyXG4gIH1cclxuXHJcbiAgLy8gNy4yLjUgSXNFeHRlbnNpYmxlIChPKVxyXG4gIC8vIDcuMi42IElzSW50ZWdlciAoIGFyZ3VtZW50IClcclxuXHJcbiAgLy8gNy4yLjcgSXNQcm9wZXJ0eUtleSAoIGFyZ3VtZW50IClcclxuICBmdW5jdGlvbiBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XHJcbiAgICBpZiAoVHlwZShhcmd1bWVudCkgPT09ICdzdHJpbmcnKSByZXR1cm4gdHJ1ZTtcclxuICAgIGlmIChUeXBlKGFyZ3VtZW50KSA9PT0gJ3N5bWJvbCcpIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gNy4yLjggSXNSZWdFeHAgKCBhcmd1bWVudCApXHJcblxyXG4gIC8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxyXG4gIGZ1bmN0aW9uIFNhbWVWYWx1ZSh4LCB5KSB7XHJcbiAgICBpZiAodHlwZW9mIHggIT09IHR5cGVvZiB5KSByZXR1cm4gZmFsc2U7XHJcbiAgICBzd2l0Y2ggKHR5cGVvZiB4KSB7XHJcbiAgICBjYXNlICd1bmRlZmluZWQnOlxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGNhc2UgJ251bWJlcic6XHJcbiAgICAgIGlmICh4ICE9PSB4ICYmIHkgIT09IHkpIHJldHVybiB0cnVlO1xyXG4gICAgICBpZiAoeCA9PT0gMCAmJiB5ID09PSAwKSByZXR1cm4gMS94ID09PSAxL3k7XHJcbiAgICAgIHJldHVybiB4ID09PSB5O1xyXG4gICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgY2FzZSAnb2JqZWN0JzpcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB4ID09PSB5O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gNy4yLjEwIFNhbWVWYWx1ZVplcm8oeCwgeSlcclxuICBmdW5jdGlvbiBTYW1lVmFsdWVaZXJvKHgsIHkpIHtcclxuICAgIGlmICh0eXBlb2YgeCAhPT0gdHlwZW9mIHkpIHJldHVybiBmYWxzZTtcclxuICAgIHN3aXRjaCAodHlwZW9mIHgpIHtcclxuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgaWYgKHggIT09IHggJiYgeSAhPT0geSkgcmV0dXJuIHRydWU7XHJcbiAgICAgIHJldHVybiB4ID09PSB5O1xyXG4gICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgY2FzZSAnb2JqZWN0JzpcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB4ID09PSB5O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gNy4zIE9wZXJhdGlvbnMgb24gT2JqZWN0c1xyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyA3LjMuMSBHZXQgKE8sIFApXHJcbiAgLy8gLSBqdXN0IHVzZSBvLnAgb3Igb1twXVxyXG5cclxuICAvLyA3LjMuMiBHZXRWIChWLCBQKVxyXG4gIGZ1bmN0aW9uIEdldFYodiwgcCkge1xyXG4gICAgdmFyIG8gPSBUb09iamVjdCh2KTtcclxuICAgIHJldHVybiBvW3BdO1xyXG4gIH1cclxuXHJcbiAgLy8gNy4zLjMgU2V0IChPLCBQLCBWLCBUaHJvdylcclxuICAvLyAtIGp1c3QgdXNlIG8ucCA9IHYgb3Igb1twXSA9IHZcclxuXHJcblxyXG5cclxuXHJcbiAgLy8gNy4zLjkgR2V0TWV0aG9kIChPLCBQKVxyXG4gIGZ1bmN0aW9uIEdldE1ldGhvZChvLCBwKSB7XHJcbiAgICB2YXIgZnVuYyA9IEdldFYobywgcCk7XHJcbiAgICBpZiAoZnVuYyA9PT0gdW5kZWZpbmVkIHx8IGZ1bmMgPT09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICBpZiAoIUlzQ2FsbGFibGUoZnVuYykpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgcmV0dXJuIGZ1bmM7XHJcbiAgfVxyXG5cclxuICAvLyA3LjMuMTAgSGFzUHJvcGVydHkgKE8sIFApXHJcbiAgZnVuY3Rpb24gSGFzUHJvcGVydHkobywgcCkge1xyXG4gICAgd2hpbGUgKG8pIHtcclxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgcmV0dXJuIHRydWU7XHJcbiAgICAgIGlmIChUeXBlKG8pICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB2YXIgb3AgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XHJcbiAgICAgIGlmIChvcCA9PT0gbykgcmV0dXJuIGZhbHNlOyAvLyBJRTggaGFzIHNlbGYtcmVmZXJlbnRpYWwgcHJvdG90eXBlc1xyXG4gICAgICBvID0gb3A7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvLyA3LjMuMTEgSGFzT3duUHJvcGVydHkgKE8sIFApXHJcbiAgZnVuY3Rpb24gSGFzT3duUHJvcGVydHkobywgcCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKTtcclxuICB9XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDcuNCBPcGVyYXRpb25zIG9uIEl0ZXJhdG9yIE9iamVjdHNcclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gNy40LjEgR2V0SXRlcmF0b3IgKCBvYmosIG1ldGhvZCApXHJcbiAgZnVuY3Rpb24gR2V0SXRlcmF0b3Iob2JqLCBtZXRob2QpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMilcclxuICAgICAgbWV0aG9kID0gR2V0TWV0aG9kKG9iaiwgJCRpdGVyYXRvcik7XHJcbiAgICB2YXIgaXRlcmF0b3IgPSBtZXRob2QuY2FsbChvYmopO1xyXG4gICAgaWYgKFR5cGUoaXRlcmF0b3IpICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICByZXR1cm4gaXRlcmF0b3I7XHJcbiAgfVxyXG5cclxuICAvLyA3LjQuMiBJdGVyYXRvck5leHQgKCBpdGVyYXRvciwgdmFsdWUgKVxyXG4gIGZ1bmN0aW9uIEl0ZXJhdG9yTmV4dChpdGVyYXRvciwgdmFsdWUpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMilcclxuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcclxuICAgIGVsc2VcclxuICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCh2YWx1ZSk7XHJcbiAgICBpZiAoVHlwZShyZXN1bHQpICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLy8gNy40LjMgSXRlcmF0b3JDb21wbGV0ZSAoIGl0ZXJSZXN1bHQgKVxyXG4gIGZ1bmN0aW9uIEl0ZXJhdG9yQ29tcGxldGUoaXRlclJlc3VsdCkge1xyXG4gICAgY29uc29sZS5hc3NlcnQoVHlwZShpdGVyUmVzdWx0KSA9PT0gJ29iamVjdCcpO1xyXG4gICAgcmV0dXJuIEJvb2xlYW4oaXRlclJlc3VsdC5kb25lKTtcclxuICB9XHJcblxyXG4gIC8vIDcuNC40IEl0ZXJhdG9yVmFsdWUgKCBpdGVyUmVzdWx0IClcclxuICBmdW5jdGlvbiBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpIHtcclxuICAgIGNvbnNvbGUuYXNzZXJ0KFR5cGUoaXRlclJlc3VsdCkgPT09ICdvYmplY3QnKTtcclxuICAgIHJldHVybiBpdGVyUmVzdWx0LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLy8gNy40LjUgSXRlcmF0b3JTdGVwICggaXRlcmF0b3IgKVxyXG4gIGZ1bmN0aW9uIEl0ZXJhdG9yU3RlcCggaXRlcmF0b3IsIHZhbHVlICkge1xyXG4gICAgdmFyIHJlc3VsdCA9IEl0ZXJhdG9yTmV4dChpdGVyYXRvciwgdmFsdWUpO1xyXG4gICAgdmFyIGRvbmUgPSByZXN1bHRbJ2RvbmUnXTtcclxuICAgIGlmIChCb29sZWFuKGRvbmUpID09PSB0cnVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZSggaXRlcmF0b3IsIGNvbXBsZXRpb24gKVxyXG4gIGZ1bmN0aW9uIEl0ZXJhdG9yQ2xvc2UoIGl0ZXJhdG9yLCBjb21wbGV0aW9uICkge1xyXG4gICAgY29uc29sZS5hc3NlcnQoVHlwZShpdGVyYXRvcikgPT09ICdvYmplY3QnKTtcclxuICAgIHZhciBfcmV0dXJuID0gR2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XHJcbiAgICBpZiAoX3JldHVybiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gY29tcGxldGlvbjtcclxuICAgIHRyeSB7XHJcbiAgICAgIHZhciBpbm5lclJlc3VsdCA9IF9yZXR1cm5baXRlcmF0b3JdKCk7XHJcbiAgICB9IGNhdGNoIChyZXN1bHQpIHtcclxuICAgICAgLy8gVE9ETzogSWYgY29tcGxldGlvbi5bW3R5cGVdXSBpcyB0aHJvdywgcmV0dXJuIGNvbXBsZXRpb25cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGlmIChUeXBlKGlubmVyUmVzdWx0KSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgcmV0dXJuIGNvbXBsZXRpb247XHJcbiAgfVxyXG5cclxuICAvLyA3LjQuNyBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0ICh2YWx1ZSwgZG9uZSlcclxuICBmdW5jdGlvbiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHZhbHVlLCBkb25lKSB7XHJcbiAgICBjb25zb2xlLmFzc2VydChUeXBlKGRvbmUpID09PSAnYm9vbGVhbicpO1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgb2JqW1widmFsdWVcIl0gPSB2YWx1ZTtcclxuICAgIG9ialtcImRvbmVcIl0gPSBkb25lO1xyXG4gICAgcmV0dXJuIG9iajtcclxuICB9XHJcblxyXG4gIC8vIDcuNC44IENyZWF0ZUxpc3RJdGVyYXRvciAobGlzdClcclxuICAvLyA3LjQuOC4xIExpc3RJdGVyYXRvciBuZXh0KCApXHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDggRXhlY3V0YWJsZSBDb2RlIGFuZCBFeGVjdXRpb24gQ29udGV4dHNcclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gOC40IEpvYnMgYW5kIEpvYiBRdWV1ZXNcclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gOC40LjEgRW5xdWV1ZUpvYiAoIHF1ZXVlTmFtZSwgam9iLCBhcmd1bWVudHMpXHJcbiAgZnVuY3Rpb24gRW5xdWV1ZUpvYihxdWV1ZU5hbWUsIGpvYiwgYXJncykge1xyXG4gICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IGpvYi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9O1xyXG4gICAgZW5xdWV1ZShmbik7XHJcbiAgfVxyXG5cclxuICAvLyA4LjQuMiBOZXh0Sm9iIHJlc3VsdFxyXG4gIGZ1bmN0aW9uIE5leHRKb2IocmVzdWx0KSB7XHJcbiAgICAvLyBuby1vcFxyXG4gIH1cclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gOSBPcmRpbmFyeSBhbmQgRXhvdGljIE9iamVjdHMgQmVoYXZpb3JzXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIDkuMS4xMSBbW0VudW1lcmF0ZV1dICgpXHJcbiAgZnVuY3Rpb24gRW51bWVyYXRlKG9iaikge1xyXG4gICAgdmFyIGUgPSBbXTtcclxuICAgIGlmIChPYmplY3Qob2JqKSAhPT0gb2JqKSByZXR1cm4gZTtcclxuICAgIHZhciB2aXNpdGVkID0gbmV3IFNldDtcclxuICAgIHdoaWxlIChvYmogIT09IG51bGwpIHtcclxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICBpZiAoIXZpc2l0ZWQuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBuYW1lKTtcclxuICAgICAgICAgIGlmIChkZXNjKSB7XHJcbiAgICAgICAgICAgIHZpc2l0ZWQuYWRkKG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoZGVzYy5lbnVtZXJhYmxlKSBlLnB1c2gobmFtZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgb2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZVskJGl0ZXJhdG9yXSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gOS4xLjEyIFtbT3duUHJvcGVydHlLZXlzXV0gKCApXHJcbiAgZnVuY3Rpb24gT3duUHJvcGVydHlLZXlzKG8pIHtcclxuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvKTtcclxuICB9XHJcblxyXG4gIC8vIDkuMS4xMyBPYmplY3RDcmVhdGUocHJvdG8sIGludGVybmFsU2xvdHNMaXN0KVxyXG4gIGZ1bmN0aW9uIE9iamVjdENyZWF0ZShwcm90bywgaW50ZXJuYWxTbG90c0xpc3QpIHtcclxuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHByb3RvLCBpbnRlcm5hbFNsb3RzTGlzdCk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAxOSBGdW5kYW1lbnRhbCBPYmplY3RzXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDE5LjEgT2JqZWN0IE9iamVjdHNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gMTkuMS4xIFRoZSBPYmplY3QgQ29uc3RydWN0b3JcclxuICAvLyAxOS4xLjEuMSBPYmplY3QgKCBbIHZhbHVlIF0gKVxyXG4gIC8vIDE5LjEuMiBQcm9wZXJ0aWVzIG9mIHRoZSBPYmplY3QgQ29uc3RydWN0b3JcclxuICAvLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduICggdGFyZ2V0LCAuLi5zb3VyY2VzIClcclxuICBkZWZpbmUoXHJcbiAgICBPYmplY3QsICdhc3NpZ24nLFxyXG4gICAgZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgLyouLi4qL3NvdXJjZXMpIHtcclxuICAgICAgdmFyIHRvID0gVG9PYmplY3QodGFyZ2V0KTtcclxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gdG87XHJcblxyXG4gICAgICB2YXIgc291cmNlc0luZGV4ID0gMTtcclxuICAgICAgd2hpbGUgKHNvdXJjZXNJbmRleCA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tzb3VyY2VzSW5kZXgrK107XHJcbiAgICAgICAgaWYgKG5leHRTb3VyY2UgPT09IHVuZGVmaW5lZCB8fCBuZXh0U291cmNlID09PSBudWxsKSB7XHJcbiAgICAgICAgICB2YXIga2V5cyA9IFtdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YXIgZnJvbSA9IFRvT2JqZWN0KG5leHRTb3VyY2UpO1xyXG4gICAgICAgICAga2V5cyA9IE93blByb3BlcnR5S2V5cyhmcm9tKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIga2V5c0luZGV4ID0gMDsga2V5c0luZGV4IDwga2V5cy5sZW5ndGg7ICsra2V5c0luZGV4KSB7XHJcbiAgICAgICAgICB2YXIgbmV4dEtleSA9IGtleXNba2V5c0luZGV4XTtcclxuICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmcm9tLCBuZXh0S2V5KTtcclxuICAgICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBmcm9tW25leHRLZXldO1xyXG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHByb3BWYWx1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRvO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUgKCBPIFsgLCBQcm9wZXJ0aWVzIF0gKVxyXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzICggTywgUHJvcGVydGllcyApXHJcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5ICggTywgUCwgQXR0cmlidXRlcyApXHJcbiAgLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZSAoIE8gKVxyXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKCBPLCBQIClcclxuXHJcbiAgKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG5hdGl2ZVN5bWJvbHMgPSAodHlwZW9mIGdsb2JhbC5TeW1ib2woKSA9PT0gJ3N5bWJvbCcpLFxyXG4gICAgICAgICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXHJcbiAgICAgICAgJGtleXMgPSBPYmplY3Qua2V5cyxcclxuICAgICAgICAkd2luZG93X25hbWVzID0gKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnID8gJGdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdKTtcclxuXHJcbiAgICBmdW5jdGlvbiBpc1N0cmluZ0tleShrKSB7IHJldHVybiAhc3ltYm9sRm9yS2V5KGspOyB9XHJcblxyXG4gICAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgKCBPIClcclxuICAgIGRlZmluZShcclxuICAgICAgT2JqZWN0LCAnZ2V0T3duUHJvcGVydHlOYW1lcycsXHJcbiAgICAgIGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMobykge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XHJcbiAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBjcm9zcy1yZWFsbSBjYWxsaW5nIGJ5IElFIGl0c2VsZi5cclxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmV4b3JhYmxldGFzaC9wb2x5ZmlsbC9pc3N1ZXMvOTZcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhvKS5maWx0ZXIoaXNTdHJpbmdLZXkpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoXykge1xyXG4gICAgICAgICAgICByZXR1cm4gJHdpbmRvd19uYW1lcy5zbGljZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMobykuZmlsdGVyKGlzU3RyaW5nS2V5KTtcclxuICAgICAgfSwgIW5hdGl2ZVN5bWJvbHMpO1xyXG5cclxuICAgIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgKCBPIClcclxuICAgIGRlZmluZShcclxuICAgICAgT2JqZWN0LCAnZ2V0T3duUHJvcGVydHlTeW1ib2xzJyxcclxuICAgICAgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKG8pIHtcclxuICAgICAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMobykuZmlsdGVyKHN5bWJvbEZvcktleSkubWFwKHN5bWJvbEZvcktleSk7XHJcbiAgICAgIH0sICFuYXRpdmVTeW1ib2xzKTtcclxuXHJcbiAgICAvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMgKCBPIClcclxuICAgIGRlZmluZShcclxuICAgICAgT2JqZWN0LCAna2V5cycsXHJcbiAgICAgIGZ1bmN0aW9uIGtleXMobykge1xyXG4gICAgICAgIHJldHVybiAka2V5cyhvKS5maWx0ZXIoaXNTdHJpbmdLZXkpO1xyXG4gICAgICB9LCAhbmF0aXZlU3ltYm9scyk7XHJcbiAgfSgpKTtcclxuXHJcbiAgLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mICggTyApXHJcbiAgLy8gMTkuMS4yLjEwIE9iamVjdC5pcyAoIHZhbHVlMSwgdmFsdWUyIClcclxuICBkZWZpbmUoXHJcbiAgICBPYmplY3QsICdpcycsXHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZTEsIHZhbHVlMikge1xyXG4gICAgICByZXR1cm4gU2FtZVZhbHVlKHZhbHVlMSwgdmFsdWUyKTtcclxuICAgIH0pO1xyXG5cclxuICAvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZSAoIE8gKVxyXG4gIC8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4gKCBPIClcclxuICAvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkICggTyApXHJcblxyXG4gIC8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyAoIE8gKVxyXG4gIC8vIHNlZSBhYm92ZVxyXG5cclxuICAvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zICggTyApXHJcbiAgLy8gMTkuMS4yLjE2IE9iamVjdC5wcm90b3R5cGVcclxuICAvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwgKCBPIClcclxuXHJcbiAgLy8gMTkuMS4yLjE4IE9iamVjdC5zZXRQcm90b3R5cGVPZiAoIE8sIHByb3RvIClcclxuICBkZWZpbmUoXHJcbiAgICBPYmplY3QsICdzZXRQcm90b3R5cGVPZicsXHJcbiAgICBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihvLCBwcm90bykge1xyXG4gICAgICBpZiAoVHlwZShvKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICBpZiAoVHlwZShwcm90bykgIT09ICdvYmplY3QnICYmIFR5cGUocHJvdG8pICE9PSAnbnVsbCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICBvLl9fcHJvdG9fXyA9IHByb3RvO1xyXG4gICAgICByZXR1cm4gbztcclxuICAgIH1cclxuICApO1xyXG5cclxuICAvLyAxOS4xLjMgUHJvcGVydGllcyBvZiB0aGUgT2JqZWN0IFByb3RvdHlwZSBPYmplY3RcclxuICAvLyAxOS4xLjMuMSBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcbiAgLy8gMTkuMS4zLjIgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSAoIFYgKVxyXG4gIC8vIDE5LjEuMy4zIE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZiAoIFYgKVxyXG4gIC8vIDE5LjEuMy40IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUgKCBWIClcclxuICAvLyAxOS4xLjMuNSBPYmplY3QucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nICggWyByZXNlcnZlZDEgWyAsIHJlc2VydmVkMiBdIF0gKVxyXG4gIC8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgKCApXHJcbiAgdmFyIG9fcF90cyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbiAgZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsXHJcbiAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgdmFyIG8gPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgIGlmIChvID09PSBPYmplY3QobykgJiYgJCR0b1N0cmluZ1RhZyBpbiBvKSB7XHJcbiAgICAgICAgICAgcmV0dXJuICdbb2JqZWN0ICcgKyBvWyQkdG9TdHJpbmdUYWddICsgJ10nO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHJldHVybiBvX3BfdHMuYXBwbHkobywgYXJndW1lbnRzKTtcclxuICAgICAgIH0pO1xyXG5cclxuICAvLyAxOS4xLjMuNyBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YgKCApXHJcbiAgLy8gMTkuMS40IFByb3BlcnRpZXMgb2YgT2JqZWN0IEluc3RhbmNlc1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAxOS4yIEZ1bmN0aW9uIE9iamVjdHNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gMTkuMi4xIFRoZSBGdW5jdGlvbiBDb25zdHJ1Y3RvclxyXG4gIC8vIDE5LjIuMS4xIEZ1bmN0aW9uICggcDEsIHAyLCDigKYgLCBwbiwgYm9keSApXHJcbiAgLy8gMTkuMi4yIFByb3BlcnRpZXMgb2YgdGhlIEZ1bmN0aW9uIENvbnN0cnVjdG9yXHJcbiAgLy8gMTkuMi4yLjEgRnVuY3Rpb24ubGVuZ3RoXHJcbiAgLy8gMTkuMi4yLjIgRnVuY3Rpb24ucHJvdG90eXBlXHJcbiAgLy8gMTkuMi4zIFByb3BlcnRpZXMgb2YgdGhlIEZ1bmN0aW9uIFByb3RvdHlwZSBPYmplY3RcclxuICAvLyAxOS4yLjMuMSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkgKCB0aGlzQXJnLCBhcmdBcnJheSApXHJcbiAgLy8gMTkuMi4zLjIgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgKCB0aGlzQXJnICwgLi4uYXJncylcclxuICAvLyAxOS4yLjMuMyBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCAodGhpc0FyZyAsIC4uLmFyZ3MpXHJcbiAgLy8gMTkuMi4zLjQgRnVuY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcbiAgLy8gMTkuMi4zLjUgRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nICggKVxyXG4gIC8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXSAoIFYgKVxyXG4gIC8vIDE5LjIuNCBGdW5jdGlvbiBJbnN0YW5jZXNcclxuICAvLyAxOS4yLjQuMSBsZW5ndGhcclxuICAvLyAxOS4yLjQuMiBuYW1lXHJcbiAgLy8gMTkuMi40LjMgcHJvdG90eXBlXHJcblxyXG4gIC8vIChObyBwb2x5ZmlsbGFibGUgY2hhbmdlcyBmcm9tIEVTNSlcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMTkuMyBCb29sZWFuIE9iamVjdHNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gMTkuMy4xIFRoZSBCb29sZWFuIENvbnN0cnVjdG9yXHJcbiAgLy8gMTkuMy4xLjEgQm9vbGVhbiAoIHZhbHVlIClcclxuICAvLyAxOS4zLjIgUHJvcGVydGllcyBvZiB0aGUgQm9vbGVhbiBDb25zdHJ1Y3RvclxyXG4gIC8vIDE5LjMuMi4xIEJvb2xlYW4ucHJvdG90eXBlXHJcbiAgLy8gMTkuMy4zIFByb3BlcnRpZXMgb2YgdGhlIEJvb2xlYW4gUHJvdG90eXBlIE9iamVjdFxyXG4gIC8vIDE5LjMuMy4xIEJvb2xlYW4ucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcbiAgLy8gMTkuMy4zLjIgQm9vbGVhbi5wcm90b3R5cGUudG9TdHJpbmcgKCApXHJcbiAgLy8gMTkuMy4zLjMgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZiAoIClcclxuICAvLyAxOS4zLjQgUHJvcGVydGllcyBvZiBCb29sZWFuIEluc3RhbmNlc1xyXG5cclxuICAvLyAoTm8gcG9seWZpbGxhYmxlIGNoYW5nZXMgZnJvbSBFUzUpXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDE5LjQgU3ltYm9sIE9iamVjdHNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gTW92ZWQgZWFybGllciBpbiB0aGlzIHNjcmlwdCwgc28gdGhhdCBvdGhlciBwb2x5ZmlsbHMgY2FuIGRlcGVuZCBvbiB0aGVtLlxyXG5cclxuICAvLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlIFsgQEB0b1N0cmluZ1RhZyBdXHJcbiAgZGVmaW5lKGdsb2JhbC5TeW1ib2wucHJvdG90eXBlLCBnbG9iYWwuU3ltYm9sLnRvU3RyaW5nVGFnLCAnU3ltYm9sJyk7XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDE5LjUgRXJyb3IgT2JqZWN0c1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyAxOS41LjEgVGhlIEVycm9yIENvbnN0cnVjdG9yXHJcbiAgLy8gMTkuNS4xLjEgRXJyb3IgKCBtZXNzYWdlIClcclxuICAvLyAxOS41LjEuMiBuZXcgRXJyb3IoIC4uLmFyZ3VtZW50c0xpc3QgKVxyXG4gIC8vIDE5LjUuMiBQcm9wZXJ0aWVzIG9mIHRoZSBFcnJvciBDb25zdHJ1Y3RvclxyXG4gIC8vIDE5LjUuMi4xIEVycm9yLnByb3RvdHlwZVxyXG4gIC8vIDE5LjUuMyBQcm9wZXJ0aWVzIG9mIHRoZSBFcnJvciBQcm90b3R5cGUgT2JqZWN0XHJcbiAgLy8gMTkuNS4zLjEgRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcbiAgLy8gMTkuNS4zLjIgRXJyb3IucHJvdG90eXBlLm1lc3NhZ2VcclxuICAvLyAxOS41LjMuMyBFcnJvci5wcm90b3R5cGUubmFtZVxyXG4gIC8vIDE5LjUuMy40IEVycm9yLnByb3RvdHlwZS50b1N0cmluZyAoIClcclxuICAvLyAxOS41LjQgUHJvcGVydGllcyBvZiBFcnJvciBJbnN0YW5jZXNcclxuICAvLyAxOS41LjUgTmF0aXZlIEVycm9yIFR5cGVzIFVzZWQgaW4gVGhpcyBTdGFuZGFyZFxyXG4gIC8vIDE5LjUuNS4xIEV2YWxFcnJvclxyXG4gIC8vIDE5LjUuNS4yIFJhbmdlRXJyb3JcclxuICAvLyAxOS41LjUuMyBSZWZlcmVuY2VFcnJvclxyXG4gIC8vIDE5LjUuNS40IFN5bnRheEVycm9yXHJcbiAgLy8gMTkuNS41LjUgVHlwZUVycm9yXHJcbiAgLy8gMTkuNS41LjYgVVJJRXJyb3JcclxuICAvLyAxOS41LjYgTmF0aXZlRXJyb3IgT2JqZWN0IFN0cnVjdHVyZVxyXG4gIC8vIDE5LjUuNi4xIE5hdGl2ZUVycm9yIENvbnN0cnVjdG9yc1xyXG4gIC8vIDE5LjUuNi4xLjEgTmF0aXZlRXJyb3IgKCBtZXNzYWdlIClcclxuICAvLyAxOS41LjYuMS4yIG5ldyBOYXRpdmVFcnJvciAoIC4uLmFyZ3VtZW50c0xpc3QgKVxyXG4gIC8vIDE5LjUuNi4yIFByb3BlcnRpZXMgb2YgdGhlIE5hdGl2ZUVycm9yIENvbnN0cnVjdG9yc1xyXG4gIC8vIDE5LjUuNi4yLjEgTmF0aXZlRXJyb3IucHJvdG90eXBlXHJcbiAgLy8gMTkuNS42LjMgUHJvcGVydGllcyBvZiB0aGUgTmF0aXZlRXJyb3IgUHJvdG90eXBlIE9iamVjdHNcclxuICAvLyAxOS41LjYuNCBQcm9wZXJ0aWVzIG9mIE5hdGl2ZUVycm9yIEluc3RhbmNlc1xyXG5cclxuICAvLyAoTm8gcG9seWZpbGxhYmxlIGNoYW5nZXMgZnJvbSBFUzUpXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDIwIE51bWJlcnMgYW5kIERhdGVzXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDIwLjEgTnVtYmVyIE9iamVjdHNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gMjAuMS4xIFRoZSBOdW1iZXIgQ29uc3RydWN0b3JcclxuICAvLyAyMC4xLjEuMSBOdW1iZXIgKCBbIHZhbHVlIF0gKVxyXG4gIC8vIDIwLjEuMS4yIG5ldyBOdW1iZXIgKCAuLi5hcmd1bWVudHNMaXN0IClcclxuICAvLyAyMC4xLjIgUHJvcGVydGllcyBvZiB0aGUgTnVtYmVyIENvbnN0cnVjdG9yXHJcblxyXG4gIC8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXHJcbiAgZGVmaW5lKFxyXG4gICAgTnVtYmVyLCAnRVBTSUxPTicsXHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgbmV4dCwgcmVzdWx0O1xyXG4gICAgICBmb3IgKG5leHQgPSAxOyAxICsgbmV4dCAhPT0gMTsgbmV4dCA9IG5leHQgLyAyKVxyXG4gICAgICAgIHJlc3VsdCA9IG5leHQ7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9KCkpKTtcclxuXHJcbiAgLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlICggbnVtYmVyIClcclxuICBkZWZpbmUoXHJcbiAgICBOdW1iZXIsICdpc0Zpbml0ZScsXHJcbiAgICBmdW5jdGlvbiBpc0Zpbml0ZShudW1iZXIpIHtcclxuICAgICAgaWYgKFR5cGUobnVtYmVyKSAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcclxuICAgICAgaWYgKG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gK0luZmluaXR5IHx8IG51bWJlciA9PT0gLUluZmluaXR5KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIgKCBudW1iZXIgKVxyXG4gIGRlZmluZShcclxuICAgIE51bWJlciwgJ2lzSW50ZWdlcicsXHJcbiAgICBmdW5jdGlvbiBpc0ludGVnZXIobnVtYmVyKSB7XHJcbiAgICAgIGlmIChUeXBlKG51bWJlcikgIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIGlmIChudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09ICtJbmZpbml0eSB8fCBudW1iZXIgPT09IC1JbmZpbml0eSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB2YXIgaW50ZWdlciA9IFRvSW50ZWdlcihudW1iZXIpO1xyXG4gICAgICBpZiAoaW50ZWdlciAhPT0gbnVtYmVyKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIDIwLjEuMi40IE51bWJlci5pc05hTiAoIG51bWJlciApXHJcbiAgZGVmaW5lKFxyXG4gICAgTnVtYmVyLCAnaXNOYU4nLFxyXG4gICAgZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XHJcbiAgICAgIGlmIChUeXBlKG51bWJlcikgIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIGlmIChudW1iZXIgIT09IG51bWJlcikgcmV0dXJuIHRydWU7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlciAoIG51bWJlciApXHJcbiAgZGVmaW5lKFxyXG4gICAgTnVtYmVyLCAnaXNTYWZlSW50ZWdlcicsXHJcbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xyXG4gICAgICBpZiAoVHlwZShudW1iZXIpICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAobnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSArSW5maW5pdHkgfHwgbnVtYmVyID09PSAtSW5maW5pdHkpIHJldHVybiBmYWxzZTtcclxuICAgICAgdmFyIGludGVnZXIgPSBUb0ludGVnZXIobnVtYmVyKTtcclxuICAgICAgaWYgKGludGVnZXIgIT09IG51bWJlcikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAoYWJzKGludGVnZXIpIDw9ICgweDIwMDAwMDAwMDAwMDAwIC0gMSkpIC8vIDJeNTMtMVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcclxuICBkZWZpbmUoXHJcbiAgICBOdW1iZXIsICdNQVhfU0FGRV9JTlRFR0VSJyxcclxuICAgIDkwMDcxOTkyNTQ3NDA5OTEpOyAvLyAyXjUzLTFcclxuXHJcbiAgLy8gMjAuMS4yLjcgTnVtYmVyLk1BWF9WQUxVRVxyXG5cclxuICAvLyAyMC4xLjIuOCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxyXG4gIGRlZmluZShcclxuICAgIE51bWJlciwgJ01JTl9TQUZFX0lOVEVHRVInLFxyXG4gICAgLTkwMDcxOTkyNTQ3NDA5OTEpOyAvLyAtMl41MysxXHJcblxyXG4gIC8vIDIwLjEuMi45IE51bWJlci5NSU5fVkFMVUVcclxuICAvLyAyMC4xLjIuMTAgTnVtYmVyLk5hTlxyXG4gIC8vIDIwLjEuMi4xMSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcclxuXHJcbiAgLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0ICggc3RyaW5nIClcclxuICBkZWZpbmUoTnVtYmVyLCAncGFyc2VGbG9hdCcsICRwYXJzZUZsb2F0KTtcclxuXHJcbiAgLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludCAoIHN0cmluZywgcmFkaXggKVxyXG4gIGRlZmluZShOdW1iZXIsICdwYXJzZUludCcsICRwYXJzZUludCk7XHJcblxyXG4gIC8vIDIwLjEuMi4xNCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcclxuICAvLyAyMC4xLjIuMTUgTnVtYmVyLnByb3RvdHlwZVxyXG5cclxuICAvLyAyMC4xLjMgUHJvcGVydGllcyBvZiB0aGUgTnVtYmVyIFByb3RvdHlwZSBPYmplY3RcclxuICAvLyAyMC4xLjMuMSBOdW1iZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcbiAgLy8gMjAuMS4zLjIgTnVtYmVyLnByb3RvdHlwZS50b0V4cG9uZW50aWFsICggZnJhY3Rpb25EaWdpdHMgKVxyXG4gIC8vIDIwLjEuMy4zIE51bWJlci5wcm90b3R5cGUudG9GaXhlZCAoIGZyYWN0aW9uRGlnaXRzIClcclxuICAvLyAyMC4xLjMuNCBOdW1iZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nKCBbIHJlc2VydmVkMSBbICwgcmVzZXJ2ZWQyIF0gXSlcclxuICAvLyAyMC4xLjMuNSBOdW1iZXIucHJvdG90eXBlLnRvUHJlY2lzaW9uICggcHJlY2lzaW9uIClcclxuICAvLyAyMC4xLjMuNiBOdW1iZXIucHJvdG90eXBlLnRvU3RyaW5nICggWyByYWRpeCBdIClcclxuICAvLyAyMC4xLjMuNyBOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YgKCApXHJcbiAgLy8gMjAuMS40IFByb3BlcnRpZXMgb2YgTnVtYmVyIEluc3RhbmNlc1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyMC4yIFRoZSBNYXRoIE9iamVjdFxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyAyMC4yLjEgVmFsdWUgUHJvcGVydGllcyBvZiB0aGUgTWF0aCBPYmplY3RcclxuICAvLyAyMC4yLjEuMSBNYXRoLkVcclxuICAvLyAyMC4yLjEuMiBNYXRoLkxOMTBcclxuICAvLyAyMC4yLjEuMyBNYXRoLkxOMlxyXG4gIC8vIDIwLjIuMS40IE1hdGguTE9HMTBFXHJcbiAgLy8gMjAuMi4xLjUgTWF0aC5MT0cyRVxyXG4gIC8vIDIwLjIuMS42IE1hdGguUElcclxuICAvLyAyMC4yLjEuNyBNYXRoLlNRUlQxXzJcclxuICAvLyAyMC4yLjEuOCBNYXRoLlNRUlQyXHJcblxyXG4gIC8vIDIwLjIuMS45IE1hdGggWyBAQHRvU3RyaW5nVGFnIF1cclxuICBkZWZpbmUoTWF0aCwgJCR0b1N0cmluZ1RhZywgJ01hdGgnKTtcclxuXHJcbiAgLy8gMjAuMi4yIEZ1bmN0aW9uIFByb3BlcnRpZXMgb2YgdGhlIE1hdGggT2JqZWN0XHJcbiAgLy8gMjAuMi4yLjEgTWF0aC5hYnMgKCB4IClcclxuICAvLyAyMC4yLjIuMiBNYXRoLmFjb3MgKCB4IClcclxuXHJcbiAgLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxyXG4gIGRlZmluZShcclxuICAgIE1hdGgsICdhY29zaCcsXHJcbiAgICBmdW5jdGlvbiBhY29zaCh4KSB7XHJcbiAgICAgIHggPSBOdW1iZXIoeCk7XHJcbiAgICAgIHJldHVybiBsb2coeCArIHNxcnQoeCAqIHggLSAxKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjAuMi4yLjQgTWF0aC5hc2luICggeCApXHJcblxyXG4gIC8vIDIwLjIuMi41IE1hdGguYXNpbmgoIHggKVxyXG4gIGRlZmluZShcclxuICAgIE1hdGgsICdhc2luaCcsXHJcbiAgICBmdW5jdGlvbiBhc2luaCh4KSB7XHJcbiAgICAgIHggPSBOdW1iZXIoeCk7XHJcbiAgICAgIGlmIChTYW1lVmFsdWUoeCwgLTApKSB7XHJcbiAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIHMgPSBzcXJ0KHggKiB4ICsgMSk7XHJcbiAgICAgIHJldHVybiAocyA9PT0gLXgpID8gbG9nKDApIDogbG9nKHggKyBzKTtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMC4yLjIuNiBNYXRoLmF0YW4gKCB4IClcclxuXHJcbiAgLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCggeCApXHJcbiAgZGVmaW5lKFxyXG4gICAgTWF0aCwgJ2F0YW5oJyxcclxuICAgIGZ1bmN0aW9uIGF0YW5oKHgpIHtcclxuICAgICAgeCA9IE51bWJlcih4KTtcclxuICAgICAgcmV0dXJuICh4ID09PSAwKSA/IHggOiBsb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMC4yLjIuOCBNYXRoLmF0YW4yICggeSwgeCApXHJcblxyXG4gIC8vIDIwLjIuMi45IE1hdGguY2JydCAoIHggKVxyXG4gIGRlZmluZShcclxuICAgIE1hdGgsICdjYnJ0JyxcclxuICAgIGZ1bmN0aW9uIGNicnQoeCkge1xyXG4gICAgICB4ID0gTnVtYmVyKHgpO1xyXG4gICAgICBpZiAoJGlzTmFOKHgveCkpIHtcclxuICAgICAgICByZXR1cm4geDtcclxuICAgICAgfVxyXG4gICAgICB2YXIgciA9IHBvdyhhYnMoeCksIDEvMyk7XHJcbiAgICAgIHZhciB0ID0geC9yL3I7XHJcbiAgICAgIHJldHVybiByICsgKHIgKiAodC1yKSAvICgyKnIgKyB0KSk7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjAuMi4yLjEwIE1hdGguY2VpbCAoIHggKVxyXG5cclxuICAvLyAyMC4yLjIuMTEgTWF0aC5jbHozMiAoIHggKVxyXG4gIGRlZmluZShcclxuICAgIE1hdGgsICdjbHozMicsXHJcbiAgICBmdW5jdGlvbiBjbHozMih4KSB7XHJcbiAgICAgIGZ1bmN0aW9uIGNsejgoeCkge1xyXG4gICAgICAgIHJldHVybiAoeCAmIDB4ZjApID8gKHggJiAweDgwID8gMCA6IHggJiAweDQwID8gMSA6IHggJiAweDIwID8gMiA6IDMpIDpcclxuICAgICAgICAoeCAmIDB4MDggPyA0IDogeCAmIDB4MDQgPyA1IDogeCAmIDB4MDIgPyA2IDogeCAmIDB4MDEgPyA3IDogOCk7XHJcbiAgICAgIH1cclxuICAgICAgeCA9IFRvVWludDMyKHgpO1xyXG4gICAgICByZXR1cm4geCAmIDB4ZmYwMDAwMDAgPyBjbHo4KHggPj4gMjQpIDpcclxuICAgICAgICB4ICYgMHhmZjAwMDAgPyBjbHo4KHggPj4gMTYpICsgOCA6XHJcbiAgICAgICAgeCAmIDB4ZmYwMCA/IGNsejgoeCA+PiA4KSArIDE2IDogY2x6OCh4KSArIDI0O1xyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbiAgLy8gMjAuMi4yLjEyIE1hdGguY29zICggeCApXHJcblxyXG4gIC8vIDIwLjIuMi4xMyBNYXRoLmNvc2ggKCB4IClcclxuICBkZWZpbmUoXHJcbiAgICBNYXRoLCAnY29zaCcsXHJcbiAgICBmdW5jdGlvbiBjb3NoKHgpIHtcclxuICAgICAgeCA9IE51bWJlcih4KTtcclxuICAgICAgcmV0dXJuIChwb3coRSwgeCkgKyBwb3coRSwgLXgpKSAvIDI7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjAuMi4yLjE0IE1hdGguZXhwICggeCApXHJcblxyXG4gIC8vIDIwLjIuMi4xNSBNYXRoLmV4cG0xICggeCApXHJcbiAgZGVmaW5lKFxyXG4gICAgTWF0aCwgJ2V4cG0xJyxcclxuICAgIGZ1bmN0aW9uIGV4cG0xKHgpIHtcclxuICAgICAgeCA9IE51bWJlcih4KTtcclxuICAgICAgLy8gZnJvbTogaHR0cDovL3d3dy5qb2huZGNvb2suY29tL2NwcF9sb2cxcC5odG1sXHJcbiAgICAgIGlmIChTYW1lVmFsdWUoeCwgLTApKSB7XHJcbiAgICAgICAgcmV0dXJuIC0wO1xyXG4gICAgICB9IGVsc2UgaWYgKGFicyh4KSA8IDFlLTUpIHtcclxuICAgICAgICByZXR1cm4geCArIDAuNSAqIHggKiB4OyAvLyB0d28gdGVybXMgb2YgVGF5bG9yIGV4cGFuc2lvblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBleHAoeCkgLSAxO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjAuMi4yLjE2IE1hdGguZmxvb3IgKCB4IClcclxuXHJcbiAgLy8gMjAuMi4yLjE3IE1hdGguZnJvdW5kICggeCApXHJcbiAgZGVmaW5lKFxyXG4gICAgTWF0aCwgJ2Zyb3VuZCcsXHJcbiAgICBmdW5jdGlvbiBmcm91bmQoeCkge1xyXG4gICAgICBpZiAoJGlzTmFOKHgpKSB7XHJcbiAgICAgICAgcmV0dXJuIE5hTjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoMS94ID09PSArSW5maW5pdHkgfHwgMS94ID09PSAtSW5maW5pdHkgfHwgeCA9PT0gK0luZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkge1xyXG4gICAgICAgIHJldHVybiB4O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAobmV3IEZsb2F0MzJBcnJheShbeF0pKVswXTtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMC4yLjIuMTggTWF0aC5oeXBvdCAoIHZhbHVlMSBbLCB2YWx1ZTIgWyAuLi4gXSBdIClcclxuICBkZWZpbmUoXHJcbiAgICBNYXRoLCAnaHlwb3QnLFxyXG4gICAgZnVuY3Rpb24gaHlwb3QoKSB7XHJcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcclxuICAgICAgdmFyIG0gPSAwLCBzYXdOYU4gPSBmYWxzZTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICB2YXIgbiA9IGFicyhOdW1iZXIoYXJndW1lbnRzW2ldKSk7XHJcbiAgICAgICAgaWYgKG4gPT09IEluZmluaXR5KSByZXR1cm4gbjtcclxuICAgICAgICBpZiAobiAhPT0gbikgc2F3TmFOID0gdHJ1ZTtcclxuICAgICAgICBpZiAobiA+IG0pIG0gPSBuO1xyXG4gICAgICAgIHZhbHVlc1tpXSA9IG47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHNhd05hTikgcmV0dXJuIE5hTjtcclxuICAgICAgaWYgKG0gPT09IDApIHJldHVybiArMDtcclxuICAgICAgdmFyIHN1bSA9ICswO1xyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgdmFyIHIgPSB2YWx1ZXNbaV0gLyBtO1xyXG4gICAgICAgIHN1bSA9IHN1bSArIHIgKiByO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBtICogc3FydChzdW0pO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIDIwLjIuMi4xOSBNYXRoLmltdWwgKCB4LCB5IClcclxuICBkZWZpbmUoXHJcbiAgICBNYXRoLCAnaW11bCcsXHJcbiAgICBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcclxuICAgICAgdmFyIGEgPSBUb1VpbnQzMih4KTtcclxuICAgICAgdmFyIGIgPSBUb1VpbnQzMih5KTtcclxuICAgICAgLy8gKHNsb3cgYnV0IGFjY3VyYXRlKVxyXG4gICAgICB2YXIgYWggID0gKGEgPj4+IDE2KSAmIDB4ZmZmZjtcclxuICAgICAgdmFyIGFsID0gYSAmIDB4ZmZmZjtcclxuICAgICAgdmFyIGJoICA9IChiID4+PiAxNikgJiAweGZmZmY7XHJcbiAgICAgIHZhciBibCA9IGIgJiAweGZmZmY7XHJcbiAgICAgIHJldHVybiAoKGFsICogYmwpICsgKCgoYWggKiBibCArIGFsICogYmgpIDw8IDE2KSA+Pj4gMCl8MCk7XHJcbiAgICB9LCAoJ2ltdWwnIGluIE1hdGggJiYgTWF0aC5pbXVsKDEsIDB4ODAwMDAwMDApID09PSAwKSAvLyBTYWZhcmkgNyBidWdcclxuICApO1xyXG5cclxuICAvLyAyMC4yLjIuMjAgTWF0aC5sb2cgKCB4IClcclxuXHJcbiAgLy8gMjAuMi4yLjIxIE1hdGgubG9nMXAgKCB4IClcclxuICBkZWZpbmUoXHJcbiAgICBNYXRoLCAnbG9nMXAnLFxyXG4gICAgZnVuY3Rpb24gbG9nMXAoeCkge1xyXG4gICAgICB4ID0gTnVtYmVyKHgpO1xyXG4gICAgICAvLyBmcm9tOiBodHRwOi8vd3d3LmpvaG5kY29vay5jb20vY3BwX2V4cG0xLmh0bWxcclxuICAgICAgaWYgKHggPCAtMSkge1xyXG4gICAgICAgIHJldHVybiBOYU47XHJcbiAgICAgIH0gZWxzZSBpZiAoU2FtZVZhbHVlKHgsIC0wKSkge1xyXG4gICAgICAgIHJldHVybiAtMDtcclxuICAgICAgfSBlbHNlIGlmIChhYnMoeCkgPiAxZS00KSB7XHJcbiAgICAgICAgcmV0dXJuIGxvZygxICsgeCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICgtMC41ICogeCArIDEpICogeDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIC8vIDIwLjIuMi4yMiBNYXRoLmxvZzEwICggeCApXHJcbiAgZGVmaW5lKFxyXG4gICAgTWF0aCwgJ2xvZzEwJyxcclxuICAgIGZ1bmN0aW9uIGxvZzEwKHgpIHtcclxuICAgICAgeCA9IE51bWJlcih4KTtcclxuICAgICAgcmV0dXJuIGxvZyh4KSAqIExPRzEwRTtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMC4yLjIuMjMgTWF0aC5sb2cyICggeCApXHJcbiAgZGVmaW5lKFxyXG4gICAgTWF0aCwgJ2xvZzInLFxyXG4gICAgZnVuY3Rpb24gbG9nMih4KSB7XHJcbiAgICAgIHggPSBOdW1iZXIoeCk7XHJcbiAgICAgIHJldHVybiBsb2coeCkgKiBMT0cyRTtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMC4yLjIuMjQgTWF0aC5tYXggKCB2YWx1ZTEsIHZhbHVlMiAsIC4uLnZhbHVlcyApXHJcbiAgLy8gMjAuMi4yLjI1IE1hdGgubWluICggdmFsdWUxLCB2YWx1ZTIgLCAuLi52YWx1ZXMgKVxyXG4gIC8vIDIwLjIuMi4yNiBNYXRoLnBvdyAoIHgsIHkgKVxyXG4gIC8vIDIwLjIuMi4yNyBNYXRoLnJhbmRvbSAoIClcclxuICAvLyAyMC4yLjIuMjggTWF0aC5yb3VuZCAoIHggKVxyXG5cclxuICAvLyAyMC4yLjIuMjkgTWF0aC5zaWduKHgpXHJcbiAgZGVmaW5lKFxyXG4gICAgTWF0aCwgJ3NpZ24nLFxyXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XHJcbiAgICAgIHggPSBOdW1iZXIoeCk7XHJcbiAgICAgIHJldHVybiB4IDwgMCA/IC0xIDogeCA+IDAgPyAxIDogeDtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMC4yLjIuMzAgTWF0aC5zaW4gKCB4IClcclxuXHJcbiAgLy8gMjAuMi4yLjMxIE1hdGguc2luaCggeCApXHJcbiAgZGVmaW5lKFxyXG4gICAgTWF0aCwgJ3NpbmgnLFxyXG4gICAgZnVuY3Rpb24gc2luaCh4KSB7XHJcbiAgICAgIHggPSBOdW1iZXIoeCk7XHJcbiAgICAgIHJldHVybiBTYW1lVmFsdWUoeCwgLTApID8geCA6IChwb3coRSwgeCkgLSBwb3coRSwgLXgpKSAvIDI7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjAuMi4yLjMyIE1hdGguc3FydCAoIHggKVxyXG4gIC8vIDIwLjIuMi4zMyBNYXRoLnRhbiAoIHggKVxyXG5cclxuICAvLyAyMC4yLjIuMzQgTWF0aC50YW5oICggeCApXHJcbiAgZGVmaW5lKFxyXG4gICAgTWF0aCwgJ3RhbmgnLFxyXG4gICAgZnVuY3Rpb24gdGFuaCh4KSB7XHJcbiAgICAgIHggPSBOdW1iZXIoeCk7XHJcbiAgICAgIHZhciBuID0gcG93KEUsIDIgKiB4KSAtIDEsXHJcbiAgICAgICAgICBkID0gcG93KEUsIDIgKiB4KSArIDE7XHJcbiAgICAgIGlmIChTYW1lVmFsdWUoeCwgLTApKVxyXG4gICAgICAgIHJldHVybiB4O1xyXG4gICAgICByZXR1cm4gKG4gPT09IGQpID8gMSA6IG4gLyBkOyAvLyBIYW5kbGUgSW5maW5pdHkvSW5maW5pdHlcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMC4yLjIuMzUgTWF0aC50cnVuYyAoIHggKVxyXG4gIGRlZmluZShcclxuICAgIE1hdGgsICd0cnVuYycsXHJcbiAgICBmdW5jdGlvbiB0cnVuYyh4KSB7XHJcbiAgICAgIHggPSBOdW1iZXIoeCk7XHJcbiAgICAgIHJldHVybiAkaXNOYU4oeCkgPyBOYU4gOlxyXG4gICAgICAgIHggPCAwID8gY2VpbCh4KSA6IGZsb29yKHgpO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDIwLjMgRGF0ZSBPYmplY3RzXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIDIwLjMuMSBPdmVydmlldyBvZiBEYXRlIE9iamVjdHMgYW5kIERlZmluaXRpb25zIG9mIEFic3RyYWN0IE9wZXJhdGlvbnNcclxuICAvLyAyMC4zLjEuMSBUaW1lIFZhbHVlcyBhbmQgVGltZSBSYW5nZVxyXG4gIC8vIDIwLjMuMS4yIERheSBOdW1iZXIgYW5kIFRpbWUgd2l0aGluIERheVxyXG4gIC8vIDIwLjMuMS4zIFllYXIgTnVtYmVyXHJcbiAgLy8gMjAuMy4xLjQgTW9udGggTnVtYmVyXHJcbiAgLy8gMjAuMy4xLjUgRGF0ZSBOdW1iZXJcclxuICAvLyAyMC4zLjEuNiBXZWVrIERheVxyXG4gIC8vIDIwLjMuMS43IExvY2FsIFRpbWUgWm9uZSBBZGp1c3RtZW50XHJcbiAgLy8gMjAuMy4xLjggRGF5bGlnaHQgU2F2aW5nIFRpbWUgQWRqdXN0bWVudFxyXG4gIC8vIDIwLjMuMS45IExvY2FsIFRpbWVcclxuICAvLyAyMC4zLjEuMTAgSG91cnMsIE1pbnV0ZXMsIFNlY29uZCwgYW5kIE1pbGxpc2Vjb25kc1xyXG4gIC8vIDIwLjMuMS4xMSBNYWtlVGltZSAoaG91ciwgbWluLCBzZWMsIG1zKVxyXG4gIC8vIDIwLjMuMS4xMiBNYWtlRGF5ICh5ZWFyLCBtb250aCwgZGF0ZSlcclxuICAvLyAyMC4zLjEuMTMgTWFrZURhdGUgKGRheSwgdGltZSlcclxuICAvLyAyMC4zLjEuMTQgVGltZUNsaXAgKHRpbWUpXHJcbiAgLy8gMjAuMy4xLjE1IERhdGUgVGltZSBTdHJpbmcgRm9ybWF0XHJcbiAgLy8gMjAuMy4xLjE1LjEgRXh0ZW5kZWQgeWVhcnNcclxuICAvLyAyMC4zLjIgVGhlIERhdGUgQ29uc3RydWN0b3JcclxuICAvLyAyMC4zLjIuMSBEYXRlICggeWVhciwgbW9udGggWywgZGF0ZSBbICwgaG91cnMgWyAsIG1pbnV0ZXMgWyAsIHNlY29uZHMgWyAsIG1zIF0gXSBdIF0gXSApXHJcbiAgLy8gMjAuMy4yLjIgRGF0ZSAoIHZhbHVlIClcclxuICAvLyAyMC4zLjIuMyBEYXRlICggKVxyXG4gIC8vIDIwLjMuMyBQcm9wZXJ0aWVzIG9mIHRoZSBEYXRlIENvbnN0cnVjdG9yXHJcbiAgLy8gMjAuMy4zLjEgRGF0ZS5ub3cgKCApXHJcbiAgLy8gMjAuMy4zLjIgRGF0ZS5wYXJzZSAoc3RyaW5nKVxyXG4gIC8vIDIwLjMuMy4zIERhdGUucHJvdG90eXBlXHJcbiAgLy8gMjAuMy4zLjQgRGF0ZS5VVEMgKCB5ZWFyLCBtb250aCBbICwgZGF0ZSBbICwgaG91cnMgWyAsIG1pbnV0ZXMgWyAsIHNlY29uZHMgWyAsIG1zIF0gXSBdIF0gXSApXHJcbiAgLy8gMjAuMy40IFByb3BlcnRpZXMgb2YgdGhlIERhdGUgUHJvdG90eXBlIE9iamVjdFxyXG4gIC8vIDIwLjMuNC4xIERhdGUucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcbiAgLy8gMjAuMy40LjIgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSAoIClcclxuICAvLyAyMC4zLjQuMyBEYXRlLnByb3RvdHlwZS5nZXREYXkgKCApXHJcbiAgLy8gMjAuMy40LjQgRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIgKCApXHJcbiAgLy8gMjAuMy40LjUgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgKCApXHJcbiAgLy8gMjAuMy40LjYgRGF0ZS5wcm90b3R5cGUuZ2V0TWlsbGlzZWNvbmRzICggKVxyXG4gIC8vIDIwLjMuNC43IERhdGUucHJvdG90eXBlLmdldE1pbnV0ZXMgKCApXHJcbiAgLy8gMjAuMy40LjggRGF0ZS5wcm90b3R5cGUuZ2V0TW9udGggKCApXHJcbiAgLy8gMjAuMy40LjkgRGF0ZS5wcm90b3R5cGUuZ2V0U2Vjb25kcyAoIClcclxuICAvLyAyMC4zLjQuMTAgRGF0ZS5wcm90b3R5cGUuZ2V0VGltZSAoIClcclxuICAvLyAyMC4zLjQuMTEgRGF0ZS5wcm90b3R5cGUuZ2V0VGltZXpvbmVPZmZzZXQgKCApXHJcbiAgLy8gMjAuMy40LjEyIERhdGUucHJvdG90eXBlLmdldFVUQ0RhdGUgKCApXHJcbiAgLy8gMjAuMy40LjEzIERhdGUucHJvdG90eXBlLmdldFVUQ0RheSAoIClcclxuICAvLyAyMC4zLjQuMTQgRGF0ZS5wcm90b3R5cGUuZ2V0VVRDRnVsbFllYXIgKCApXHJcbiAgLy8gMjAuMy40LjE1IERhdGUucHJvdG90eXBlLmdldFVUQ0hvdXJzICggKVxyXG4gIC8vIDIwLjMuNC4xNiBEYXRlLnByb3RvdHlwZS5nZXRVVENNaWxsaXNlY29uZHMgKCApXHJcbiAgLy8gMjAuMy40LjE3IERhdGUucHJvdG90eXBlLmdldFVUQ01pbnV0ZXMgKCApXHJcbiAgLy8gMjAuMy40LjE4IERhdGUucHJvdG90eXBlLmdldFVUQ01vbnRoICggKVxyXG4gIC8vIDIwLjMuNC4xOSBEYXRlLnByb3RvdHlwZS5nZXRVVENTZWNvbmRzICggKVxyXG4gIC8vIDIwLjMuNC4yMCBEYXRlLnByb3RvdHlwZS5zZXREYXRlICggZGF0ZSApXHJcbiAgLy8gMjAuMy40LjIxIERhdGUucHJvdG90eXBlLnNldEZ1bGxZZWFyICggeWVhciBbICwgbW9udGggWyAsIGRhdGUgXSBdIClcclxuICAvLyAyMC4zLjQuMjIgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMgKCBob3VyIFsgLCBtaW4gWyAsIHNlYyBbICwgbXMgXSBdIF0gKVxyXG4gIC8vIDIwLjMuNC4yMyBEYXRlLnByb3RvdHlwZS5zZXRNaWxsaXNlY29uZHMgKCBtcyApXHJcbiAgLy8gMjAuMy40LjI0IERhdGUucHJvdG90eXBlLnNldE1pbnV0ZXMgKCBtaW4gWyAsIHNlYyBbICwgbXMgXSBdIClcclxuICAvLyAyMC4zLjQuMjUgRGF0ZS5wcm90b3R5cGUuc2V0TW9udGggKCBtb250aCBbICwgZGF0ZSBdIClcclxuICAvLyAyMC4zLjQuMjYgRGF0ZS5wcm90b3R5cGUuc2V0U2Vjb25kcyAoIHNlYyBbICwgbXMgXSApXHJcbiAgLy8gMjAuMy40LjI3IERhdGUucHJvdG90eXBlLnNldFRpbWUgKCB0aW1lIClcclxuICAvLyAyMC4zLjQuMjggRGF0ZS5wcm90b3R5cGUuc2V0VVRDRGF0ZSAoIGRhdGUgKVxyXG4gIC8vIDIwLjMuNC4yOSBEYXRlLnByb3RvdHlwZS5zZXRVVENGdWxsWWVhciAoIHllYXIgWyAsIG1vbnRoIFsgLCBkYXRlIF0gXSApXHJcbiAgLy8gMjAuMy40LjMwIERhdGUucHJvdG90eXBlLnNldFVUQ0hvdXJzICggaG91ciBbICwgbWluIFsgLCBzZWMgWyAsIG1zIF0gXSBdIClcclxuICAvLyAyMC4zLjQuMzEgRGF0ZS5wcm90b3R5cGUuc2V0VVRDTWlsbGlzZWNvbmRzICggbXMgKVxyXG4gIC8vIDIwLjMuNC4zMiBEYXRlLnByb3RvdHlwZS5zZXRVVENNaW51dGVzICggbWluIFsgLCBzZWMgWywgbXMgXSBdIClcclxuICAvLyAyMC4zLjQuMzMgRGF0ZS5wcm90b3R5cGUuc2V0VVRDTW9udGggKCBtb250aCBbICwgZGF0ZSBdIClcclxuICAvLyAyMC4zLjQuMzQgRGF0ZS5wcm90b3R5cGUuc2V0VVRDU2Vjb25kcyAoIHNlYyBbICwgbXMgXSApXHJcbiAgLy8gMjAuMy40LjM1IERhdGUucHJvdG90eXBlLnRvRGF0ZVN0cmluZyAoIClcclxuICAvLyAyMC4zLjQuMzYgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgKCApXHJcbiAgLy8gMjAuMy40LjM3IERhdGUucHJvdG90eXBlLnRvSlNPTiAoIGtleSApXHJcbiAgLy8gMjAuMy40LjM4IERhdGUucHJvdG90eXBlLnRvTG9jYWxlRGF0ZVN0cmluZyAoIFsgcmVzZXJ2ZWQxIFsgLCByZXNlcnZlZDIgXSBdIClcclxuICAvLyAyMC4zLjQuMzkgRGF0ZS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgKCBbIHJlc2VydmVkMSBbICwgcmVzZXJ2ZWQyIF0gXSApXHJcbiAgLy8gMjAuMy40LjQwIERhdGUucHJvdG90eXBlLnRvTG9jYWxlVGltZVN0cmluZyAoIFsgcmVzZXJ2ZWQxIFsgLCByZXNlcnZlZDIgXSBdIClcclxuICAvLyAyMC4zLjQuNDEgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcgKCApXHJcbiAgLy8gMjAuMy40LjQyIERhdGUucHJvdG90eXBlLnRvVGltZVN0cmluZyAoIClcclxuICAvLyAyMC4zLjQuNDMgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcgKCApXHJcbiAgLy8gMjAuMy40LjQ0IERhdGUucHJvdG90eXBlLnZhbHVlT2YgKCApXHJcbiAgLy8gMjAuMy40LjQ1IERhdGUucHJvdG90eXBlIFsgQEB0b1ByaW1pdGl2ZSBdICggaGludCApXHJcbiAgLy8gMjAuMy41IFByb3BlcnRpZXMgb2YgRGF0ZSBJbnN0YW5jZXNcclxuXHJcbiAgLy8gKE5vIHBvbHlmaWxsYWJsZSBjaGFuZ2VzIGZyb20gRVM1KVxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyMSBUZXh0IFByb2Nlc3NpbmdcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgdmFyIHN0cmluZ19yZWdleHBfZGlzcGF0Y2ggPSAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZmF1eCA9IHt9LCBzZWNyZXQgPSBTeW1ib2woKTtcclxuICAgIGZhdXhbU3ltYm9sLm1hdGNoXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VjcmV0OyB9O1xyXG4gICAgcmV0dXJuIChcIlwiKS5tYXRjaChmYXV4KSA9PT0gc2VjcmV0O1xyXG4gIH0oKSk7XHJcblxyXG4gIC8vIDIxLjEgU3RyaW5nIE9iamVjdHNcclxuICAvLyAyMS4xLjEgVGhlIFN0cmluZyBDb25zdHJ1Y3RvclxyXG4gIC8vIDIxLjEuMS4xIFN0cmluZyAoIHZhbHVlIClcclxuICAvLyAyMS4xLjIgUHJvcGVydGllcyBvZiB0aGUgU3RyaW5nIENvbnN0cnVjdG9yXHJcbiAgLy8gMjEuMS4yLjEgU3RyaW5nLmZyb21DaGFyQ29kZSAoIC4uLmNvZGVVbml0cyApXHJcblxyXG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50ICggLi4uY29kZVBvaW50cyApXHJcbiAgZGVmaW5lKFxyXG4gICAgU3RyaW5nLCAnZnJvbUNvZGVQb2ludCcsXHJcbiAgICBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KC8qLi4uY29kZVBvaW50cyovKSB7XHJcbiAgICAgIHZhciBjb2RlUG9pbnRzID0gYXJndW1lbnRzLFxyXG4gICAgICAgICAgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGgsXHJcbiAgICAgICAgICBlbGVtZW50cyA9IFtdLFxyXG4gICAgICAgICAgbmV4dEluZGV4ID0gMDtcclxuICAgICAgd2hpbGUgKG5leHRJbmRleCA8IGxlbmd0aCkge1xyXG4gICAgICAgIHZhciBuZXh0ID0gY29kZVBvaW50c1tuZXh0SW5kZXhdO1xyXG4gICAgICAgIHZhciBuZXh0Q1AgPSBOdW1iZXIobmV4dCk7XHJcbiAgICAgICAgaWYgKCFTYW1lVmFsdWUobmV4dENQLCBUb0ludGVnZXIobmV4dENQKSkgfHxcclxuICAgICAgICAgICAgbmV4dENQIDwgMCB8fCBuZXh0Q1AgPiAweDEwRkZGRikge1xyXG4gICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCBjb2RlIHBvaW50ICcgKyBuZXh0Q1ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmV4dENQIDwgMHgxMDAwMCkge1xyXG4gICAgICAgICAgZWxlbWVudHMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKG5leHRDUCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuZXh0Q1AgLT0gMHgxMDAwMDtcclxuICAgICAgICAgIGVsZW1lbnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgobmV4dENQID4+IDEwKSArIDB4RDgwMCkpO1xyXG4gICAgICAgICAgZWxlbWVudHMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKChuZXh0Q1AgJSAweDQwMCkgKyAweERDMDApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV4dEluZGV4ICs9IDE7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGVsZW1lbnRzLmpvaW4oJycpO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIDIxLjEuMi4zIFN0cmluZy5wcm90b3R5cGVcclxuXHJcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyAoIHRlbXBsYXRlICwgLi4uc3Vic3RpdHV0aW9ucyApXHJcbiAgZGVmaW5lKFxyXG4gICAgU3RyaW5nLCAncmF3JyxcclxuICAgIGZ1bmN0aW9uIHJhdyh0ZW1wbGF0ZSAvKiwgLi4uc3Vic3RpdHV0aW9ucyovKSB7XHJcbiAgICAgIHZhciBzdWJzdGl0dXRpb25zID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG5cclxuICAgICAgdmFyIGNvb2tlZCA9IE9iamVjdCh0ZW1wbGF0ZSk7XHJcbiAgICAgIHZhciByYXdWYWx1ZSA9IGNvb2tlZFsncmF3J107XHJcbiAgICAgIHZhciByYXcgPSBPYmplY3QocmF3VmFsdWUpO1xyXG4gICAgICB2YXIgbGVuID0gcmF3WydsZW5ndGgnXTtcclxuICAgICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IFRvTGVuZ3RoKGxlbik7XHJcbiAgICAgIGlmIChsaXRlcmFsU2VnbWVudHMgPD0gMCkgcmV0dXJuICcnO1xyXG4gICAgICB2YXIgc3RyaW5nRWxlbWVudHMgPSBbXTtcclxuICAgICAgdmFyIG5leHRJbmRleCA9IDA7XHJcbiAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgdmFyIG5leHQgPSByYXdbbmV4dEluZGV4XTtcclxuICAgICAgICB2YXIgbmV4dFNlZyA9IFN0cmluZyhuZXh0KTtcclxuICAgICAgICBzdHJpbmdFbGVtZW50cy5wdXNoKG5leHRTZWcpO1xyXG4gICAgICAgIGlmIChuZXh0SW5kZXggKyAxID09PSBsaXRlcmFsU2VnbWVudHMpXHJcbiAgICAgICAgICByZXR1cm4gc3RyaW5nRWxlbWVudHMuam9pbignJyk7XHJcbiAgICAgICAgbmV4dCA9IHN1YnN0aXR1dGlvbnNbbmV4dEluZGV4XTtcclxuICAgICAgICB2YXIgbmV4dFN1YiA9IFN0cmluZyhuZXh0KTtcclxuICAgICAgICBzdHJpbmdFbGVtZW50cy5wdXNoKG5leHRTdWIpO1xyXG4gICAgICAgIG5leHRJbmRleCA9IG5leHRJbmRleCArIDE7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAvLyBTZWUgaHR0cHM6Ly9naXRoaWIuY29tL2luZXhvcmFibGV0YXNoL3VhdGUgZm9yIGEgbW9yZSB1c2VmdWwgdmVyc2lvbi5cclxuXHJcbiAgLy8gMjEuMS4zIFByb3BlcnRpZXMgb2YgdGhlIFN0cmluZyBQcm90b3R5cGUgT2JqZWN0XHJcbiAgLy8gMjEuMS4zLjEgU3RyaW5nLnByb3RvdHlwZS5jaGFyQXQgKCBwb3MgKVxyXG4gIC8vIDIxLjEuMy4yIFN0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdCAoIHBvcyApXHJcblxyXG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQgKCBwb3MgKVxyXG4gIGRlZmluZShcclxuICAgIFN0cmluZy5wcm90b3R5cGUsICdjb2RlUG9pbnRBdCcsXHJcbiAgICBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcclxuICAgICAgdmFyIG8gPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgIHZhciBzID0gU3RyaW5nKG8pO1xyXG4gICAgICB2YXIgcG9zaXRpb24gPSBUb0ludGVnZXIocG9zKTtcclxuICAgICAgdmFyIHNpemUgPSBzLmxlbmd0aDtcclxuICAgICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB2YXIgZmlyc3QgPSBzLmNoYXJDb2RlQXQocG9zaXRpb24pO1xyXG4gICAgICBpZiAoZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplKSByZXR1cm4gZmlyc3Q7XHJcbiAgICAgIHZhciBzZWNvbmQgPSBzLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKTtcclxuICAgICAgaWYgKHNlY29uZCA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYpIHJldHVybiBmaXJzdDtcclxuICAgICAgcmV0dXJuICgoZmlyc3QgLSAweEQ4MDApICogMTAyNCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjEuMS4zLjQgU3RyaW5nLnByb3RvdHlwZS5jb25jYXQgKCAuLi5hcmdzIClcclxuICAvLyAyMS4xLjMuNSBTdHJpbmcucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcblxyXG4gIC8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggKCBzZWFyY2hTdHJpbmcgWyAsIGVuZFBvc2l0aW9uXSApXHJcbiAgZGVmaW5lKFxyXG4gICAgU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJyxcclxuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZykge1xyXG4gICAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHNbMV07XHJcblxyXG4gICAgICB2YXIgbyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgdmFyIHMgPSBTdHJpbmcobyk7XHJcbiAgICAgIHZhciBzZWFyY2hTdHIgPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcclxuICAgICAgdmFyIGxlbiA9IHMubGVuZ3RoO1xyXG4gICAgICB2YXIgcG9zID0gKGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQpID8gbGVuIDogVG9JbnRlZ2VyKGVuZFBvc2l0aW9uKTtcclxuICAgICAgdmFyIGVuZCA9IG1pbihtYXgocG9zLCAwKSwgbGVuKTtcclxuICAgICAgdmFyIHNlYXJjaExlbmd0aCA9IHNlYXJjaFN0ci5sZW5ndGg7XHJcbiAgICAgIHZhciBzdGFydCA9IGVuZCAtIHNlYXJjaExlbmd0aDtcclxuICAgICAgaWYgKHN0YXJ0IDwgMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAocy5zdWJzdHJpbmcoc3RhcnQsIHN0YXJ0ICsgc2VhcmNoTGVuZ3RoKSA9PT0gc2VhcmNoU3RyKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMgKCBzZWFyY2hTdHJpbmcgWyAsIHBvc2l0aW9uIF0gKVxyXG4gIGRlZmluZShcclxuICAgIFN0cmluZy5wcm90b3R5cGUsICdpbmNsdWRlcycsXHJcbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcpIHtcclxuICAgICAgdmFyIHBvc2l0aW9uID0gYXJndW1lbnRzWzFdO1xyXG5cclxuICAgICAgdmFyIG8gPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgIHZhciBzID0gU3RyaW5nKG8pO1xyXG4gICAgICB2YXIgc2VhcmNoU3RyID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XHJcbiAgICAgIHZhciBwb3MgPSBUb0ludGVnZXIocG9zaXRpb24pO1xyXG4gICAgICB2YXIgbGVuID0gcy5sZW5ndGg7XHJcbiAgICAgIHZhciBzdGFydCA9IG1pbihtYXgocG9zLCAwKSwgbGVuKTtcclxuICAgICAgcmV0dXJuIHMuaW5kZXhPZihzZWFyY2hTdHIsIHN0YXJ0KSAhPT0gLTE7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjEuMS4zLjggU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mICggc2VhcmNoU3RyaW5nIFsgLCBwb3NpdGlvbiBdIClcclxuICAvLyAyMS4xLjMuOSBTdHJpbmcucHJvdG90eXBlLmxhc3RJbmRleE9mICggc2VhcmNoU3RyaW5nIFsgLCBwb3NpdGlvbiBdIClcclxuICAvLyAyMS4xLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5sb2NhbGVDb21wYXJlICggdGhhdCBbLCByZXNlcnZlZDEgWyAsIHJlc2VydmVkMiBdIF0gKVxyXG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoICggcmVnZXhwIClcclxuICBkZWZpbmUoXHJcbiAgICBTdHJpbmcucHJvdG90eXBlLCAnbWF0Y2gnLFxyXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XHJcbiAgICAgIHZhciBvID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICB2YXIgcyA9IFN0cmluZyhvKTtcclxuICAgICAgaWYgKEhhc1Byb3BlcnR5KHJlZ2V4cCwgJCRtYXRjaCkpIHZhciByeCA9IHJlZ2V4cDtcclxuICAgICAgZWxzZSByeCA9IG5ldyBSZWdFeHAocmVnZXhwKTtcclxuICAgICAgcmV0dXJuIHJ4WyQkbWF0Y2hdKHMpO1xyXG4gICAgfSwgIXN0cmluZ19yZWdleHBfZGlzcGF0Y2gpO1xyXG5cclxuICAvLyAyMS4xLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5ub3JtYWxpemUgKCBbIGZvcm0gXSApXHJcblxyXG4gIC8vIE5vdCBwcmFjdGljYWwgZHVlIHRvIHRhYmxlIHNpemVzOyBpZiBuZWVkZWQsIHB1bGwgaW46XHJcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dhbGxpbmcvdW5vcm0vXHJcblxyXG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdCAoIGNvdW50IClcclxuICBkZWZpbmUoXHJcbiAgICBTdHJpbmcucHJvdG90eXBlLCAncmVwZWF0JyxcclxuICAgIGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xyXG4gICAgICB2YXIgbyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgdmFyIHMgPSBTdHJpbmcobyk7XHJcbiAgICAgIHZhciBuID0gVG9JbnRlZ2VyKGNvdW50KTtcclxuICAgICAgaWYgKG4gPCAwKSB0aHJvdyBSYW5nZUVycm9yKCk7XHJcbiAgICAgIGlmIChuID09PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcigpO1xyXG4gICAgICB2YXIgdCA9IG5ldyBBcnJheShuICsgMSkuam9pbihzKTtcclxuICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSAoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSApXHJcbiAgZGVmaW5lKFxyXG4gICAgU3RyaW5nLnByb3RvdHlwZSwgJ3JlcGxhY2UnLFxyXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XHJcbiAgICAgIHZhciBvID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICBpZiAoSGFzUHJvcGVydHkoc2VhcmNoVmFsdWUsICQkcmVwbGFjZSkpXHJcbiAgICAgICAgcmV0dXJuIHNlYXJjaFZhbHVlWyQkcmVwbGFjZV0obywgcmVwbGFjZVZhbHVlKTtcclxuICAgICAgcmV0dXJuIG9yaWdfcmVwbGFjZS5jYWxsKG8sIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xyXG4gICAgfSwgIXN0cmluZ19yZWdleHBfZGlzcGF0Y2gpO1xyXG5cclxuICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2ggKCByZWdleHAgKVxyXG4gIGRlZmluZShcclxuICAgIFN0cmluZy5wcm90b3R5cGUsICdzZWFyY2gnLFxyXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xyXG4gICAgICB2YXIgbyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyhvKTtcclxuICAgICAgaWYgKEhhc1Byb3BlcnR5KHJlZ2V4cCwgJCRzZWFyY2gpKSB2YXIgcnggPSByZWdleHA7XHJcbiAgICAgIGVsc2UgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCk7XHJcbiAgICAgIHJldHVybiByeFskJHNlYXJjaF0oc3RyaW5nKTtcclxuICAgIH0sICFzdHJpbmdfcmVnZXhwX2Rpc3BhdGNoKTtcclxuXHJcbiAgLy8gMjEuMS4zLjE2IFN0cmluZy5wcm90b3R5cGUuc2xpY2UgKCBzdGFydCwgZW5kIClcclxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCAoIHNlcGFyYXRvciwgbGltaXQgKVxyXG4gIGRlZmluZShcclxuICAgIFN0cmluZy5wcm90b3R5cGUsICdzcGxpdCcsXHJcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XHJcbiAgICAgIHZhciBvID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICBpZiAoSGFzUHJvcGVydHkoc2VwYXJhdG9yLCAkJHNwbGl0KSlcclxuICAgICAgICByZXR1cm4gc2VwYXJhdG9yWyQkc3BsaXRdKG8sIGxpbWl0KTtcclxuICAgICAgcmV0dXJuIG9yaWdfc3BsaXQuY2FsbChvLCBzZXBhcmF0b3IsIGxpbWl0KTtcclxuICAgIH0sICFzdHJpbmdfcmVnZXhwX2Rpc3BhdGNoKTtcclxuXHJcbiAgLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCAoIHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdIClcclxuICBkZWZpbmUoXHJcbiAgICBTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcsXHJcbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZykge1xyXG4gICAgICB2YXIgcG9zaXRpb24gPSBhcmd1bWVudHNbMV07XHJcblxyXG4gICAgICB2YXIgbyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgdmFyIHMgPSBTdHJpbmcobyk7XHJcbiAgICAgIHZhciBzZWFyY2hTdHIgPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcclxuICAgICAgdmFyIHBvcyA9IFRvSW50ZWdlcihwb3NpdGlvbik7XHJcbiAgICAgIHZhciBsZW4gPSBzLmxlbmd0aDtcclxuICAgICAgdmFyIHN0YXJ0ID0gbWluKG1heChwb3MsIDApLCBsZW4pO1xyXG4gICAgICB2YXIgc2VhcmNoTGVuZ3RoID0gc2VhcmNoU3RyLmxlbmd0aDtcclxuICAgICAgaWYgKHNlYXJjaExlbmd0aCArIHN0YXJ0ID4gbGVuKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIGlmIChzLnN1YnN0cmluZyhzdGFydCwgc3RhcnQgKyBzZWFyY2hMZW5ndGgpID09PSBzZWFyY2hTdHIpIHJldHVybiB0cnVlO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjEuMS4zLjE5IFN0cmluZy5wcm90b3R5cGUuc3Vic3RyaW5nICggc3RhcnQsIGVuZCApXHJcbiAgLy8gMjEuMS4zLjIwIFN0cmluZy5wcm90b3R5cGUudG9Mb2NhbGVMb3dlckNhc2UgKCBbIHJlc2VydmVkMSBbICwgcmVzZXJ2ZWQyIF0gXSApXHJcbiAgLy8gMjEuMS4zLjIxIFN0cmluZy5wcm90b3R5cGUudG9Mb2NhbGVVcHBlckNhc2UgKFsgcmVzZXJ2ZWQxIFsgLCByZXNlcnZlZDIgXSBdIClcclxuICAvLyAyMS4xLjMuMjIgU3RyaW5nLnByb3RvdHlwZS50b0xvd2VyQ2FzZSAoIClcclxuICAvLyAyMS4xLjMuMjMgU3RyaW5nLnByb3RvdHlwZS50b1N0cmluZyAoIClcclxuICAvLyAyMS4xLjMuMjQgU3RyaW5nLnByb3RvdHlwZS50b1VwcGVyQ2FzZSAoIClcclxuICAvLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltICggKVxyXG4gIC8vIDIxLjEuMy4yNiBTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YgKCApXHJcblxyXG4gIC8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlIFsgQEBpdGVyYXRvciBdKCApXHJcbiAgZGVmaW5lKFxyXG4gICAgU3RyaW5nLnByb3RvdHlwZSwgJCRpdGVyYXRvcixcclxuICAgIGZ1bmN0aW9uIGVudHJpZXMoKSB7XHJcbiAgICAgIHJldHVybiBDcmVhdGVTdHJpbmdJdGVyYXRvcih0aGlzLCAndmFsdWUnKTtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMS4xLjQgUHJvcGVydGllcyBvZiBTdHJpbmcgSW5zdGFuY2VzXHJcbiAgLy8gMjEuMS40LjEgbGVuZ3RoXHJcblxyXG4gIC8vIDIxLjEuNSBTdHJpbmcgSXRlcmF0b3IgT2JqZWN0c1xyXG4gIC8qKiBAY29uc3RydWN0b3IgKi9cclxuICBmdW5jdGlvbiBTdHJpbmdJdGVyYXRvcigpIHt9XHJcblxyXG4gIC8vIDIxLjEuNS4xIENyZWF0ZVN0cmluZ0l0ZXJhdG9yIEFic3RyYWN0IE9wZXJhdGlvblxyXG4gIGZ1bmN0aW9uIENyZWF0ZVN0cmluZ0l0ZXJhdG9yKHN0cmluZywga2luZCkge1xyXG4gICAgdmFyIHMgPSBTdHJpbmcoc3RyaW5nKTtcclxuICAgIHZhciBpdGVyYXRvciA9IG5ldyBTdHJpbmdJdGVyYXRvcjtcclxuICAgIHNldF9pbnRlcm5hbChpdGVyYXRvciwgJ1tbSXRlcmF0ZWRTdHJpbmddXScsIHMpO1xyXG4gICAgc2V0X2ludGVybmFsKGl0ZXJhdG9yLCAnW1tTdHJpbmdJdGVyYXRvck5leHRJbmRleF1dJywgMCk7XHJcbiAgICBzZXRfaW50ZXJuYWwoaXRlcmF0b3IsICdbW1N0cmluZ0l0ZXJhdGlvbktpbmRdXScsIGtpbmQpO1xyXG4gICAgcmV0dXJuIGl0ZXJhdG9yO1xyXG4gIH1cclxuXHJcbiAgLy8gMjEuMS41LjIgVGhlICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUgT2JqZWN0XHJcbiAgdmFyICRTdHJpbmdJdGVyYXRvclByb3RvdHlwZSQgPSBPYmplY3QuY3JlYXRlKCRJdGVyYXRvclByb3RvdHlwZSQpO1xyXG4gIFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSA9ICRTdHJpbmdJdGVyYXRvclByb3RvdHlwZSQ7XHJcblxyXG4gIC8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0ICggKVxyXG4gIGRlZmluZShcclxuICAgICRTdHJpbmdJdGVyYXRvclByb3RvdHlwZSQsICduZXh0JyxcclxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgICAgIHZhciBvID0gVG9PYmplY3QodGhpcyk7XHJcbiAgICAgIHZhciBzID0gU3RyaW5nKG9bJ1tbSXRlcmF0ZWRTdHJpbmddXSddKSxcclxuICAgICAgICAgIGluZGV4ID0gb1snW1tTdHJpbmdJdGVyYXRvck5leHRJbmRleF1dJ10sXHJcbiAgICAgICAgICBsZW4gPSBzLmxlbmd0aDtcclxuICAgICAgaWYgKGluZGV4ID49IGxlbikge1xyXG4gICAgICAgIHNldF9pbnRlcm5hbChvLCAnW1tTdHJpbmdJdGVyYXRvck5leHRJbmRleF1dJywgSW5maW5pdHkpO1xyXG4gICAgICAgIHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGNwID0gcy5jb2RlUG9pbnRBdChpbmRleCk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChvLCAnW1tTdHJpbmdJdGVyYXRvck5leHRJbmRleF1dJywgaW5kZXggKyAoY3AgPiAweEZGRkYgPyAyIDogMSkpO1xyXG4gICAgICByZXR1cm4gQ3JlYXRlSXRlclJlc3VsdE9iamVjdChTdHJpbmcuZnJvbUNvZGVQb2ludChjcCksIGZhbHNlKTtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMS4xLjUuMi4yICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUgWyBAQHRvU3RyaW5nVGFnIF1cclxuICBkZWZpbmUoJFN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJCwgJCR0b1N0cmluZ1RhZywgJ1N0cmluZyBJdGVyYXRvcicpO1xyXG5cclxuICAvLyAyMS4xLjUuMyBQcm9wZXJ0aWVzIG9mIFN0cmluZyBJdGVyYXRvciBJbnN0YW5jZXNcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMjEuMiBSZWdFeHAgKFJlZ3VsYXIgRXhwcmVzc2lvbikgT2JqZWN0c1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyAyMS4yLjEgUGF0dGVybnNcclxuICAvLyAyMS4yLjIgUGF0dGVybiBTZW1hbnRpY3NcclxuICAvLyAyMS4yLjIuMSBOb3RhdGlvblxyXG4gIC8vIDIxLjIuMi4yIFBhdHRlcm5cclxuICAvLyAyMS4yLjIuMyBEaXNqdW5jdGlvblxyXG4gIC8vIDIxLjIuMi40IEFsdGVybmF0aXZlXHJcbiAgLy8gMjEuMi4yLjUgVGVybVxyXG4gIC8vIDIxLjIuMi42IEFzc2VydGlvblxyXG4gIC8vIDIxLjIuMi43IFF1YW50aWZpZXJcclxuICAvLyAyMS4yLjIuOCBBdG9tXHJcbiAgLy8gMjEuMi4yLjkgQXRvbUVzY2FwZVxyXG4gIC8vIDIxLjIuMi4xMCBDaGFyYWN0ZXJFc2NhcGVcclxuICAvLyAyMS4yLjIuMTEgRGVjaW1hbEVzY2FwZVxyXG4gIC8vIDIxLjIuMi4xMiBDaGFyYWN0ZXJDbGFzc0VzY2FwZVxyXG4gIC8vIDIxLjIuMi4xMyBDaGFyYWN0ZXJDbGFzc1xyXG4gIC8vIDIxLjIuMi4xNCBDbGFzc1Jhbmdlc1xyXG4gIC8vIDIxLjIuMi4xNSBOb25lbXB0eUNsYXNzUmFuZ2VzXHJcbiAgLy8gMjEuMi4yLjE2IE5vbmVtcHR5Q2xhc3NSYW5nZXNOb0Rhc2hcclxuICAvLyAyMS4yLjIuMTcgQ2xhc3NBdG9tXHJcbiAgLy8gMjEuMi4yLjE4IENsYXNzQXRvbU5vRGFzaFxyXG4gIC8vIDIxLjIuMi4xOSBDbGFzc0VzY2FwZVxyXG4gIC8vIDIxLjIuMyBUaGUgUmVnRXhwIENvbnN0cnVjdG9yXHJcbiAgLy8gMjEuMi4zLjEgUmVnRXhwICggcGF0dGVybiwgZmxhZ3MgKVxyXG4gIC8vIDIxLjIuMy4yIG5ldyBSZWdFeHAoIC4uLmFyZ3VtZW50c0xpc3QgKVxyXG4gIC8vIDIxLjIuMy4zIEFic3RyYWN0IE9wZXJhdGlvbnMgZm9yIHRoZSBSZWdFeHAgQ29uc3RydWN0b3JcclxuICAvLyAyMS4yLjQgUHJvcGVydGllcyBvZiB0aGUgUmVnRXhwIENvbnN0cnVjdG9yXHJcbiAgLy8gMjEuMi40LjEgUmVnRXhwLnByb3RvdHlwZVxyXG4gIC8vIDIxLjIuNSBQcm9wZXJ0aWVzIG9mIHRoZSBSZWdFeHAgUHJvdG90eXBlIE9iamVjdFxyXG4gIC8vIDIxLjIuNS4xIFJlZ0V4cC5wcm90b3R5cGUuY29uc3RydWN0b3JcclxuICAvLyAyMS4yLjUuMiBSZWdFeHAucHJvdG90eXBlLmV4ZWMgKCBzdHJpbmcgKVxyXG5cclxuICAvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xyXG4gIGlmICghKCdmbGFncycgaW4gUmVnRXhwLnByb3RvdHlwZSkpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcclxuICAgICAgUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgcyA9IFN0cmluZyh0aGlzKTtcclxuICAgICAgICAgIHJldHVybiBzLnN1YnN0cmluZyhzLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gMjEuMi41LjQgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZ2xvYmFsXHJcbiAgLy8gMjEuMi41LjUgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuaWdub3JlQ2FzZVxyXG5cclxuICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlIFsgQEBtYXRjaCBdICggc3RyaW5nIClcclxuICBkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgJCRtYXRjaCwgZnVuY3Rpb24oc3RyaW5nKSB7XHJcbiAgICB2YXIgbyA9IHN0cmljdCh0aGlzKTtcclxuICAgIHJldHVybiBvcmlnX21hdGNoLmNhbGwoc3RyaW5nLCBvKTtcclxuICB9KTtcclxuXHJcbiAgLy8gMjEuMi41LjcgZ2V0IFJlZ0V4cC5wcm90b3R5cGUubXVsdGlsaW5lXHJcblxyXG4gIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGUgWyBAQHJlcGxhY2UgXSAoIHN0cmluZywgcmVwbGFjZVZhbHVlIClcclxuICBkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgJCRyZXBsYWNlLCBmdW5jdGlvbihzdHJpbmcsIHJlcGxhY2VWYWx1ZSkge1xyXG4gICAgdmFyIG8gPSBzdHJpY3QodGhpcyk7XHJcbiAgICByZXR1cm4gb3JpZ19yZXBsYWNlLmNhbGwoc3RyaW5nLCBvLCByZXBsYWNlVmFsdWUpO1xyXG4gIH0pO1xyXG5cclxuICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlIFsgQEBzZWFyY2ggXSAoIHN0cmluZyApXHJcbiAgZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsICQkc2VhcmNoLCBmdW5jdGlvbihzdHJpbmcpIHtcclxuICAgIHZhciBvID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgcmV0dXJuIG9yaWdfc2VhcmNoLmNhbGwoc3RyaW5nLCBvKTtcclxuICB9KTtcclxuXHJcbiAgLy8gMjEuMi41LjEwIGdldCBSZWdFeHAucHJvdG90eXBlLnNvdXJjZVxyXG5cclxuICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZSBbIEBAc3BsaXQgXSAoIHN0cmluZywgbGltaXQgKVxyXG4gIGRlZmluZShSZWdFeHAucHJvdG90eXBlLCAkJHNwbGl0LCBmdW5jdGlvbihzdHJpbmcsIGxpbWl0KSB7XHJcbiAgICB2YXIgbyA9IHN0cmljdCh0aGlzKTtcclxuICAgIHJldHVybiBvcmlnX3NwbGl0LmNhbGwoc3RyaW5nLCBvLCBsaW1pdCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIDIxLjIuNS4xMiBnZXQgUmVnRXhwLnByb3RvdHlwZS5zdGlja3lcclxuICAvLyAyMS4yLjUuMTMgUmVnRXhwLnByb3RvdHlwZS50ZXN0KCBTIClcclxuICAvLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZyAoIClcclxuICAvLyAyMS4yLjUuMTUgZ2V0IFJlZ0V4cC5wcm90b3R5cGUudW5pY29kZVxyXG5cclxuICAvLyAyMS4yLjYgUHJvcGVydGllcyBvZiBSZWdFeHAgSW5zdGFuY2VzXHJcbiAgLy8gMjEuMi42LjEgbGFzdEluZGV4XHJcblxyXG4gIC8vIChObyBwb2x5ZmlsbGFibGUgY2hhbmdlcyBmcm9tIEVTNSlcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMjIgSW5kZXhlZCBDb2xsZWN0aW9uc1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyMi4xIEFycmF5IE9iamVjdHNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gMjIuMS4xIFRoZSBBcnJheSBDb25zdHJ1Y3RvclxyXG4gIC8vIDIyLjEuMS4xIEFycmF5ICggKVxyXG4gIC8vIDIyLjEuMS4yIEFycmF5IChsZW4pXHJcbiAgLy8gMjIuMS4xLjMgQXJyYXkgKC4uLml0ZW1zIClcclxuXHJcbiAgLy8gMjIuMS4yIFByb3BlcnRpZXMgb2YgdGhlIEFycmF5IENvbnN0cnVjdG9yXHJcblxyXG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20gKCBpdGVtcyBbICwgbWFwZm4gWyAsIHRoaXNBcmcgXSBdIClcclxuICBkZWZpbmUoXHJcbiAgICBBcnJheSwgJ2Zyb20nLFxyXG4gICAgZnVuY3Rpb24gZnJvbShpdGVtcykge1xyXG4gICAgICB2YXIgbWFwZm4gPSBhcmd1bWVudHNbMV07XHJcbiAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzJdO1xyXG5cclxuICAgICAgdmFyIGMgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgIGlmIChtYXBmbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFyIG1hcHBpbmcgPSBmYWxzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIUlzQ2FsbGFibGUobWFwZm4pKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB2YXIgdCA9IHRoaXNBcmc7XHJcbiAgICAgICAgbWFwcGluZyA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIHVzaW5nSXRlcmF0b3IgPSBHZXRNZXRob2QoaXRlbXMsICQkaXRlcmF0b3IpO1xyXG4gICAgICBpZiAodXNpbmdJdGVyYXRvciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgIGlmIChJc0NvbnN0cnVjdG9yKGMpKSB7XHJcbiAgICAgICAgICB2YXIgYSA9IG5ldyBjKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGEgPSBuZXcgQXJyYXkoMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpdGVyYXRvciA9IEdldEl0ZXJhdG9yKGl0ZW1zLCB1c2luZ0l0ZXJhdG9yKTtcclxuICAgICAgICB2YXIgayA9IDA7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgIHZhciBuZXh0ID0gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKTtcclxuICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBhLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XHJcbiAgICAgICAgICBpZiAobWFwcGluZylcclxuICAgICAgICAgICAgdmFyIG1hcHBlZFZhbHVlID0gbWFwZm4uY2FsbCh0LCBuZXh0VmFsdWUpO1xyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBtYXBwZWRWYWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgICAgICAgIGFba10gPSBtYXBwZWRWYWx1ZTtcclxuICAgICAgICAgIGsgKz0gMTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGFycmF5TGlrZSA9IFRvT2JqZWN0KGl0ZW1zKTtcclxuICAgICAgdmFyIGxlblZhbHVlID0gYXJyYXlMaWtlLmxlbmd0aDtcclxuICAgICAgdmFyIGxlbiA9IFRvTGVuZ3RoKGxlblZhbHVlKTtcclxuICAgICAgaWYgKElzQ29uc3RydWN0b3IoYykpIHtcclxuICAgICAgICBhID0gbmV3IGMobGVuKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhID0gbmV3IEFycmF5KGxlbik7XHJcbiAgICAgIH1cclxuICAgICAgayA9IDA7XHJcbiAgICAgIHdoaWxlIChrIDwgbGVuKSB7XHJcbiAgICAgICAgdmFyIGtWYWx1ZSA9IGFycmF5TGlrZVtrXTtcclxuICAgICAgICBpZiAobWFwcGluZylcclxuICAgICAgICAgIG1hcHBlZFZhbHVlID0gbWFwZm4uY2FsbCh0LCBrVmFsdWUsIGspO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIG1hcHBlZFZhbHVlID0ga1ZhbHVlO1xyXG4gICAgICAgIGFba10gPSBtYXBwZWRWYWx1ZTtcclxuICAgICAgICBrICs9IDE7XHJcbiAgICAgIH1cclxuICAgICAgYS5sZW5ndGggPSBsZW47XHJcbiAgICAgIHJldHVybiBhO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIDIyLjEuMi4yIEFycmF5LmlzQXJyYXkgKCBhcmcgKVxyXG5cclxuICAvLyAyMi4xLjIuMyBBcnJheS5vZiAoIC4uLml0ZW1zIClcclxuICBkZWZpbmUoXHJcbiAgICBBcnJheSwgJ29mJyxcclxuICAgIGZ1bmN0aW9uIG9mKCkge1xyXG4gICAgICB2YXIgaXRlbXMgPSBhcmd1bWVudHM7XHJcblxyXG4gICAgICB2YXIgbGVuVmFsdWUgPSBpdGVtcy5sZW5ndGg7XHJcbiAgICAgIHZhciBsZW4gPSBUb1VpbnQzMihsZW5WYWx1ZSk7XHJcbiAgICAgIHZhciBjID0gc3RyaWN0KHRoaXMpLCBhO1xyXG4gICAgICBpZiAoSXNDb25zdHJ1Y3RvcihjKSkge1xyXG4gICAgICAgIGEgPSBuZXcgYyhsZW4pO1xyXG4gICAgICAgIGEgPSBUb09iamVjdChhKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhID0gbmV3IEFycmF5KGxlbik7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGsgPSAwO1xyXG4gICAgICB3aGlsZSAoayA8IGxlbikge1xyXG4gICAgICAgIGFba10gPSBpdGVtc1trXTtcclxuICAgICAgICBrICs9IDE7XHJcbiAgICAgIH1cclxuICAgICAgYS5sZW5ndGggPSBsZW47XHJcbiAgICAgIHJldHVybiBhO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIDIyLjEuMi40IEFycmF5LnByb3RvdHlwZVxyXG4gIC8vIDIyLjEuMi41IGdldCBBcnJheSBbIEBAc3BlY2llcyBdXHJcbiAgLy8gMjIuMS4zIFByb3BlcnRpZXMgb2YgdGhlIEFycmF5IFByb3RvdHlwZSBPYmplY3RcclxuICAvLyAyMi4xLjMuMSBBcnJheS5wcm90b3R5cGUuY29uY2F0ICggLi4uYXJndW1lbnRzIClcclxuICAvLyAyMi4xLjMuMS4xIFJ1bnRpbWUgU2VtYW50aWNzOiBJc0NvbmNhdFNwcmVhZGFibGUgKCBPIClcclxuICAvLyAyMi4xLjMuMiBBcnJheS5wcm90b3R5cGUuY29uc3RydWN0b3JcclxuICAvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiAodGFyZ2V0LCBzdGFydCBbICwgZW5kIF0gKVxyXG4gIGRlZmluZShcclxuICAgIEFycmF5LnByb3RvdHlwZSwgJ2NvcHlXaXRoaW4nLFxyXG4gICAgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LyosIGVuZCovKSB7XHJcbiAgICAgIHZhciBlbmQgPSBhcmd1bWVudHNbMl07XHJcblxyXG4gICAgICB2YXIgbyA9IFRvT2JqZWN0KHRoaXMpO1xyXG4gICAgICB2YXIgbGVuVmFsID0gby5sZW5ndGg7XHJcbiAgICAgIHZhciBsZW4gPSBUb0xlbmd0aChsZW5WYWwpO1xyXG4gICAgICBsZW4gPSBtYXgobGVuLCAwKTtcclxuICAgICAgdmFyIHJlbGF0aXZlVGFyZ2V0ID0gVG9JbnRlZ2VyKHRhcmdldCk7XHJcbiAgICAgIHZhciB0bztcclxuICAgICAgaWYgKHJlbGF0aXZlVGFyZ2V0IDwgMClcclxuICAgICAgICB0byA9IG1heChsZW4gKyByZWxhdGl2ZVRhcmdldCwgMCk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0byA9IG1pbihyZWxhdGl2ZVRhcmdldCwgbGVuKTtcclxuICAgICAgdmFyIHJlbGF0aXZlU3RhcnQgPSBUb0ludGVnZXIoc3RhcnQpO1xyXG4gICAgICB2YXIgZnJvbTtcclxuICAgICAgaWYgKHJlbGF0aXZlU3RhcnQgPCAwKVxyXG4gICAgICAgIGZyb20gPSBtYXgobGVuICsgcmVsYXRpdmVTdGFydCwgMCk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBmcm9tID0gbWluKHJlbGF0aXZlU3RhcnQsIGxlbik7XHJcbiAgICAgIHZhciByZWxhdGl2ZUVuZDtcclxuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJlbGF0aXZlRW5kID0gbGVuO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgcmVsYXRpdmVFbmQgPSBUb0ludGVnZXIoZW5kKTtcclxuICAgICAgdmFyIGZpbmFsO1xyXG4gICAgICBpZiAocmVsYXRpdmVFbmQgPCAwKVxyXG4gICAgICAgIGZpbmFsID0gbWF4KGxlbiArIHJlbGF0aXZlRW5kLCAwKTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGZpbmFsID0gbWluKHJlbGF0aXZlRW5kLCBsZW4pO1xyXG4gICAgICB2YXIgY291bnQgPSBtaW4oZmluYWwgLSBmcm9tLCBsZW4gLSB0byk7XHJcbiAgICAgIHZhciBkaXJlY3Rpb247XHJcbiAgICAgIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcclxuICAgICAgICBkaXJlY3Rpb24gPSAtMTtcclxuICAgICAgICBmcm9tID0gZnJvbSArIGNvdW50IC0gMTtcclxuICAgICAgICB0byA9IHRvICsgY291bnQgLSAxO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRpcmVjdGlvbiA9IDE7XHJcbiAgICAgIH1cclxuICAgICAgd2hpbGUgKGNvdW50ID4gMCkge1xyXG4gICAgICAgIHZhciBmcm9tS2V5ID0gU3RyaW5nKGZyb20pO1xyXG4gICAgICAgIHZhciB0b0tleSA9IFN0cmluZyh0byk7XHJcbiAgICAgICAgdmFyIGZyb21QcmVzZW50ID0gSGFzUHJvcGVydHkobywgZnJvbUtleSk7XHJcbiAgICAgICAgaWYgKGZyb21QcmVzZW50KSB7XHJcbiAgICAgICAgICB2YXIgZnJvbVZhbCA9IG9bZnJvbUtleV07XHJcbiAgICAgICAgICBvW3RvS2V5XSA9IGZyb21WYWw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGRlbGV0ZSBvW3RvS2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnJvbSA9IGZyb20gKyBkaXJlY3Rpb247XHJcbiAgICAgICAgdG8gPSB0byArIGRpcmVjdGlvbjtcclxuICAgICAgICBjb3VudCA9IGNvdW50IC0gMTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbztcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcyAoIClcclxuICB2YXIgbmF0aXZlQXJyYXlJdGVyYXRvck1ldGhvZHMgPVxyXG4gICAgICAgICgnZW50cmllcycgaW4gQXJyYXkucHJvdG90eXBlICYmICduZXh0JyBpbiBbXS5lbnRyaWVzKCkpO1xyXG5cclxuICBkZWZpbmUoXHJcbiAgICBBcnJheS5wcm90b3R5cGUsICdlbnRyaWVzJyxcclxuICAgIGZ1bmN0aW9uIGVudHJpZXMoKSB7XHJcbiAgICAgIHJldHVybiBDcmVhdGVBcnJheUl0ZXJhdG9yKHRoaXMsICdrZXkrdmFsdWUnKTtcclxuICAgIH0sICFuYXRpdmVBcnJheUl0ZXJhdG9yTWV0aG9kcyk7XHJcblxyXG4gIC8vIDIyLjEuMy41IEFycmF5LnByb3RvdHlwZS5ldmVyeSAoIGNhbGxiYWNrZm4gWyAsIHRoaXNBcmddIClcclxuXHJcbiAgLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwgKHZhbHVlIFsgLCBzdGFydCBbICwgZW5kIF0gXSApXHJcbiAgZGVmaW5lKFxyXG4gICAgQXJyYXkucHJvdG90eXBlLCAnZmlsbCcsXHJcbiAgICBmdW5jdGlvbiBmaWxsKHZhbHVlLyosIHN0YXJ0LCBlbmQqLykge1xyXG4gICAgICB2YXIgc3RhcnQgPSBhcmd1bWVudHNbMV0sXHJcbiAgICAgICAgICBlbmQgPSBhcmd1bWVudHNbMl07XHJcblxyXG4gICAgICB2YXIgbyA9IFRvT2JqZWN0KHRoaXMpO1xyXG4gICAgICB2YXIgbGVuVmFsID0gby5sZW5ndGg7XHJcbiAgICAgIHZhciBsZW4gPSBUb0xlbmd0aChsZW5WYWwpO1xyXG4gICAgICBsZW4gPSBtYXgobGVuLCAwKTtcclxuICAgICAgdmFyIHJlbGF0aXZlU3RhcnQgPSBUb0ludGVnZXIoc3RhcnQpO1xyXG4gICAgICB2YXIgaztcclxuICAgICAgaWYgKHJlbGF0aXZlU3RhcnQgPCAwKVxyXG4gICAgICAgIGsgPSBtYXgoKGxlbiArIHJlbGF0aXZlU3RhcnQpLCAwKTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGsgPSBtaW4ocmVsYXRpdmVTdGFydCwgbGVuKTtcclxuICAgICAgdmFyIHJlbGF0aXZlRW5kO1xyXG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmVsYXRpdmVFbmQgPSBsZW47XHJcbiAgICAgIGVsc2VcclxuICAgICAgICByZWxhdGl2ZUVuZCA9IFRvSW50ZWdlcihlbmQpO1xyXG4gICAgICB2YXIgZmluYWw7XHJcbiAgICAgIGlmIChyZWxhdGl2ZUVuZCA8IDApXHJcbiAgICAgICAgZmluYWwgPSBtYXgoKGxlbiArIHJlbGF0aXZlRW5kKSwgMCk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBmaW5hbCA9IG1pbihyZWxhdGl2ZUVuZCwgbGVuKTtcclxuICAgICAgd2hpbGUgKGsgPCBmaW5hbCkge1xyXG4gICAgICAgIHZhciBwayA9IFN0cmluZyhrKTtcclxuICAgICAgICBvW3BrXSA9IHZhbHVlO1xyXG4gICAgICAgIGsgKz0gMTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbztcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMi4xLjMuNyBBcnJheS5wcm90b3R5cGUuZmlsdGVyICggY2FsbGJhY2tmbiBbICwgdGhpc0FyZyBdIClcclxuXHJcbiAgLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQgKCBwcmVkaWNhdGUgWyAsIHRoaXNBcmcgXSApXHJcbiAgZGVmaW5lKFxyXG4gICAgQXJyYXkucHJvdG90eXBlLCAnZmluZCcsXHJcbiAgICBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSkge1xyXG4gICAgICB2YXIgbyA9IFRvT2JqZWN0KHRoaXMpO1xyXG4gICAgICB2YXIgbGVuVmFsdWUgPSBvLmxlbmd0aDtcclxuICAgICAgdmFyIGxlbiA9IFRvSW50ZWdlcihsZW5WYWx1ZSk7XHJcbiAgICAgIGlmICghSXNDYWxsYWJsZShwcmVkaWNhdGUpKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcclxuICAgICAgdmFyIGsgPSAwO1xyXG4gICAgICB3aGlsZSAoayA8IGxlbikge1xyXG4gICAgICAgIHZhciBwayA9IFN0cmluZyhrKTtcclxuICAgICAgICB2YXIga1ByZXNlbnQgPSBIYXNQcm9wZXJ0eShvLCBwayk7XHJcbiAgICAgICAgaWYgKGtQcmVzZW50KSB7XHJcbiAgICAgICAgICB2YXIga1ZhbHVlID0gb1twa107XHJcbiAgICAgICAgICB2YXIgdGVzdFJlc3VsdCA9IHByZWRpY2F0ZS5jYWxsKHQsIGtWYWx1ZSwgaywgbyk7XHJcbiAgICAgICAgICBpZiAoQm9vbGVhbih0ZXN0UmVzdWx0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4ga1ZhbHVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICArK2s7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH0pO1xyXG5cclxuICAvLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4ICggcHJlZGljYXRlIFsgLCB0aGlzQXJnIF0gKVxyXG4gIGRlZmluZShcclxuICAgIEFycmF5LnByb3RvdHlwZSwgJ2ZpbmRJbmRleCcsXHJcbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlKSB7XHJcbiAgICAgIHZhciBvID0gVG9PYmplY3QodGhpcyk7XHJcbiAgICAgIHZhciBsZW5WYWx1ZSA9IG8ubGVuZ3RoO1xyXG4gICAgICB2YXIgbGVuID0gVG9MZW5ndGgobGVuVmFsdWUpO1xyXG4gICAgICBpZiAoIUlzQ2FsbGFibGUocHJlZGljYXRlKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciBrID0gMDtcclxuICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcclxuICAgICAgICB2YXIgcGsgPSBTdHJpbmcoayk7XHJcbiAgICAgICAgdmFyIGtQcmVzZW50ID0gSGFzUHJvcGVydHkobywgcGspO1xyXG4gICAgICAgIGlmIChrUHJlc2VudCkge1xyXG4gICAgICAgICAgdmFyIGtWYWx1ZSA9IG9bcGtdO1xyXG4gICAgICAgICAgdmFyIHRlc3RSZXN1bHQgPSBwcmVkaWNhdGUuY2FsbCh0LCBrVmFsdWUsIGssIG8pO1xyXG4gICAgICAgICAgaWYgKEJvb2xlYW4odGVzdFJlc3VsdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICsraztcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjIuMS4zLjEwIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoICggY2FsbGJhY2tmbiBbICwgdGhpc0FyZyBdIClcclxuICAvLyAyMi4xLjMuMTEgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgKCBzZWFyY2hFbGVtZW50IFsgLCBmcm9tSW5kZXggXSApXHJcbiAgLy8gMjIuMS4zLjEyIEFycmF5LnByb3RvdHlwZS5qb2luIChzZXBhcmF0b3IpXHJcblxyXG4gIC8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cyAoIClcclxuICBkZWZpbmUoXHJcbiAgICBBcnJheS5wcm90b3R5cGUsICdrZXlzJyxcclxuICAgIGZ1bmN0aW9uIGtleXMoKSB7XHJcbiAgICAgIHJldHVybiBDcmVhdGVBcnJheUl0ZXJhdG9yKHRoaXMsICdrZXknKTtcclxuICAgIH0sICFuYXRpdmVBcnJheUl0ZXJhdG9yTWV0aG9kcyk7XHJcblxyXG4gIC8vIDIyLjEuMy4xNCBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YgKCBzZWFyY2hFbGVtZW50IFsgLCBmcm9tSW5kZXggXSApXHJcbiAgLy8gMjIuMS4zLjE1IEFycmF5LnByb3RvdHlwZS5tYXAgKCBjYWxsYmFja2ZuIFsgLCB0aGlzQXJnIF0gKVxyXG4gIC8vIDIyLjEuMy4xNiBBcnJheS5wcm90b3R5cGUucG9wICggKVxyXG4gIC8vIDIyLjEuMy4xNyBBcnJheS5wcm90b3R5cGUucHVzaCAoIC4uLml0ZW1zIClcclxuICAvLyAyMi4xLjMuMTggQXJyYXkucHJvdG90eXBlLnJlZHVjZSAoIGNhbGxiYWNrZm4gWyAsIGluaXRpYWxWYWx1ZSBdIClcclxuICAvLyAyMi4xLjMuMTkgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0ICggY2FsbGJhY2tmbiBbICwgaW5pdGlhbFZhbHVlIF0gKVxyXG4gIC8vIDIyLjEuMy4yMCBBcnJheS5wcm90b3R5cGUucmV2ZXJzZSAoIClcclxuICAvLyAyMi4xLjMuMjEgQXJyYXkucHJvdG90eXBlLnNoaWZ0ICggKVxyXG4gIC8vIDIyLjEuMy4yMiBBcnJheS5wcm90b3R5cGUuc2xpY2UgKHN0YXJ0LCBlbmQpXHJcbiAgLy8gMjIuMS4zLjIzIEFycmF5LnByb3RvdHlwZS5zb21lICggY2FsbGJhY2tmbiBbICwgdGhpc0FyZyBdIClcclxuICAvLyAyMi4xLjMuMjQgQXJyYXkucHJvdG90eXBlLnNvcnQgKGNvbXBhcmVmbilcclxuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNwbGljZSAoc3RhcnQsIGRlbGV0ZUNvdW50ICwgLi4uaXRlbXMgKVxyXG4gIC8vIDIyLjEuMy4yNiBBcnJheS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgKCBbIHJlc2VydmVkMSBbICwgcmVzZXJ2ZWQyIF0gXSApXHJcbiAgLy8gMjIuMS4zLjI3IEFycmF5LnByb3RvdHlwZS50b1N0cmluZyAoIClcclxuICAvLyAyMi4xLjMuMjggQXJyYXkucHJvdG90eXBlLnVuc2hpZnQgKCAuLi5pdGVtcyApXHJcblxyXG4gIC8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzICggKVxyXG4gIGRlZmluZShcclxuICAgIEFycmF5LnByb3RvdHlwZSwgJ3ZhbHVlcycsXHJcbiAgICBmdW5jdGlvbiB2YWx1ZXMoKSB7XHJcbiAgICAgIHJldHVybiBDcmVhdGVBcnJheUl0ZXJhdG9yKHRoaXMsICd2YWx1ZScpO1xyXG4gICAgfSwgIW5hdGl2ZUFycmF5SXRlcmF0b3JNZXRob2RzKTtcclxuXHJcbiAgLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZSBbIEBAaXRlcmF0b3IgXSAoIClcclxuICBkZWZpbmUoXHJcbiAgICBBcnJheS5wcm90b3R5cGUsICQkaXRlcmF0b3IsXHJcbiAgICBBcnJheS5wcm90b3R5cGUudmFsdWVzXHJcbiAgICApO1xyXG5cclxuICAvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlIFsgQEB1bnNjb3BhYmxlcyBdXHJcbiAgLy8gMjIuMS40IFByb3BlcnRpZXMgb2YgQXJyYXkgSW5zdGFuY2VzXHJcbiAgLy8gMjIuMS40LjEgbGVuZ3RoXHJcblxyXG4gIC8vIDIyLjEuNSBBcnJheSBJdGVyYXRvciBPYmplY3RzXHJcbiAgZnVuY3Rpb24gQXJyYXlJdGVyYXRvcigpIHt9XHJcblxyXG4gIC8vIDIyLjEuNS4xIENyZWF0ZUFycmF5SXRlcmF0b3IgQWJzdHJhY3QgT3BlcmF0aW9uXHJcbiAgZnVuY3Rpb24gQ3JlYXRlQXJyYXlJdGVyYXRvcihhcnJheSwga2luZCkge1xyXG4gICAgdmFyIG8gPSBUb09iamVjdChhcnJheSk7XHJcbiAgICB2YXIgaXRlcmF0b3IgPSBuZXcgQXJyYXlJdGVyYXRvcjtcclxuICAgIHNldF9pbnRlcm5hbChpdGVyYXRvciwgJ1tbSXRlcmF0ZWRPYmplY3RdXScsIG8pO1xyXG4gICAgc2V0X2ludGVybmFsKGl0ZXJhdG9yLCAnW1tBcnJheUl0ZXJhdG9yTmV4dEluZGV4XV0nLCAwKTtcclxuICAgIHNldF9pbnRlcm5hbChpdGVyYXRvciwgJ1tbQXJyYXlJdGVyYXRpb25LaW5kXV0nLCBraW5kKTtcclxuICAgIHJldHVybiBpdGVyYXRvcjtcclxuICB9XHJcblxyXG4gIC8vIDIyLjEuNS4yIFRoZSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUgT2JqZWN0XHJcbiAgdmFyICRBcnJheUl0ZXJhdG9yUHJvdG90eXBlJCA9IE9iamVjdC5jcmVhdGUoJEl0ZXJhdG9yUHJvdG90eXBlJCk7XHJcbiAgQXJyYXlJdGVyYXRvci5wcm90b3R5cGUgPSAkQXJyYXlJdGVyYXRvclByb3RvdHlwZSQ7XHJcblxyXG4gIC8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLiBuZXh0KCApXHJcbiAgZGVmaW5lKFxyXG4gICAgJEFycmF5SXRlcmF0b3JQcm90b3R5cGUkLCAnbmV4dCcsXHJcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgICB2YXIgbyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgaWYgKFR5cGUobykgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgdmFyIGEgPSBvWydbW0l0ZXJhdGVkT2JqZWN0XV0nXSxcclxuICAgICAgICAgIGluZGV4ID0gb1snW1tBcnJheUl0ZXJhdG9yTmV4dEluZGV4XV0nXSxcclxuICAgICAgICAgIGl0ZW1LaW5kID0gb1snW1tBcnJheUl0ZXJhdGlvbktpbmRdXSddLFxyXG4gICAgICAgICAgbGVuVmFsdWUgPSBhLmxlbmd0aCxcclxuICAgICAgICAgIGxlbiA9IFRvVWludDMyKGxlblZhbHVlKSxcclxuICAgICAgICAgIGVsZW1lbnRLZXksXHJcbiAgICAgICAgICBlbGVtZW50VmFsdWU7XHJcbiAgICAgIGlmIChpdGVtS2luZC5pbmRleE9mKCdzcGFyc2UnKSAhPT0gLTEpIHtcclxuICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuICAgICAgICB3aGlsZSAoIWZvdW5kICYmIGluZGV4IDwgbGVuKSB7XHJcbiAgICAgICAgICBlbGVtZW50S2V5ID0gU3RyaW5nKGluZGV4KTtcclxuICAgICAgICAgIGZvdW5kID0gSGFzUHJvcGVydHkoYSwgZWxlbWVudEtleSk7XHJcbiAgICAgICAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChpbmRleCA+PSBsZW4pIHtcclxuICAgICAgICBzZXRfaW50ZXJuYWwobywgJ1tbQXJyYXlJdGVyYXRvck5leHRJbmRleF1dJywgSW5maW5pdHkpO1xyXG4gICAgICAgIHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxlbWVudEtleSA9IGluZGV4O1xyXG4gICAgICBzZXRfaW50ZXJuYWwobywgJ1tbQXJyYXlJdGVyYXRvck5leHRJbmRleF1dJywgaW5kZXggKyAxKTtcclxuICAgICAgaWYgKGl0ZW1LaW5kLmluZGV4T2YoJ3ZhbHVlJykgIT09IC0xKVxyXG4gICAgICAgIGVsZW1lbnRWYWx1ZSA9IGFbZWxlbWVudEtleV07XHJcbiAgICAgIGlmIChpdGVtS2luZC5pbmRleE9mKCdrZXkrdmFsdWUnKSAhPT0gLTEpXHJcbiAgICAgICAgcmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoW2VsZW1lbnRLZXksIGVsZW1lbnRWYWx1ZV0sIGZhbHNlKTtcclxuICAgICAgaWYgKGl0ZW1LaW5kLmluZGV4T2YoJ2tleScpICE9PSAtMSlcclxuICAgICAgICByZXR1cm4gQ3JlYXRlSXRlclJlc3VsdE9iamVjdChlbGVtZW50S2V5LCBmYWxzZSk7XHJcbiAgICAgIGlmIChpdGVtS2luZCA9PT0gJ3ZhbHVlJylcclxuICAgICAgICByZXR1cm4gQ3JlYXRlSXRlclJlc3VsdE9iamVjdChlbGVtZW50VmFsdWUsIGZhbHNlKTtcclxuICAgICAgdGhyb3cgRXJyb3IoJ0ludGVybmFsIGVycm9yJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gMjIuMS41LjIuMiAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUgWyBAQHRvU3RyaW5nVGFnIF1cclxuICBkZWZpbmUoJEFycmF5SXRlcmF0b3JQcm90b3R5cGUkLCAkJHRvU3RyaW5nVGFnLCAnQXJyYXkgSXRlcmF0b3InKTtcclxuXHJcbiAgLy8gMjIuMS41LjMgUHJvcGVydGllcyBvZiBBcnJheSBJdGVyYXRvciBJbnN0YW5jZXNcclxuXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDIyLjIgVHlwZWRBcnJheSBPYmplY3RzXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIFNlZSB0eXBlZGFycmF5LmpzIGZvciBUeXBlZEFycmF5IHBvbHlmaWxsXHJcblxyXG4gIFsnSW50OEFycmF5JywgJ1VpbnQ4QXJyYXknLCAnVWludDhDbGFtcGVkQXJyYXknLFxyXG4gICAnSW50MTZBcnJheScsICdVaW50MTZBcnJheScsXHJcbiAgICdJbnQzMkFycmF5JywgJ1VpbnQzMkFycmF5JyxcclxuICAgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknXS5mb3JFYWNoKGZ1bmN0aW9uICgkVHlwZWRBcnJheU5hbWUkKSB7XHJcbiAgICAgaWYgKCEoJFR5cGVkQXJyYXlOYW1lJCBpbiBnbG9iYWwpKVxyXG4gICAgICAgcmV0dXJuO1xyXG4gICAgIHZhciAkVHlwZWRBcnJheSQgPSBnbG9iYWxbJFR5cGVkQXJyYXlOYW1lJF07XHJcblxyXG4gICAgIC8vIDIyLjIuMSBUaGUgJVR5cGVkQXJyYXklIEludHJpbnNpYyBPYmplY3RcclxuICAgICAvLyAyMi4yLjEuMSAlVHlwZWRBcnJheSUgKCBsZW5ndGggKVxyXG4gICAgIC8vIDIyLjIuMS4yICVUeXBlZEFycmF5JSAoIHR5cGVkQXJyYXkgKVxyXG4gICAgIC8vIDIyLjIuMS4zICVUeXBlZEFycmF5JSAoIG9iamVjdCApXHJcbiAgICAgLy8gMjIuMi4xLjQgJVR5cGVkQXJyYXklICggYnVmZmVyIFsgLCBieXRlT2Zmc2V0IFsgLCBsZW5ndGggXSBdIClcclxuICAgICAvLyAyMi4yLjEuNSAlVHlwZWRBcnJheSUgKCBhbGwgb3RoZXIgYXJndW1lbnQgY29tYmluYXRpb25zIClcclxuICAgICAvLyAyMi4yLjIgUHJvcGVydGllcyBvZiB0aGUgJVR5cGVkQXJyYXklIEludHJpbnNpYyBPYmplY3RcclxuXHJcbiAgICAgLy8gMjIuMi4yLjEgJVR5cGVkQXJyYXklLmZyb20gKCBzb3VyY2UgWyAsIG1hcGZuIFsgLCB0aGlzQXJnIF0gXSApXHJcbiAgICAgZGVmaW5lKFxyXG4gICAgICAgJFR5cGVkQXJyYXkkLCAnZnJvbScsXHJcbiAgICAgICBmdW5jdGlvbiBmcm9tKHNvdXJjZSkge1xyXG4gICAgICAgICB2YXIgbWFwZm4gPSBhcmd1bWVudHNbMV07XHJcbiAgICAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzJdO1xyXG5cclxuICAgICAgICAgdmFyIGMgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgIGlmICghSXNDb25zdHJ1Y3RvcihjKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgIGlmIChtYXBmbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgdmFyIG1hcHBpbmcgPSBmYWxzZTtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICBpZiAoSXNDYWxsYWJsZShtYXBmbikpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgICAgIHZhciB0ID0gdGhpc0FyZztcclxuICAgICAgICAgICBtYXBwaW5nID0gdHJ1ZTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICB2YXIgdXNpbmdJdGVyYXRvciA9IEdldE1ldGhvZChzb3VyY2UsICQkaXRlcmF0b3IpO1xyXG4gICAgICAgICBpZiAodXNpbmdJdGVyYXRvciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gR2V0SXRlcmF0b3Ioc291cmNlLCB1c2luZ0l0ZXJhdG9yKTtcclxuICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XHJcbiAgICAgICAgICAgdmFyIG5leHQgPSB0cnVlO1xyXG4gICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyYXRvcik7XHJcbiAgICAgICAgICAgICBpZiAobmV4dCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XHJcbiAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG5leHRWYWx1ZSk7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgIHZhciBsZW4gPSB2YWx1ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgIHZhciBuZXdPYmogPSBuZXcgYyhsZW4pO1xyXG4gICAgICAgICAgIHZhciBrID0gMDtcclxuICAgICAgICAgICB3aGlsZSAoayA8IGxlbikge1xyXG4gICAgICAgICAgICAgdmFyIGtWYWx1ZSA9IHZhbHVlcy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgaWYgKG1hcHBpbmcpIHtcclxuICAgICAgICAgICAgICAgdmFyIG1hcHBlZFZhbHVlID0gbWFwZm4uY2FsbCh0LCBrVmFsdWUpO1xyXG4gICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgbWFwcGVkVmFsdWUgPSBrVmFsdWU7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICBuZXdPYmpba10gPSBtYXBwZWRWYWx1ZTtcclxuICAgICAgICAgICAgICsraztcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICAgY29uc29sZS5hc3NlcnQodmFsdWVzLmxlbmd0aCA9PT0gMCk7XHJcbiAgICAgICAgICAgcmV0dXJuIG5ld09iajtcclxuICAgICAgICAgfVxyXG4gICAgICAgICB2YXIgYXJyYXlMaWtlID0gVG9PYmplY3Qoc291cmNlKTtcclxuICAgICAgICAgdmFyIGxlblZhbHVlID0gYXJyYXlMaWtlLmxlbmd0aDtcclxuICAgICAgICAgbGVuID0gVG9MZW5ndGgobGVuVmFsdWUpO1xyXG4gICAgICAgICBuZXdPYmogPSBuZXcgYyhsZW4pO1xyXG4gICAgICAgICBrID0gMDtcclxuICAgICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcclxuICAgICAgICAgICBrVmFsdWUgPSBhcnJheUxpa2Vba107XHJcbiAgICAgICAgICAgaWYgKG1hcHBpbmcpIHtcclxuICAgICAgICAgICAgIG1hcHBlZFZhbHVlID0gbWFwZm4uY2FsbCh0LCBrVmFsdWUsIGspO1xyXG4gICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICBtYXBwZWRWYWx1ZSA9IGtWYWx1ZTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICAgbmV3T2JqW2tdID0gbWFwcGVkVmFsdWU7XHJcbiAgICAgICAgICAgKytrO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHJldHVybiBuZXdPYmo7XHJcbiAgICAgICB9KTtcclxuXHJcbiAgICAgLy8gMjIuMi4yLjIgJVR5cGVkQXJyYXklLm9mICggLi4uaXRlbXMgKVxyXG4gICAgIGRlZmluZShcclxuICAgICAgICRUeXBlZEFycmF5JCwgJ29mJyxcclxuICAgICAgIGZ1bmN0aW9uIG9mKCkge1xyXG4gICAgICAgICB2YXIgaXRlbXMgPSBhcmd1bWVudHM7XHJcblxyXG4gICAgICAgICB2YXIgbGVuID0gaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgICB2YXIgYyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICAgdmFyIG5ld09iaiA9IG5ldyBjKGxlbik7XHJcbiAgICAgICAgIHZhciBrID0gMDtcclxuICAgICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcclxuICAgICAgICAgICBuZXdPYmpba10gPSBpdGVtc1trXTtcclxuICAgICAgICAgICArK2s7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgcmV0dXJuIG5ld09iajtcclxuICAgICAgIH0pO1xyXG5cclxuICAgICAvLyAyMi4yLjIuMyAlVHlwZWRBcnJheSUucHJvdG90eXBlXHJcbiAgICAgLy8gMjIuMi4yLjQgZ2V0ICVUeXBlZEFycmF5JSBbIEBAc3BlY2llcyBdXHJcbiAgICAgLy8gMjIuMi4zIFByb3BlcnRpZXMgb2YgdGhlICVUeXBlZEFycmF5UHJvdG90eXBlJSBPYmplY3RcclxuICAgICAvLyAyMi4yLjMuMSBnZXQgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5idWZmZXJcclxuICAgICAvLyAyMi4yLjMuMiBnZXQgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5ieXRlTGVuZ3RoXHJcbiAgICAgLy8gMjIuMi4zLjMgZ2V0ICVUeXBlZEFycmF5JS5wcm90b3R5cGUuYnl0ZU9mZnNldFxyXG4gICAgIC8vIDIyLjIuMy40ICVUeXBlZEFycmF5JS5wcm90b3R5cGUuY29uc3RydWN0b3JcclxuXHJcbiAgICAgLy8gMjIuMi4zLjUgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5jb3B5V2l0aGluICh0YXJnZXQsIHN0YXJ0IFssIGVuZCBdIClcclxuICAgICBkZWZpbmUoJFR5cGVkQXJyYXkkLnByb3RvdHlwZSwgJ2NvcHlXaXRoaW4nLCBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbik7XHJcblxyXG4gICAgIC8vIDIyLjIuMy42ICVUeXBlZEFycmF5JS5wcm90b3R5cGUuZW50cmllcyAoIClcclxuICAgICBkZWZpbmUoJFR5cGVkQXJyYXkkLnByb3RvdHlwZSwgJ2VudHJpZXMnLCBBcnJheS5wcm90b3R5cGUuZW50cmllcyk7XHJcblxyXG4gICAgIC8vIDIyLjIuMy43ICVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnkgKCBjYWxsYmFja2ZuIFsgLCB0aGlzQXJnIF0gKVxyXG4gICAgIGRlZmluZSgkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnZXZlcnknLCBBcnJheS5wcm90b3R5cGUuZXZlcnkpO1xyXG5cclxuICAgICAvLyAyMi4yLjMuOCAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbGwgKHZhbHVlIFsgLCBzdGFydCBbICwgZW5kIF0gXSApXHJcbiAgICAgZGVmaW5lKFxyXG4gICAgICAgJFR5cGVkQXJyYXkkLnByb3RvdHlwZSwgJ2ZpbGwnLFxyXG4gICAgICAgLy9BcnJheS5wcm90b3R5cGUuZmlsbCAvLyBEb2Vzbid0IHdvcmsgaW4gU2FmYXJpIDdcclxuICAgICAgIGZ1bmN0aW9uIGZpbGwodmFsdWUvKiwgc3RhcnQsIGVuZCovKSB7XHJcbiAgICAgICAgIHZhciBzdGFydCA9IGFyZ3VtZW50c1sxXSxcclxuICAgICAgICAgICAgIGVuZCA9IGFyZ3VtZW50c1syXTtcclxuXHJcbiAgICAgICAgIHZhciBvID0gVG9PYmplY3QodGhpcyk7XHJcbiAgICAgICAgIHZhciBsZW5WYWwgPSBvLmxlbmd0aDtcclxuICAgICAgICAgdmFyIGxlbiA9IFRvTGVuZ3RoKGxlblZhbCk7XHJcbiAgICAgICAgIGxlbiA9IG1heChsZW4sIDApO1xyXG4gICAgICAgICB2YXIgcmVsYXRpdmVTdGFydCA9IFRvSW50ZWdlcihzdGFydCk7XHJcbiAgICAgICAgIHZhciBrO1xyXG4gICAgICAgICBpZiAocmVsYXRpdmVTdGFydCA8IDApIGsgPSBtYXgoKGxlbiArIHJlbGF0aXZlU3RhcnQpLCAwKTtcclxuICAgICAgICAgZWxzZSBrID0gbWluKHJlbGF0aXZlU3RhcnQsIGxlbik7XHJcbiAgICAgICAgIHZhciByZWxhdGl2ZUVuZDtcclxuICAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSByZWxhdGl2ZUVuZCA9IGxlbjtcclxuICAgICAgICAgZWxzZSByZWxhdGl2ZUVuZCA9IFRvSW50ZWdlcihlbmQpO1xyXG4gICAgICAgICB2YXIgZmluYWw7XHJcbiAgICAgICAgIGlmIChyZWxhdGl2ZUVuZCA8IDApIGZpbmFsID0gbWF4KChsZW4gKyByZWxhdGl2ZUVuZCksIDApO1xyXG4gICAgICAgICBlbHNlIGZpbmFsID0gbWluKHJlbGF0aXZlRW5kLCBsZW4pO1xyXG4gICAgICAgICB3aGlsZSAoayA8IGZpbmFsKSB7XHJcbiAgICAgICAgICAgdmFyIHBrID0gU3RyaW5nKGspO1xyXG4gICAgICAgICAgIG9bcGtdID0gdmFsdWU7XHJcbiAgICAgICAgICAgayArPSAxO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgfSk7XHJcblxyXG4gICAgIC8vIDIyLjIuMy45ICVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmlsdGVyICggY2FsbGJhY2tmbiBbICwgdGhpc0FyZyBdIClcclxuICAgICBkZWZpbmUoXHJcbiAgICAgICAkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnZmlsdGVyJyxcclxuICAgICAgIGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuKSB7XHJcbiAgICAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xyXG5cclxuICAgICAgICAgdmFyIG8gPSBUb09iamVjdCh0aGlzKTtcclxuICAgICAgICAgdmFyIGxlblZhbCA9IG8ubGVuZ3RoO1xyXG4gICAgICAgICB2YXIgbGVuID0gVG9MZW5ndGgobGVuVmFsKTtcclxuICAgICAgICAgaWYgKCFJc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgdmFyIHQgPSB0aGlzQXJnO1xyXG4gICAgICAgICB2YXIgYyA9IG8uY29uc3RydWN0b3I7XHJcbiAgICAgICAgIHZhciBrZXB0ID0gW107XHJcbiAgICAgICAgIHZhciBrID0gMDtcclxuICAgICAgICAgdmFyIGNhcHR1cmVkID0gMDtcclxuICAgICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcclxuICAgICAgICAgICB2YXIga1ZhbHVlID0gb1trXTtcclxuICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBjYWxsYmFja2ZuLmNhbGwodCwga1ZhbHVlLCBrLCBvKTtcclxuICAgICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgIGtlcHQucHVzaChrVmFsdWUpO1xyXG4gICAgICAgICAgICAgKytjYXB0dXJlZDtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICAgKytrO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHZhciBhID0gbmV3IGMoY2FwdHVyZWQpO1xyXG4gICAgICAgICB2YXIgbiA9IDA7XHJcbiAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2VwdC5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgIHZhciBlID0ga2VwdFtpXTtcclxuICAgICAgICAgICBhW25dID0gZTtcclxuICAgICAgICAgICArK247XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICB9KTtcclxuXHJcbiAgICAgLy8gMjIuMi4zLjEwICVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZCAocHJlZGljYXRlIFsgLCB0aGlzQXJnIF0gKVxyXG4gICAgIGRlZmluZSgkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnZmluZCcsIEFycmF5LnByb3RvdHlwZS5maW5kKTtcclxuXHJcbiAgICAgLy8gMjIuMi4zLjExICVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZEluZGV4ICggcHJlZGljYXRlIFsgLCB0aGlzQXJnIF0gKVxyXG4gICAgIGRlZmluZSgkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnZmluZEluZGV4JywgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCk7XHJcblxyXG4gICAgIC8vIDIyLjIuMy4xMiAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZvckVhY2ggKCBjYWxsYmFja2ZuIFsgLCB0aGlzQXJnIF0gKVxyXG4gICAgIGRlZmluZSgkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnZm9yRWFjaCcsIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKTtcclxuXHJcbiAgICAgLy8gMjIuMi4zLjEzICVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5kZXhPZiAoc2VhcmNoRWxlbWVudCBbICwgZnJvbUluZGV4IF0gKVxyXG4gICAgIGRlZmluZSgkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnaW5kZXhPZicsIEFycmF5LnByb3RvdHlwZS5pbmRleE9mKTtcclxuXHJcbiAgICAgLy8gMjIuMi4zLjE0ICVUeXBlZEFycmF5JS5wcm90b3R5cGUuam9pbiAoIHNlcGFyYXRvciApXHJcbiAgICAgZGVmaW5lKCRUeXBlZEFycmF5JC5wcm90b3R5cGUsICdqb2luJywgQXJyYXkucHJvdG90eXBlLmpvaW4pO1xyXG5cclxuICAgICAvLyAyMi4yLjMuMTUgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5rZXlzICggKVxyXG4gICAgIGRlZmluZSgkVHlwZWRBcnJheSQucHJvdG90eXBlLCAna2V5cycsIEFycmF5LnByb3RvdHlwZS5rZXlzKTtcclxuXHJcbiAgICAgLy8gMjIuMi4zLjE2ICVUeXBlZEFycmF5JS5wcm90b3R5cGUubGFzdEluZGV4T2YgKCBzZWFyY2hFbGVtZW50IFsgLCBmcm9tSW5kZXggXSApXHJcbiAgICAgZGVmaW5lKCRUeXBlZEFycmF5JC5wcm90b3R5cGUsICdsYXN0SW5kZXhPZicsIEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZik7XHJcblxyXG4gICAgIC8vIDIyLjIuMy4xNyBnZXQgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5sZW5ndGhcclxuXHJcbiAgICAgLy8gMjIuMi4zLjE4ICVUeXBlZEFycmF5JS5wcm90b3R5cGUubWFwICggY2FsbGJhY2tmbiBbICwgdGhpc0FyZyBdIClcclxuICAgICBkZWZpbmUoXHJcbiAgICAgICAkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnbWFwJyxcclxuICAgICAgIGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuKSB7XHJcbiAgICAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xyXG5cclxuICAgICAgICAgdmFyIG8gPSBUb09iamVjdCh0aGlzKTtcclxuICAgICAgICAgdmFyIGxlblZhbHVlID0gby5sZW5ndGg7XHJcbiAgICAgICAgIHZhciBsZW4gPSBUb0xlbmd0aChsZW5WYWx1ZSk7XHJcbiAgICAgICAgIGlmICghSXNDYWxsYWJsZShjYWxsYmFja2ZuKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgIHZhciB0ID0gdGhpc0FyZztcclxuICAgICAgICAgdmFyIGEgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgIHZhciBjID0gby5jb25zdHJ1Y3RvcjtcclxuICAgICAgICAgaWYgKElzQ29uc3RydWN0b3IoYykpXHJcbiAgICAgICAgICAgYSA9IG5ldyBjKGxlbik7XHJcbiAgICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgYSA9IG5ldyBBcnJheShsZW4pO1xyXG4gICAgICAgICB2YXIgayA9IDA7XHJcbiAgICAgICAgIHdoaWxlIChrIDwgbGVuKSB7XHJcbiAgICAgICAgICAgdmFyIGtQcmVzZW50ID0gSGFzUHJvcGVydHkobywgayk7XHJcbiAgICAgICAgICAgaWYgKGtQcmVzZW50KSB7XHJcbiAgICAgICAgICAgICB2YXIga1ZhbHVlID0gb1trXTtcclxuICAgICAgICAgICAgIHZhciBtYXBwZWRWYWx1ZSA9IGNhbGxiYWNrZm4uY2FsbCh0LCBrVmFsdWUsIGssIG8pO1xyXG4gICAgICAgICAgICAgYVtrXSA9IG1hcHBlZFZhbHVlO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgICArK2s7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICB9KTtcclxuXHJcbiAgICAgLy8gMjIuMi4zLjE5ICVUeXBlZEFycmF5JS5wcm90b3R5cGUucmVkdWNlICggY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdIClcclxuICAgICBkZWZpbmUoJFR5cGVkQXJyYXkkLnByb3RvdHlwZSwgJ3JlZHVjZScsIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UpO1xyXG5cclxuICAgICAvLyAyMi4yLjMuMjAgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VSaWdodCAoIGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSApXHJcbiAgICAgZGVmaW5lKCRUeXBlZEFycmF5JC5wcm90b3R5cGUsICdyZWR1Y2VSaWdodCcsIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodCk7XHJcblxyXG4gICAgIC8vIDIyLjIuMy4yMSAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJldmVyc2UgKCApXHJcbiAgICAgZGVmaW5lKCRUeXBlZEFycmF5JC5wcm90b3R5cGUsICdyZXZlcnNlJywgQXJyYXkucHJvdG90eXBlLnJldmVyc2UpO1xyXG5cclxuICAgICAvLyAyMi4yLjMuMjIgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXQgKCBvdmVybG9hZGVkIFsgLCBvZmZzZXQgXSlcclxuICAgICAvLyAyMi4yLjMuMjIuMSAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNldCAoYXJyYXkgWyAsIG9mZnNldCBdIClcclxuICAgICAvLyAyMi4yLjMuMjIuMiAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNldCh0eXBlZEFycmF5IFssIG9mZnNldCBdIClcclxuXHJcbiAgICAgLy8gMjIuMi4zLjIzICVUeXBlZEFycmF5JS5wcm90b3R5cGUuc2xpY2UgKCBzdGFydCwgZW5kIClcclxuICAgICBkZWZpbmUoXHJcbiAgICAgICAkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnc2xpY2UnLFxyXG4gICAgICAgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xyXG4gICAgICAgICB2YXIgbyA9IFRvT2JqZWN0KHRoaXMpO1xyXG4gICAgICAgICB2YXIgbGVuVmFsID0gby5sZW5ndGg7XHJcbiAgICAgICAgIHZhciBsZW4gPSBUb0xlbmd0aChsZW5WYWwpO1xyXG4gICAgICAgICB2YXIgcmVsYXRpdmVTdGFydCA9IFRvSW50ZWdlcihzdGFydCk7XHJcbiAgICAgICAgIHZhciBrID0gKHJlbGF0aXZlU3RhcnQgPCAwKSA/IG1heChsZW4gKyByZWxhdGl2ZVN0YXJ0LCAwKSA6IG1pbihyZWxhdGl2ZVN0YXJ0LCBsZW4pO1xyXG4gICAgICAgICB2YXIgcmVsYXRpdmVFbmQgPSAoZW5kID09PSB1bmRlZmluZWQpID8gbGVuIDogVG9JbnRlZ2VyKGVuZCk7XHJcbiAgICAgICAgIHZhciBmaW5hbCA9IChyZWxhdGl2ZUVuZCA8IDApID8gbWF4KGxlbiArIHJlbGF0aXZlRW5kLCAwKSA6IG1pbihyZWxhdGl2ZUVuZCwgbGVuKTtcclxuICAgICAgICAgdmFyIGNvdW50ID0gZmluYWwgLSBrO1xyXG4gICAgICAgICB2YXIgYyA9IG8uY29uc3RydWN0b3I7XHJcbiAgICAgICAgIGlmIChJc0NvbnN0cnVjdG9yKGMpKSB7XHJcbiAgICAgICAgICAgdmFyIGEgPSBuZXcgYyhjb3VudCk7XHJcbiAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgdmFyIG4gPSAwO1xyXG4gICAgICAgICB3aGlsZSAoayA8IGZpbmFsKSB7XHJcbiAgICAgICAgICAgdmFyIGtWYWx1ZSA9IG9ba107XHJcbiAgICAgICAgICAgYVtuXSA9IGtWYWx1ZTtcclxuICAgICAgICAgICArK2s7XHJcbiAgICAgICAgICAgKytuO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgfSk7XHJcblxyXG4gICAgIC8vIDIyLjIuMy4yNCAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvbWUgKCBjYWxsYmFja2ZuIFsgLCB0aGlzQXJnIF0gKVxyXG4gICAgIGRlZmluZSgkVHlwZWRBcnJheSQucHJvdG90eXBlLCAnc29tZScsIEFycmF5LnByb3RvdHlwZS5zb21lKTtcclxuXHJcbiAgICAgLy8gMjIuMi4zLjI1ICVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29ydCAoIGNvbXBhcmVmbiApXHJcbiAgICAgZGVmaW5lKFxyXG4gICAgICAgJFR5cGVkQXJyYXkkLnByb3RvdHlwZSwgJ3NvcnQnLFxyXG4gICAgICAgZnVuY3Rpb24gc29ydCgpIHtcclxuICAgICAgICAgdmFyIGNvbXBhcmVmbiA9IGFyZ3VtZW50c1swXTtcclxuXHJcbiAgICAgICAgIGZ1bmN0aW9uIHNvcnRDb21wYXJlKHgsIHkpIHtcclxuICAgICAgICAgICBjb25zb2xlLmFzc2VydChUeXBlKHgpID09PSAnbnVtYmVyJyAmJiBUeXBlKHkpID09PSAnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgaWYgKHggIT09IHggJiYgeSAhPT0geSkgcmV0dXJuICswO1xyXG4gICAgICAgICAgIGlmICh4ICE9PSB4KSByZXR1cm4gMTtcclxuICAgICAgICAgICBpZiAoeSAhPT0geSkgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmVmbih4LCB5KTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICAgaWYgKHggPCB5KSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgaWYgKHggPiB5KSByZXR1cm4gMTtcclxuICAgICAgICAgICByZXR1cm4gKzA7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zb3J0LmNhbGwodGhpcywgc29ydENvbXBhcmUpO1xyXG4gICAgICAgfSk7XHJcblxyXG4gICAgIC8vIDIyLjIuMy4yNiAlVHlwZWRBcnJheSUucHJvdG90eXBlLnN1YmFycmF5KCBbIGJlZ2luIFsgLCBlbmQgXSBdIClcclxuICAgICAvLyAyMi4yLjMuMjcgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyAoWyByZXNlcnZlZDEgWyAsIHJlc2VydmVkMiBdIF0pXHJcbiAgICAgLy8gMjIuMi4zLjI4ICVUeXBlZEFycmF5JS5wcm90b3R5cGUudG9TdHJpbmcgKCApXHJcblxyXG4gICAgIC8vIDIyLjIuMy4yOSAlVHlwZWRBcnJheSUucHJvdG90eXBlLnZhbHVlcyAoIClcclxuICAgICBkZWZpbmUoJFR5cGVkQXJyYXkkLnByb3RvdHlwZSwgJ3ZhbHVlcycsIEFycmF5LnByb3RvdHlwZS52YWx1ZXMpO1xyXG5cclxuICAgICAvLyAyMi4yLjMuMzAgJVR5cGVkQXJyYXklLnByb3RvdHlwZSBbIEBAaXRlcmF0b3IgXSAoIClcclxuICAgICBkZWZpbmUoXHJcbiAgICAgICAkVHlwZWRBcnJheSQucHJvdG90eXBlLCAkJGl0ZXJhdG9yLFxyXG4gICAgICAgJFR5cGVkQXJyYXkkLnByb3RvdHlwZS52YWx1ZXNcclxuICAgICApO1xyXG5cclxuICAgICAvLyAyMi4yLjMuMzEgZ2V0ICVUeXBlZEFycmF5JS5wcm90b3R5cGUgWyBAQHRvU3RyaW5nVGFnIF1cclxuICAgICBkZWZpbmUoJFR5cGVkQXJyYXkkLnByb3RvdHlwZSwgJCR0b1N0cmluZ1RhZywgJFR5cGVkQXJyYXlOYW1lJCk7XHJcblxyXG4gICAgIC8vIDIyLjIuNCBUaGUgVHlwZWRBcnJheSBDb25zdHJ1Y3RvcnNcclxuICAgICAvLyAyMi4yLjQuMVR5cGVkQXJyYXkoIC4uLiBhcmd1bWVudHNMaXN0KVxyXG4gICAgIC8vIDIyLjIuNSBQcm9wZXJ0aWVzIG9mIHRoZSBUeXBlZEFycmF5IENvbnN0cnVjdG9yc1xyXG4gICAgIC8vIDIyLjIuNS4xIFR5cGVkQXJyYXkuQllURVNfUEVSX0VMRU1FTlRcclxuICAgICAvLyAyMi4yLjUuMiBUeXBlZEFycmF5LnByb3RvdHlwZVxyXG4gICAgIC8vIDIyLjIuNiBQcm9wZXJ0aWVzIG9mIFR5cGVkQXJyYXkgUHJvdG90eXBlIE9iamVjdHNcclxuICAgICAvLyAyMi4yLjYuMSBUeXBlZEFycmF5LnByb3RvdHlwZS5CWVRFU19QRVJfRUxFTUVOVFxyXG4gICAgIC8vIDIyLjIuNi4yIFR5cGVkQXJyYXkucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcbiAgICAgLy8gMjIuMi43IFByb3BlcnRpZXMgb2YgVHlwZWRBcnJheSBJbnN0YW5jZXNcclxuICAgfSk7XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDIzIEtleWVkIENvbGxlY3Rpb25cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMjMuMSBNYXAgT2JqZWN0c1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyAyMy4xLjEgVGhlIE1hcCBDb25zdHJ1Y3RvclxyXG5cclxuICAgIC8vIDIzLjEuMS4xIE1hcCAoIFsgaXRlcmFibGUgXSApXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovXHJcbiAgICBmdW5jdGlvbiBNYXAoLyppdGVyYWJsZSovKSB7XHJcbiAgICAgIHZhciBtYXAgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgIHZhciBpdGVyYWJsZSA9IGFyZ3VtZW50c1swXTtcclxuXHJcbiAgICAgIGlmIChUeXBlKG1hcCkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgaWYgKCdbW01hcERhdGFdXScgaW4gbWFwKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuXHJcbiAgICAgIGlmIChpdGVyYWJsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFyIGFkZGVyID0gbWFwWydzZXQnXTtcclxuICAgICAgICBpZiAoIUlzQ2FsbGFibGUoYWRkZXIpKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB2YXIgaXRlciA9IEdldEl0ZXJhdG9yKFRvT2JqZWN0KGl0ZXJhYmxlKSk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0X2ludGVybmFsKG1hcCwgJ1tbTWFwRGF0YV1dJywgeyBrZXlzOiBbXSwgdmFsdWVzOiBbXSB9KTtcclxuICAgICAgaWYgKGl0ZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG1hcDtcclxuICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICB2YXIgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyKTtcclxuICAgICAgICBpZiAobmV4dCA9PT0gZmFsc2UpXHJcbiAgICAgICAgICByZXR1cm4gbWFwO1xyXG4gICAgICAgIHZhciBuZXh0SXRlbSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XHJcbiAgICAgICAgaWYgKFR5cGUobmV4dEl0ZW0pICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdmFyIGsgPSBuZXh0SXRlbVswXTtcclxuICAgICAgICB2YXIgdiA9IG5leHRJdGVtWzFdO1xyXG4gICAgICAgIGFkZGVyLmNhbGwobWFwLCBrLCB2KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG1hcDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoISgnTWFwJyBpbiBnbG9iYWwpIHx8IE9WRVJSSURFX05BVElWRV9GT1JfVEVTVElORyB8fFxyXG4gICAgICAgIChmdW5jdGlvbigpIHsgdHJ5IHsgbmV3IGdsb2JhbC5NYXAoW10pOyByZXR1cm4gZmFsc2U7IH0gY2F0Y2ggKF8pIHsgcmV0dXJuIHRydWU7IH0gfSgpKSB8fFxyXG4gICAgICAgIChmdW5jdGlvbigpIHsgdHJ5IHsgcmV0dXJuICFuZXcgZ2xvYmFsLk1hcCgpLmVudHJpZXMoKS5uZXh0OyB9IGNhdGNoIChfKSB7IHJldHVybiB0cnVlOyB9IH0oKSkgfHxcclxuICAgICAgICAobmV3IGdsb2JhbC5NYXAoW1snYScsIDFdXSkuc2l6ZSAhPT0gMSkpXHJcbiAgICAgIGdsb2JhbC5NYXAgPSBNYXA7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIE1hcERhdGFJbmRleE9mKG1hcERhdGEsIGtleSkge1xyXG4gICAgICB2YXIgaTtcclxuICAgICAgaWYgKGtleSA9PT0ga2V5KSByZXR1cm4gbWFwRGF0YS5rZXlzLmluZGV4T2Yoa2V5KTtcclxuICAgICAgLy8gU2xvdyBjYXNlIGZvciBOYU5cclxuICAgICAgZm9yIChpID0gMDsgaSA8IG1hcERhdGEua2V5cy5sZW5ndGg7IGkgKz0gMSlcclxuICAgICAgICBpZiAoU2FtZVZhbHVlWmVybyhtYXBEYXRhLmtleXNbaV0sIGtleSkpIHJldHVybiBpO1xyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMjMuMS4xLjIgbmV3IE1hcCAoIC4uLiBhcmd1bWVudHNMaXN0IClcclxuICAgIC8vIDIzLjEuMiBQcm9wZXJ0aWVzIG9mIHRoZSBNYXAgQ29uc3RydWN0b3JcclxuICAgIC8vIDIzLjEuMi4xIE1hcC5wcm90b3R5cGVcclxuICAgIHZhciAkTWFwUHJvdG90eXBlJCA9IHt9O1xyXG4gICAgTWFwLnByb3RvdHlwZSA9ICRNYXBQcm90b3R5cGUkO1xyXG5cclxuICAgIC8vIDIzLjEuMi4yIGdldCBNYXAgWyBAQHNwZWNpZXMgXVxyXG5cclxuICAgIC8vIDIzLjEuMyBQcm9wZXJ0aWVzIG9mIHRoZSBNYXAgUHJvdG90eXBlIE9iamVjdFxyXG4gICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhciAoKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBNYXAucHJvdG90eXBlLCAnY2xlYXInLFxyXG4gICAgICBmdW5jdGlvbiBjbGVhcigpIHtcclxuICAgICAgICB2YXIgbSA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShtKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghKCdbW01hcERhdGFdXScgaW4gbSkpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChtWydbW01hcERhdGFdXSddID09PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHZhciBlbnRyaWVzID0gbVsnW1tNYXBEYXRhXV0nXTtcclxuICAgICAgICBlbnRyaWVzLmtleXMubGVuZ3RoID0gMDtcclxuICAgICAgICBlbnRyaWVzLnZhbHVlcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjEuMy4yIE1hcC5wcm90b3R5cGUuY29uc3RydWN0b3JcclxuXHJcbiAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZSAoIGtleSApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIE1hcC5wcm90b3R5cGUsICdkZWxldGUnLFxyXG4gICAgICBmdW5jdGlvbiBkZWxldGVfKGtleSkge1xyXG4gICAgICAgIHZhciBtID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgIGlmIChUeXBlKG0pICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKCEoJ1tbTWFwRGF0YV1dJyBpbiBtKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKG1bJ1tbTWFwRGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSBtWydbW01hcERhdGFdXSddO1xyXG4gICAgICAgIHZhciBpID0gTWFwRGF0YUluZGV4T2YoZW50cmllcywga2V5KTtcclxuICAgICAgICBpZiAoaSA8IDApIHJldHVybiBmYWxzZTtcclxuICAgICAgICBlbnRyaWVzLmtleXNbaV0gPSBlbXB0eTtcclxuICAgICAgICBlbnRyaWVzLnZhbHVlc1tpXSA9IGVtcHR5O1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy4xLjMuNCBNYXAucHJvdG90eXBlLmVudHJpZXMgKCApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIE1hcC5wcm90b3R5cGUsICdlbnRyaWVzJyxcclxuICAgICAgZnVuY3Rpb24gZW50cmllcygpIHtcclxuICAgICAgICB2YXIgbSA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShtKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHJldHVybiBDcmVhdGVNYXBJdGVyYXRvcihtLCAna2V5K3ZhbHVlJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaCAoIGNhbGxiYWNrZm4gWyAsIHRoaXNBcmcgXSApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIE1hcC5wcm90b3R5cGUsICdmb3JFYWNoJyxcclxuICAgICAgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGlzQXJnKi8pIHtcclxuICAgICAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcclxuXHJcbiAgICAgICAgdmFyIG0gPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUobSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoISgnW1tNYXBEYXRhXV0nIGluIG0pKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAobVsnW1tNYXBEYXRhXV0nXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB2YXIgZW50cmllcyA9IG1bJ1tbTWFwRGF0YV1dJ107XHJcblxyXG4gICAgICAgIGlmICghSXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xyXG4gICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCB0byBmb3JFYWNoIGlzIG5vdCBjYWxsYWJsZS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmtleXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgIGlmIChlbnRyaWVzLmtleXNbaV0gIT09IGVtcHR5KSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrZm4uY2FsbCh0aGlzQXJnLCBlbnRyaWVzLnZhbHVlc1tpXSwgZW50cmllcy5rZXlzW2ldLCBtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQgKCBrZXkgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBNYXAucHJvdG90eXBlLCAnZ2V0JyxcclxuICAgICAgZnVuY3Rpb24gZ2V0KGtleSkge1xyXG4gICAgICAgIHZhciBtID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgIGlmIChUeXBlKG0pICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKCEoJ1tbTWFwRGF0YV1dJyBpbiBtKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKG1bJ1tbTWFwRGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSBtWydbW01hcERhdGFdXSddO1xyXG4gICAgICAgIHZhciBpID0gTWFwRGF0YUluZGV4T2YoZW50cmllcywga2V5KTtcclxuICAgICAgICBpZiAoaSA+PSAwKSByZXR1cm4gZW50cmllcy52YWx1ZXNbaV07XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMgKCBrZXkgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBNYXAucHJvdG90eXBlLCAnaGFzJyxcclxuICAgICAgZnVuY3Rpb24gaGFzKGtleSkge1xyXG4gICAgICAgIHZhciBtID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgIGlmIChUeXBlKG0pICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKCEoJ1tbTWFwRGF0YV1dJyBpbiBtKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKG1bJ1tbTWFwRGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSBtWydbW01hcERhdGFdXSddO1xyXG4gICAgICAgIGlmIChNYXBEYXRhSW5kZXhPZihlbnRyaWVzLCBrZXkpID49IDApIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMS4zLjggTWFwLnByb3RvdHlwZS5rZXlzICggKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBNYXAucHJvdG90eXBlLCAna2V5cycsXHJcbiAgICAgIGZ1bmN0aW9uIGtleXMoKSB7XHJcbiAgICAgICAgdmFyIG0gPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUobSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICByZXR1cm4gQ3JlYXRlTWFwSXRlcmF0b3IobSwgJ2tleScpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldCAoIGtleSAsIHZhbHVlIClcclxuICAgIGRlZmluZShcclxuICAgICAgTWFwLnByb3RvdHlwZSwgJ3NldCcsXHJcbiAgICAgIGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG0gPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUobSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoISgnW1tNYXBEYXRhXV0nIGluIG0pKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAobVsnW1tNYXBEYXRhXV0nXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB2YXIgZW50cmllcyA9IG1bJ1tbTWFwRGF0YV1dJ107XHJcbiAgICAgICAgdmFyIGkgPSBNYXBEYXRhSW5kZXhPZihlbnRyaWVzLCBrZXkpO1xyXG4gICAgICAgIGlmIChpIDwgMCkgaSA9IGVudHJpZXMua2V5cy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKFNhbWVWYWx1ZShrZXksIC0wKSkga2V5ID0gMDtcclxuICAgICAgICBlbnRyaWVzLmtleXNbaV0gPSBrZXk7XHJcbiAgICAgICAgZW50cmllcy52YWx1ZXNbaV0gPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gbTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMS4zLjEwIGdldCBNYXAucHJvdG90eXBlLnNpemVcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcclxuICAgICAgTWFwLnByb3RvdHlwZSwgJ3NpemUnLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBtID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgICAgaWYgKFR5cGUobSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgIGlmICghKCdbW01hcERhdGFdXScgaW4gbSkpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgICAgaWYgKG1bJ1tbTWFwRGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICB2YXIgZW50cmllcyA9IG1bJ1tbTWFwRGF0YV1dJ107XHJcbiAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmtleXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgaWYgKGVudHJpZXMua2V5c1tpXSAhPT0gZW1wdHkpXHJcbiAgICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gY291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy4xLjMuMTEgTWFwLnByb3RvdHlwZS52YWx1ZXMgKCApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIE1hcC5wcm90b3R5cGUsICd2YWx1ZXMnLFxyXG4gICAgICBmdW5jdGlvbiB2YWx1ZXMoKSB7XHJcbiAgICAgICAgdmFyIG0gPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUobSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICByZXR1cm4gQ3JlYXRlTWFwSXRlcmF0b3IobSwgJ3ZhbHVlJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjEuMy4xMiBNYXAucHJvdG90eXBlIFsgQEBpdGVyYXRvciBdKCApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIE1hcC5wcm90b3R5cGUsICQkaXRlcmF0b3IsXHJcbiAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBtID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgIGlmIChUeXBlKG0pICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgcmV0dXJuIENyZWF0ZU1hcEl0ZXJhdG9yKG0sICdrZXkrdmFsdWUnKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMS4zLjEzIE1hcC5wcm90b3R5cGUgWyBAQHRvU3RyaW5nVGFnIF1cclxuICAgIGRlZmluZShnbG9iYWwuTWFwLnByb3RvdHlwZSwgJCR0b1N0cmluZ1RhZywgJ01hcCcpO1xyXG5cclxuICAgIC8vIDIzLjEuNCBQcm9wZXJ0aWVzIG9mIE1hcCBJbnN0YW5jZXNcclxuICAgIC8vIDIzLjEuNSBNYXAgSXRlcmF0b3IgT2JqZWN0c1xyXG5cclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi9cclxuICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKCkge31cclxuXHJcbiAgICAvLyAyMy4xLjUuMSBDcmVhdGVNYXBJdGVyYXRvciBBYnN0cmFjdCBPcGVyYXRpb25cclxuICAgIGZ1bmN0aW9uIENyZWF0ZU1hcEl0ZXJhdG9yKG1hcCwga2luZCkge1xyXG4gICAgICBpZiAoVHlwZShtYXApICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIGlmICghKCdbW01hcERhdGFdXScgaW4gbWFwKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIGlmIChtYXBbJ1tbTWFwRGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBNYXBJdGVyYXRvcjtcclxuICAgICAgc2V0X2ludGVybmFsKGl0ZXJhdG9yLCAnW1tNYXBdXScsIG1hcCk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChpdGVyYXRvciwgJ1tbTWFwTmV4dEluZGV4XV0nLCAwKTtcclxuICAgICAgc2V0X2ludGVybmFsKGl0ZXJhdG9yLCAnW1tNYXBJdGVyYXRpb25LaW5kXV0nLCBraW5kKTtcclxuICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDIzLjEuNS4yIFRoZSAlTWFwSXRlcmF0b3JQcm90b3R5cGUlIE9iamVjdFxyXG4gICAgdmFyICRNYXBJdGVyYXRvclByb3RvdHlwZSQgPSBPYmplY3QuY3JlYXRlKCRJdGVyYXRvclByb3RvdHlwZSQpO1xyXG4gICAgTWFwSXRlcmF0b3IucHJvdG90eXBlID0gJE1hcEl0ZXJhdG9yUHJvdG90eXBlJDtcclxuXHJcbiAgICAvLyAyMy4xLjUuMi4xICVNYXBJdGVyYXRvclByb3RvdHlwZSUubmV4dCAoIClcclxuICAgIGRlZmluZShcclxuICAgICAgJE1hcEl0ZXJhdG9yUHJvdG90eXBlJCwgJ25leHQnLFxyXG4gICAgICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgICAgIHZhciBvID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgIGlmIChUeXBlKG8pICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdmFyIG0gPSBvWydbW01hcF1dJ10sXHJcbiAgICAgICAgICAgIGluZGV4ID0gb1snW1tNYXBOZXh0SW5kZXhdXSddLFxyXG4gICAgICAgICAgICBpdGVtS2luZCA9IG9bJ1tbTWFwSXRlcmF0aW9uS2luZF1dJ10sXHJcbiAgICAgICAgICAgIGVudHJpZXMgPSBtWydbW01hcERhdGFdXSddO1xyXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMua2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgIHZhciBlID0ge2tleTogZW50cmllcy5rZXlzW2luZGV4XSwgdmFsdWU6IGVudHJpZXMudmFsdWVzW2luZGV4XX07XHJcbiAgICAgICAgICBpbmRleCA9IGluZGV4ICs9IDE7XHJcbiAgICAgICAgICBzZXRfaW50ZXJuYWwobywgJ1tbTWFwTmV4dEluZGV4XV0nLCBpbmRleCk7XHJcbiAgICAgICAgICBpZiAoZS5rZXkgIT09IGVtcHR5KSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtS2luZCA9PT0gJ2tleScpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gQ3JlYXRlSXRlclJlc3VsdE9iamVjdChlLmtleSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW1LaW5kID09PSAndmFsdWUnKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoZS52YWx1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KFtlLmtleSwgZS52YWx1ZV0sIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gQ3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy4xLjUuMi4yICVNYXBJdGVyYXRvclByb3RvdHlwZSUgWyBAQHRvU3RyaW5nVGFnIF1cclxuICAgIGRlZmluZSgkTWFwSXRlcmF0b3JQcm90b3R5cGUkLCAkJHRvU3RyaW5nVGFnLCAnTWFwIEl0ZXJhdG9yJyk7XHJcblxyXG4gICAgLy8gMjMuMS41LjMgUHJvcGVydGllcyBvZiBNYXAgSXRlcmF0b3IgSW5zdGFuY2VzXHJcbiAgfSgpKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMjMuMiBTZXQgT2JqZWN0c1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyAyMy4yLjEgVGhlIFNldCBDb25zdHJ1Y3RvclxyXG4gICAgLy8gMjMuMi4xLjEgU2V0ICggWyBpdGVyYWJsZSBdIClcclxuXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovXHJcbiAgICBmdW5jdGlvbiBTZXQoLyppdGVyYWJsZSovKSB7XHJcbiAgICAgIHZhciBzZXQgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgIHZhciBpdGVyYWJsZSA9IGFyZ3VtZW50c1swXTtcclxuXHJcbiAgICAgIGlmIChUeXBlKHNldCkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgaWYgKCdbW1NldERhdGFdXScgaW4gc2V0KSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuXHJcbiAgICAgIGlmIChpdGVyYWJsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFyIGFkZGVyID0gc2V0WydhZGQnXTtcclxuICAgICAgICBpZiAoIUlzQ2FsbGFibGUoYWRkZXIpKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB2YXIgaXRlciA9IEdldEl0ZXJhdG9yKFRvT2JqZWN0KGl0ZXJhYmxlKSk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0X2ludGVybmFsKHNldCwgJ1tbU2V0RGF0YV1dJywgW10pO1xyXG4gICAgICBpZiAoaXRlciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gc2V0O1xyXG4gICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHZhciBuZXh0ID0gSXRlcmF0b3JTdGVwKGl0ZXIpO1xyXG4gICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSlcclxuICAgICAgICAgIHJldHVybiBzZXQ7XHJcbiAgICAgICAgdmFyIG5leHRWYWx1ZSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XHJcbiAgICAgICAgYWRkZXIuY2FsbChzZXQsIG5leHRWYWx1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEoJ1NldCcgaW4gZ2xvYmFsKSB8fCBPVkVSUklERV9OQVRJVkVfRk9SX1RFU1RJTkcgfHxcclxuICAgICAgICAoZnVuY3Rpb24oKSB7IHRyeSB7IHJldHVybiAhbmV3IGdsb2JhbC5TZXQoKS5lbnRyaWVzKCkubmV4dDsgfSBjYXRjaCAoXykgeyByZXR1cm4gdHJ1ZTsgfSB9KCkpIHx8XHJcbiAgICAgICAgKG5ldyBnbG9iYWwuU2V0KFsxXSkuc2l6ZSAhPT0gMSkpXHJcbiAgICAgIGdsb2JhbC5TZXQgPSBTZXQ7XHJcblxyXG4gICAgZnVuY3Rpb24gU2V0RGF0YUluZGV4T2Yoc2V0RGF0YSwga2V5KSB7XHJcbiAgICAgIHZhciBpO1xyXG4gICAgICBpZiAoa2V5ID09PSBrZXkpXHJcbiAgICAgICAgcmV0dXJuIHNldERhdGEuaW5kZXhPZihrZXkpO1xyXG4gICAgICAvLyBTbG93IGNhc2UgZm9yIE5hTlxyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc2V0RGF0YS5sZW5ndGg7IGkgKz0gMSlcclxuICAgICAgICBpZiAoU2FtZVZhbHVlWmVybyhzZXREYXRhW2ldLCBrZXkpKSByZXR1cm4gaTtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDIzLjIuMS4yIG5ldyBTZXQgKCAuLi5hcmd1bWVudHNMaXN0IClcclxuICAgIC8vIDIzLjIuMiBQcm9wZXJ0aWVzIG9mIHRoZSBTZXQgQ29uc3RydWN0b3JcclxuXHJcbiAgICAvLyAyMy4yLjIuMSBTZXQucHJvdG90eXBlXHJcbiAgICB2YXIgJFNldFByb3RvdHlwZSQgPSAge307XHJcbiAgICBTZXQucHJvdG90eXBlID0gJFNldFByb3RvdHlwZSQ7XHJcblxyXG4gICAgLy8gMjMuMi4yLjIgZ2V0IFNldCBbIEBAc3BlY2llcyBdXHJcbiAgICAvLyAyMy4yLjMgUHJvcGVydGllcyBvZiB0aGUgU2V0IFByb3RvdHlwZSBPYmplY3RcclxuXHJcbiAgICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCAodmFsdWUgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBTZXQucHJvdG90eXBlLCAnYWRkJyxcclxuICAgICAgZnVuY3Rpb24gYWRkKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHMgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUocykgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoISgnW1tTZXREYXRhXV0nIGluIHMpKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoc1snW1tTZXREYXRhXV0nXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoU2FtZVZhbHVlKHZhbHVlLCAtMCkpIHZhbHVlID0gMDtcclxuICAgICAgICB2YXIgZW50cmllcyA9IHNbJ1tbU2V0RGF0YV1dJ107XHJcbiAgICAgICAgdmFyIGkgPSBTZXREYXRhSW5kZXhPZihlbnRyaWVzLCB2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGkgPCAwKSBpID0gc1snW1tTZXREYXRhXV0nXS5sZW5ndGg7XHJcbiAgICAgICAgc1snW1tTZXREYXRhXV0nXVtpXSA9IHZhbHVlO1xyXG5cclxuICAgICAgICByZXR1cm4gcztcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhciAoKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBTZXQucHJvdG90eXBlLCAnY2xlYXInLFxyXG4gICAgICBmdW5jdGlvbiBjbGVhcigpIHtcclxuICAgICAgICB2YXIgcyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShzKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghKCdbW1NldERhdGFdXScgaW4gcykpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChzWydbW1NldERhdGFdXSddID09PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHZhciBlbnRyaWVzID0gc1snW1tTZXREYXRhXV0nXTtcclxuICAgICAgICBlbnRyaWVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMi4zLjMgU2V0LnByb3RvdHlwZS5jb25zdHJ1Y3RvclxyXG4gICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUgKCB2YWx1ZSApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIFNldC5wcm90b3R5cGUsICdkZWxldGUnLFxyXG4gICAgICBmdW5jdGlvbiBkZWxldGVfKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHMgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUocykgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoISgnW1tTZXREYXRhXV0nIGluIHMpKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoc1snW1tTZXREYXRhXV0nXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB2YXIgZW50cmllcyA9IHNbJ1tbU2V0RGF0YV1dJ107XHJcbiAgICAgICAgdmFyIGkgPSBTZXREYXRhSW5kZXhPZihlbnRyaWVzLCB2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGkgPCAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZW50cmllc1tpXSA9IGVtcHR5O1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy4yLjMuNSBTZXQucHJvdG90eXBlLmVudHJpZXMgKCApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIFNldC5wcm90b3R5cGUsICdlbnRyaWVzJyxcclxuICAgICAgZnVuY3Rpb24gZW50cmllcygpIHtcclxuICAgICAgICB2YXIgcyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShzKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHJldHVybiBDcmVhdGVTZXRJdGVyYXRvcihzLCAna2V5K3ZhbHVlJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaCAoIGNhbGxiYWNrZm4gWyAsIHRoaXNBcmcgXSApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIFNldC5wcm90b3R5cGUsICdmb3JFYWNoJyxcclxuICAgICAgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xyXG4gICAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xyXG5cclxuICAgICAgICB2YXIgcyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShzKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghKCdbW1NldERhdGFdXScgaW4gcykpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChzWydbW1NldERhdGFdXSddID09PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHZhciBlbnRyaWVzID0gc1snW1tTZXREYXRhXV0nXTtcclxuXHJcbiAgICAgICAgaWYgKCFJc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XHJcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IHRvIGZvckVhY2ggaXMgbm90IGNhbGxhYmxlLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgIGlmIChlbnRyaWVzW2ldICE9PSBlbXB0eSkge1xyXG4gICAgICAgICAgICBjYWxsYmFja2ZuLmNhbGwodGhpc0FyZywgZW50cmllc1tpXSwgZW50cmllc1tpXSwgcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyAoIHZhbHVlIClcclxuICAgIGRlZmluZShcclxuICAgICAgU2V0LnByb3RvdHlwZSwgJ2hhcycsXHJcbiAgICAgIGZ1bmN0aW9uIGhhcyhrZXkpIHtcclxuICAgICAgICB2YXIgcyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShzKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghKCdbW1NldERhdGFdXScgaW4gcykpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChzWydbW1NldERhdGFdXSddID09PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHZhciBlbnRyaWVzID0gc1snW1tTZXREYXRhXV0nXTtcclxuICAgICAgICByZXR1cm4gU2V0RGF0YUluZGV4T2YoZW50cmllcywga2V5KSAhPT0gLTE7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjIuMy44IFNldC5wcm90b3R5cGUua2V5cyAoIClcclxuICAgIC8vIFNlZSBTZXQucHJvdG90eXBlLnZhbHVlc1xyXG5cclxuICAgIC8vIDIzLjIuMy45IGdldCBTZXQucHJvdG90eXBlLnNpemVcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcclxuICAgICAgU2V0LnByb3RvdHlwZSwgJ3NpemUnLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBzID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgICAgaWYgKFR5cGUocykgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgIGlmICghKCdbW1NldERhdGFdXScgaW4gcykpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgICAgaWYgKHNbJ1tbU2V0RGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICB2YXIgZW50cmllcyA9IHNbJ1tbU2V0RGF0YV1dJ107XHJcbiAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChlbnRyaWVzW2ldICE9PSBlbXB0eSlcclxuICAgICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBjb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjIuMy4xMCBTZXQucHJvdG90eXBlLnZhbHVlcyAoIClcclxuICAgIGRlZmluZShcclxuICAgICAgU2V0LnByb3RvdHlwZSwgJ3ZhbHVlcycsXHJcbiAgICAgIGZ1bmN0aW9uIHZhbHVlcygpIHtcclxuICAgICAgICB2YXIgcyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShzKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHJldHVybiBDcmVhdGVTZXRJdGVyYXRvcihzLCAndmFsdWUnKTtcclxuICAgICAgfSk7XHJcbiAgICAvLyBOT1RFOiBmdW5jdGlvbiBuYW1lIGlzIHN0aWxsICd2YWx1ZXMnOlxyXG4gICAgU2V0LnByb3RvdHlwZS5rZXlzID0gU2V0LnByb3RvdHlwZS52YWx1ZXM7XHJcblxyXG4gICAgLy8gMjMuMi4zLjExIFNldC5wcm90b3R5cGUgW0BAaXRlcmF0b3IgXSAoIClcclxuICAgIGRlZmluZShcclxuICAgICAgU2V0LnByb3RvdHlwZSwgJCRpdGVyYXRvcixcclxuICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHMgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUocykgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICByZXR1cm4gQ3JlYXRlU2V0SXRlcmF0b3Iocyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjIuMy4xMiBTZXQucHJvdG90eXBlIFsgQEB0b1N0cmluZ1RhZyBdXHJcbiAgICBkZWZpbmUoZ2xvYmFsLlNldC5wcm90b3R5cGUsICQkdG9TdHJpbmdUYWcsICdTZXQnKTtcclxuXHJcbiAgICAvLyAyMy4yLjQgUHJvcGVydGllcyBvZiBTZXQgSW5zdGFuY2VzXHJcbiAgICAvLyAyMy4yLjUgU2V0IEl0ZXJhdG9yIE9iamVjdHNcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi9cclxuICAgIGZ1bmN0aW9uIFNldEl0ZXJhdG9yKCkge31cclxuXHJcbiAgICAvLyAyMy4yLjUuMSBDcmVhdGVTZXRJdGVyYXRvciBBYnN0cmFjdCBPcGVyYXRpb25cclxuICAgIGZ1bmN0aW9uIENyZWF0ZVNldEl0ZXJhdG9yKHNldCwga2luZCkge1xyXG4gICAgICBpZiAoVHlwZShzZXQpICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIGlmICghKCdbW1NldERhdGFdXScgaW4gc2V0KSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIGlmIChzZXRbJ1tbU2V0RGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBTZXRJdGVyYXRvcjtcclxuICAgICAgc2V0X2ludGVybmFsKGl0ZXJhdG9yLCAnW1tJdGVyYXRlZFNldF1dJywgc2V0KTtcclxuICAgICAgc2V0X2ludGVybmFsKGl0ZXJhdG9yLCAnW1tTZXROZXh0SW5kZXhdXScsIDApO1xyXG4gICAgICBzZXRfaW50ZXJuYWwoaXRlcmF0b3IsICdbW1NldEl0ZXJhdGlvbktpbmRdXScsIGtpbmQpO1xyXG4gICAgICByZXR1cm4gaXRlcmF0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMjMuMi41LjIgVGhlICVTZXRJdGVyYXRvclByb3RvdHlwZSUgT2JqZWN0XHJcbiAgICB2YXIgJFNldEl0ZXJhdG9yUHJvdG90eXBlJCA9IE9iamVjdC5jcmVhdGUoJEl0ZXJhdG9yUHJvdG90eXBlJCk7XHJcbiAgICBTZXRJdGVyYXRvci5wcm90b3R5cGUgPSAkU2V0SXRlcmF0b3JQcm90b3R5cGUkO1xyXG5cclxuICAgIC8vIDIzLjIuNS4yLjEgJVNldEl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KCApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgICRTZXRJdGVyYXRvclByb3RvdHlwZSQsICduZXh0JyxcclxuICAgICAgZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgICAgICB2YXIgbyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShvKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHZhciBzID0gb1snW1tJdGVyYXRlZFNldF1dJ10sXHJcbiAgICAgICAgICAgIGluZGV4ID0gb1snW1tTZXROZXh0SW5kZXhdXSddLFxyXG4gICAgICAgICAgICBpdGVtS2luZCA9IG9bJ1tbU2V0SXRlcmF0aW9uS2luZF1dJ10sXHJcbiAgICAgICAgICAgIGVudHJpZXMgPSBzWydbW1NldERhdGFdXSddO1xyXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICB2YXIgZSA9IGVudHJpZXNbaW5kZXhdO1xyXG4gICAgICAgICAgaW5kZXggPSBpbmRleCArPSAxO1xyXG4gICAgICAgICAgc2V0X2ludGVybmFsKG8sICdbW1NldE5leHRJbmRleF1dJywgaW5kZXgpO1xyXG4gICAgICAgICAgaWYgKGUgIT09IGVtcHR5KSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtS2luZCA9PT0gJ2tleSt2YWx1ZScpXHJcbiAgICAgICAgICAgICAgcmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoW2UsIGVdLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGUsIGZhbHNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMi41LjIuMiAlU2V0SXRlcmF0b3JQcm90b3R5cGUlIFsgQEB0b1N0cmluZ1RhZyBdXHJcbiAgICBkZWZpbmUoJFNldEl0ZXJhdG9yUHJvdG90eXBlJCwgJCR0b1N0cmluZ1RhZywgJ1NldCBJdGVyYXRvcicpO1xyXG5cclxuICAgIC8vIDIzLjIuNS4zIFByb3BlcnRpZXMgb2YgU2V0IEl0ZXJhdG9yIEluc3RhbmNlc1xyXG5cclxuICB9KCkpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyAyMy4zLjEgVGhlIFdlYWtNYXAgQ29uc3RydWN0b3JcclxuICAgIC8vIDIzLjMuMS4xIFdlYWtNYXAgKCBbIGl0ZXJhYmxlIF0gKVxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqL1xyXG4gICAgZnVuY3Rpb24gV2Vha01hcCgvKml0ZXJhYmxlKi8pIHtcclxuICAgICAgdmFyIG1hcCA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgdmFyIGl0ZXJhYmxlID0gYXJndW1lbnRzWzBdO1xyXG5cclxuICAgICAgaWYgKFR5cGUobWFwKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICBpZiAoJ1tbV2Vha01hcERhdGFdXScgaW4gbWFwKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuXHJcbiAgICAgIGlmIChpdGVyYWJsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFyIGFkZGVyID0gbWFwWydzZXQnXTtcclxuICAgICAgICBpZiAoIUlzQ2FsbGFibGUoYWRkZXIpKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB2YXIgaXRlciA9IEdldEl0ZXJhdG9yKFRvT2JqZWN0KGl0ZXJhYmxlKSk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0X2ludGVybmFsKG1hcCwgJ1tbV2Vha01hcERhdGFdXScsIG5ldyBFcGhlbWVyb25UYWJsZSk7XHJcbiAgICAgIGlmIChpdGVyID09PSB1bmRlZmluZWQpIHJldHVybiBtYXA7XHJcbiAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgdmFyIG5leHQgPSBJdGVyYXRvclN0ZXAoaXRlcik7XHJcbiAgICAgICAgaWYgKG5leHQgPT09IGZhbHNlKVxyXG4gICAgICAgICAgcmV0dXJuIG1hcDtcclxuICAgICAgICB2YXIgbmV4dFZhbHVlID0gSXRlcmF0b3JWYWx1ZShuZXh0KTtcclxuICAgICAgICBpZiAoVHlwZShuZXh0VmFsdWUpICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdmFyIGsgPSBuZXh0VmFsdWVbMF07XHJcbiAgICAgICAgdmFyIHYgPSBuZXh0VmFsdWVbMV07XHJcbiAgICAgICAgYWRkZXIuY2FsbChtYXAsIGssIHYpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbWFwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghKCdXZWFrTWFwJyBpbiBnbG9iYWwpIHx8IE9WRVJSSURFX05BVElWRV9GT1JfVEVTVElORylcclxuICAgICAgZ2xvYmFsLldlYWtNYXAgPSBXZWFrTWFwO1xyXG5cclxuICAgIC8vIDIzLjMuMiBQcm9wZXJ0aWVzIG9mIHRoZSBXZWFrTWFwIENvbnN0cnVjdG9yXHJcbiAgICAvLyAyMy4zLjIuMSBXZWFrTWFwLnByb3RvdHlwZVxyXG4gICAgdmFyICRXZWFrTWFwUHJvdG90eXBlJCA9IHt9O1xyXG4gICAgV2Vha01hcC5wcm90b3R5cGUgPSAkV2Vha01hcFByb3RvdHlwZSQ7XHJcblxyXG5cclxuXHJcbiAgIC8vIDIzLjMuMi4yIFdlYWtNYXBbIEBAY3JlYXRlIF0gKCApXHJcbiAgICAvLyAyMy4zLjMgUHJvcGVydGllcyBvZiB0aGUgV2Vha01hcCBQcm90b3R5cGUgT2JqZWN0XHJcblxyXG4gICAgLy8gMjMuMy4zLjEgV2Vha01hcC5wcm90b3R5cGUuY29uc3RydWN0b3JcclxuXHJcbiAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUgKCBrZXkgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBXZWFrTWFwLnByb3RvdHlwZSwgJ2RlbGV0ZScsXHJcbiAgICAgIGZ1bmN0aW9uIGRlbGV0ZV8oa2V5KSB7XHJcbiAgICAgICAgdmFyIE0gPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUoTSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoTVsnW1tXZWFrTWFwRGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKFR5cGUoa2V5KSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgb2JqZWN0Jyk7XHJcbiAgICAgICAgcmV0dXJuIE1bJ1tbV2Vha01hcERhdGFdXSddLnJlbW92ZShrZXkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQgKCBrZXkgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBXZWFrTWFwLnByb3RvdHlwZSwgJ2dldCcsXHJcbiAgICAgIGZ1bmN0aW9uIGdldChrZXksIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgIHZhciBNID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgIGlmIChUeXBlKE0pICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKE1bJ1tbV2Vha01hcERhdGFdXSddID09PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChUeXBlKGtleSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIG9iamVjdCcpO1xyXG4gICAgICAgIHJldHVybiBNWydbW1dlYWtNYXBEYXRhXV0nXS5nZXQoa2V5LCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMgKCBrZXkgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBXZWFrTWFwLnByb3RvdHlwZSwgJ2hhcycsXHJcbiAgICAgIGZ1bmN0aW9uIGhhcyhrZXkpIHtcclxuICAgICAgICB2YXIgTSA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShNKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChNWydbW1dlYWtNYXBEYXRhXV0nXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoVHlwZShrZXkpICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBvYmplY3QnKTtcclxuICAgICAgICByZXR1cm4gTVsnW1tXZWFrTWFwRGF0YV1dJ10uaGFzKGtleSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldCAoIGtleSAsIHZhbHVlIClcclxuICAgIGRlZmluZShcclxuICAgICAgV2Vha01hcC5wcm90b3R5cGUsICdzZXQnLFxyXG4gICAgICBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBNID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgIGlmIChUeXBlKE0pICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKE1bJ1tbV2Vha01hcERhdGFdXSddID09PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChUeXBlKGtleSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIG9iamVjdCcpO1xyXG4gICAgICAgIE1bJ1tbV2Vha01hcERhdGFdXSddLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gTTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjMuMy4zLjYgV2Vha01hcC5wcm90b3R5cGUgWyBAQHRvU3RyaW5nVGFnIF1cclxuICAgIGRlZmluZShnbG9iYWwuV2Vha01hcC5wcm90b3R5cGUsICQkdG9TdHJpbmdUYWcsICdXZWFrTWFwJyk7XHJcblxyXG4gICAgLy8gMjMuMy40IFByb3BlcnRpZXMgb2YgV2Vha01hcCBJbnN0YW5jZXNcclxuXHJcbiAgICAvLyBQb2x5ZmlsbHMgZm9yIGluY29tcGxldGUgbmF0aXZlIGltcGxlbWVudGF0aW9uczpcclxuICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHdtID0gbmV3IGdsb2JhbC5XZWFrTWFwKCk7XHJcbiAgICAgIHZhciBvcmlnID0gZ2xvYmFsLldlYWtNYXAucHJvdG90eXBlLnNldDtcclxuICAgICAgZGVmaW5lKGdsb2JhbC5XZWFrTWFwLnByb3RvdHlwZSwgJ3NldCcsIGZ1bmN0aW9uIHNldCgpIHtcclxuICAgICAgICBvcmlnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH0sIHdtLnNldCh7fSwgMCkgIT09IHdtKTtcclxuICAgIH0oKSk7XHJcbiAgfSgpKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgKGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gMjMuNC4xIFRoZSBXZWFrU2V0IENvbnN0cnVjdG9yXHJcbiAgICAvLyAyMy40LjEuMSBXZWFrU2V0ICggWyBpdGVyYWJsZSBdIClcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi9cclxuICAgIGZ1bmN0aW9uIFdlYWtTZXQoLyppdGVyYWJsZSovKSB7XHJcbiAgICAgIHZhciBzZXQgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgIHZhciBpdGVyYWJsZSA9IGFyZ3VtZW50c1swXTtcclxuXHJcbiAgICAgIGlmIChUeXBlKHNldCkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgaWYgKCdbW1dlYWtTZXREYXRhXV0nIGluIHNldCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcblxyXG4gICAgICBpZiAoaXRlcmFibGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhciBhZGRlciA9IHNldFsnYWRkJ107XHJcbiAgICAgICAgaWYgKCFJc0NhbGxhYmxlKGFkZGVyKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdmFyIGl0ZXIgPSBHZXRJdGVyYXRvcihUb09iamVjdChpdGVyYWJsZSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHNldF9pbnRlcm5hbChzZXQsICdbW1dlYWtTZXREYXRhXV0nLCBuZXcgRXBoZW1lcm9uVGFibGUpO1xyXG4gICAgICBpZiAoaXRlciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gc2V0O1xyXG4gICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHZhciBuZXh0ID0gSXRlcmF0b3JTdGVwKGl0ZXIpO1xyXG4gICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSlcclxuICAgICAgICAgIHJldHVybiBzZXQ7XHJcbiAgICAgICAgdmFyIG5leHRWYWx1ZSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XHJcbiAgICAgICAgYWRkZXIuY2FsbChzZXQsIG5leHRWYWx1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEoJ1dlYWtTZXQnIGluIGdsb2JhbCkgfHwgT1ZFUlJJREVfTkFUSVZFX0ZPUl9URVNUSU5HKVxyXG4gICAgICBnbG9iYWwuV2Vha1NldCA9IFdlYWtTZXQ7XHJcblxyXG4gICAgLy8gMjMuNC4yIFByb3BlcnRpZXMgb2YgdGhlIFdlYWtTZXQgQ29uc3RydWN0b3JcclxuICAgIC8vIDIzLjQuMi4xIFdlYWtTZXQucHJvdG90eXBlXHJcbiAgICB2YXIgJFdlYWtTZXRQcm90b3R5cGUkID0ge307XHJcbiAgICBXZWFrU2V0LnByb3RvdHlwZSA9ICRXZWFrU2V0UHJvdG90eXBlJDtcclxuXHJcbiAgICAvLyAyMy40LjMgUHJvcGVydGllcyBvZiB0aGUgV2Vha1NldCBQcm90b3R5cGUgT2JqZWN0XHJcbiAgICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQgKHZhbHVlIClcclxuICAgIGRlZmluZShcclxuICAgICAgV2Vha1NldC5wcm90b3R5cGUsICdhZGQnLFxyXG4gICAgICBmdW5jdGlvbiBhZGQodmFsdWUpIHtcclxuICAgICAgICB2YXIgUyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgICBpZiAoVHlwZShTKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChTWydbW1dlYWtTZXREYXRhXV0nXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoVHlwZSh2YWx1ZSkgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIG9iamVjdCcpO1xyXG4gICAgICAgIFNbJ1tbV2Vha1NldERhdGFdXSddLnNldCh2YWx1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIFM7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjQuMy4yIFdlYWtTZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcbiAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUgKCB2YWx1ZSApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIFdlYWtTZXQucHJvdG90eXBlLCAnZGVsZXRlJyxcclxuICAgICAgZnVuY3Rpb24gZGVsZXRlXyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBTID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICAgIGlmIChUeXBlKFMpICE9PSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKFNbJ1tbV2Vha1NldERhdGFdXSddID09PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmIChUeXBlKHZhbHVlKSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgb2JqZWN0Jyk7XHJcbiAgICAgICAgcmV0dXJuIFNbJ1tbV2Vha1NldERhdGFdXSddLnJlbW92ZSh2YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyAoIHZhbHVlIClcclxuICAgIGRlZmluZShcclxuICAgICAgV2Vha1NldC5wcm90b3R5cGUsICdoYXMnLFxyXG4gICAgICBmdW5jdGlvbiBoYXMoa2V5KSB7XHJcbiAgICAgICAgdmFyIFMgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgICAgaWYgKFR5cGUoUykgIT09ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoU1snW1tXZWFrU2V0RGF0YV1dJ10gPT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKFR5cGUoa2V5KSAhPT0gJ29iamVjdCcpIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgb2JqZWN0Jyk7XHJcbiAgICAgICAgcmV0dXJuIFNbJ1tbV2Vha1NldERhdGFdXSddLmhhcyhrZXkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyMy40LjMuNSBXZWFrU2V0LnByb3RvdHlwZSBbIEBAdG9TdHJpbmdUYWcgXVxyXG4gICAgZGVmaW5lKGdsb2JhbC5XZWFrU2V0LnByb3RvdHlwZSwgJCR0b1N0cmluZ1RhZywgJ1dlYWtTZXQnKTtcclxuXHJcbiAgICAvLyAyMy40LjQgUHJvcGVydGllcyBvZiBXZWFrU2V0IEluc3RhbmNlc1xyXG5cclxuICAgIC8vIFBvbHlmaWxscyBmb3IgaW5jb21wbGV0ZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zOlxyXG4gICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgd3MgPSBuZXcgZ2xvYmFsLldlYWtTZXQoKTtcclxuICAgICAgdmFyIG9yaWcgPSBnbG9iYWwuV2Vha1NldC5wcm90b3R5cGUuYWRkO1xyXG4gICAgICBkZWZpbmUoZ2xvYmFsLldlYWtTZXQucHJvdG90eXBlLCAnYWRkJywgZnVuY3Rpb24gYWRkKCkge1xyXG4gICAgICAgIG9yaWcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSwgd3MuYWRkKHt9KSAhPT0gd3MpO1xyXG4gICAgfSgpKTtcclxuICB9KCkpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyNCBTdHJ1Y3R1cmVkIERhdGFcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMjQuMSBBcnJheUJ1ZmZlciBPYmplY3RzXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIFNlZSB0eXBlZGFycmF5LmpzIGZvciBUeXBlZEFycmF5IHBvbHlmaWxsXHJcblxyXG4gIChmdW5jdGlvbigpIHtcclxuICAgIGlmICghKCdBcnJheUJ1ZmZlcicgaW4gZ2xvYmFsKSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIC8vIDI0LjEuMSBBYnN0cmFjdCBPcGVyYXRpb25zIEZvciBBcnJheUJ1ZmZlciBPYmplY3RzXHJcbiAgICAvLyAyNC4xLjEuMSBBbGxvY2F0ZUFycmF5QnVmZmVyKCBjb25zdHJ1Y3RvciwgYnl0ZUxlbmd0aCApXHJcbiAgICAvLyAyNC4xLjEuMiBJc0RldGFjaGVkQnVmZmVyKCBhcnJheUJ1ZmZlciApXHJcbiAgICAvLyAyNC4xLjEuMyBEZXRhY2hBcnJheUJ1ZmZlciggYXJyYXlCdWZmZXIgKVxyXG4gICAgLy8gMjQuMS4xLjQgQ2xvbmVBcnJheUJ1ZmZlciggc3JjQnVmZmVyLCBzcmNCeXRlT2Zmc2V0IFssIGNsb25lQ29uc3RydWN0b3JdIClcclxuICAgIC8vIDI0LjEuMS41IEdldFZhbHVlRnJvbUJ1ZmZlciAoIGFycmF5QnVmZmVyLCBieXRlSW5kZXgsIHR5cGUsIGlzTGl0dGxlRW5kaWFuIClcclxuICAgIC8vIDI0LjEuMS42IFNldFZhbHVlSW5CdWZmZXIgKCBhcnJheUJ1ZmZlciwgYnl0ZUluZGV4LCB0eXBlLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4gKVxyXG4gICAgLy8gMjQuMS4yIFRoZSBBcnJheUJ1ZmZlciBDb25zdHJ1Y3RvclxyXG4gICAgLy8gMjQuMS4yLjEgQXJyYXlCdWZmZXIoIGxlbmd0aCApXHJcbiAgICAvLyAyNC4xLjMgUHJvcGVydGllcyBvZiB0aGUgQXJyYXlCdWZmZXIgQ29uc3RydWN0b3JcclxuXHJcbiAgICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcgKCBhcmcgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBBcnJheUJ1ZmZlciwgJ2lzVmlldycsXHJcbiAgICAgIGZ1bmN0aW9uIGlzVmlldyhhcmcpIHtcclxuICAgICAgICBpZiAoVHlwZShhcmcpICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmICgnYnVmZmVyJyBpbiBhcmcgJiYgYXJnLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDI0LjEuMy4yIEFycmF5QnVmZmVyLnByb3RvdHlwZVxyXG4gICAgLy8gMjQuMS4zLjMgZ2V0IEFycmF5QnVmZmVyIFsgQEBzcGVjaWVzIF1cclxuICAgIC8vIDI0LjEuNCBQcm9wZXJ0aWVzIG9mIHRoZSBBcnJheUJ1ZmZlciBQcm90b3R5cGUgT2JqZWN0XHJcbiAgICAvLyAyNC4xLjQuMSBnZXQgQXJyYXlCdWZmZXIucHJvdG90eXBlLmJ5dGVMZW5ndGhcclxuICAgIC8vIDI0LjEuNC4yIEFycmF5QnVmZmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvclxyXG4gICAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlICggc3RhcnQgLCBlbmQpXHJcblxyXG4gICAgLy8gMjQuMS40LjQgQXJyYXlCdWZmZXIucHJvdG90eXBlIFsgQEB0b1N0cmluZ1RhZyBdXHJcbiAgICBkZWZpbmUoQXJyYXlCdWZmZXIucHJvdG90eXBlLCAkJHRvU3RyaW5nVGFnLCAnQXJyYXlCdWZmZXInKTtcclxuXHJcbiAgICAvLyAyNC4xLjUgUHJvcGVydGllcyBvZiB0aGUgQXJyYXlCdWZmZXIgSW5zdGFuY2VzXHJcbiAgfSgpKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMjQuMiBEYXRhVmlldyBPYmplY3RzXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIFNlZSB0eXBlZGFycmF5LmpzIGZvciBUeXBlZEFycmF5IHBvbHlmaWxsXHJcblxyXG4gIChmdW5jdGlvbigpIHtcclxuICAgIGlmICghKCdEYXRhVmlldycgaW4gZ2xvYmFsKSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIC8vIDI0LjIuMSBBYnN0cmFjdCBPcGVyYXRpb25zIEZvciBEYXRhVmlldyBPYmplY3RzXHJcbiAgICAvLyAyNC4yLjEuMSBHZXRWaWV3VmFsdWUodmlldywgcmVxdWVzdEluZGV4LCBpc0xpdHRsZUVuZGlhbiwgdHlwZSlcclxuICAgIC8vIDI0LjIuMS4yIFNldFZpZXdWYWx1ZSh2aWV3LCByZXF1ZXN0SW5kZXgsIGlzTGl0dGxlRW5kaWFuLCB0eXBlLCB2YWx1ZSlcclxuICAgIC8vIDI0LjIuMiBUaGUgRGF0YVZpZXcgQ29uc3RydWN0b3JcclxuICAgIC8vIDI0LjIuMi4xIERhdGFWaWV3IChidWZmZXIgWyAsIGJ5dGVPZmZzZXQgWyAsIGJ5dGVMZW5ndGggXSBdIClcclxuICAgIC8vIDI0LjIuMyBQcm9wZXJ0aWVzIG9mIHRoZSBEYXRhVmlldyBDb25zdHJ1Y3RvclxyXG4gICAgLy8gMjQuMi4zLjEgRGF0YVZpZXcucHJvdG90eXBlXHJcbiAgICAvLyAyNC4yLjQgUHJvcGVydGllcyBvZiB0aGUgRGF0YVZpZXcgUHJvdG90eXBlIE9iamVjdFxyXG4gICAgLy8gMjQuMi40LjEgZ2V0IERhdGFWaWV3LnByb3RvdHlwZS5idWZmZXJcclxuICAgIC8vIDI0LjIuNC4yIGdldCBEYXRhVmlldy5wcm90b3R5cGUuYnl0ZUxlbmd0aFxyXG4gICAgLy8gMjQuMi40LjMgZ2V0IERhdGFWaWV3LnByb3RvdHlwZS5ieXRlT2Zmc2V0XHJcbiAgICAvLyAyNC4yLjQuNCBEYXRhVmlldy5wcm90b3R5cGUuY29uc3RydWN0b3JcclxuICAgIC8vIDI0LjIuNC41IERhdGFWaWV3LnByb3RvdHlwZS5nZXRGbG9hdDMyICggYnl0ZU9mZnNldCBbICwgbGl0dGxlRW5kaWFuIF0gKVxyXG4gICAgLy8gMjQuMi40LjYgRGF0YVZpZXcucHJvdG90eXBlLmdldEZsb2F0NjQgKCBieXRlT2Zmc2V0IFsgLCBsaXR0bGVFbmRpYW4gXSApXHJcbiAgICAvLyAyNC4yLjQuNyBEYXRhVmlldy5wcm90b3R5cGUuZ2V0SW50OCAoIGJ5dGVPZmZzZXQgKVxyXG4gICAgLy8gMjQuMi40LjggRGF0YVZpZXcucHJvdG90eXBlLmdldEludDE2ICggYnl0ZU9mZnNldCBbICwgbGl0dGxlRW5kaWFuIF0gKVxyXG4gICAgLy8gMjQuMi40LjkgRGF0YVZpZXcucHJvdG90eXBlLmdldEludDMyICggYnl0ZU9mZnNldCBbICwgbGl0dGxlRW5kaWFuIF0gKVxyXG4gICAgLy8gMjQuMi40LjEwIERhdGFWaWV3LnByb3RvdHlwZS5nZXRVaW50OCAoIGJ5dGVPZmZzZXQgKVxyXG4gICAgLy8gMjQuMi40LjExIERhdGFWaWV3LnByb3RvdHlwZS5nZXRVaW50MTYgKCBieXRlT2Zmc2V0IFsgLCBsaXR0bGVFbmRpYW4gXSApXHJcbiAgICAvLyAyNC4yLjQuMTIgRGF0YVZpZXcucHJvdG90eXBlLmdldFVpbnQzMiAoIGJ5dGVPZmZzZXQgWyAsIGxpdHRsZUVuZGlhbiBdIClcclxuICAgIC8vIDI0LjIuNC4xMyBEYXRhVmlldy5wcm90b3R5cGUuc2V0RmxvYXQzMiAoIGJ5dGVPZmZzZXQsIHZhbHVlIFsgLCBsaXR0bGVFbmRpYW4gXSApXHJcbiAgICAvLyAyNC4yLjQuMTQgRGF0YVZpZXcucHJvdG90eXBlLnNldEZsb2F0NjQgKCBieXRlT2Zmc2V0LCB2YWx1ZSBbICwgbGl0dGxlRW5kaWFuIF0gKVxyXG4gICAgLy8gMjQuMi40LjE1IERhdGFWaWV3LnByb3RvdHlwZS5zZXRJbnQ4ICggYnl0ZU9mZnNldCwgdmFsdWUgKVxyXG4gICAgLy8gMjQuMi40LjE2IERhdGFWaWV3LnByb3RvdHlwZS5zZXRJbnQxNiAoIGJ5dGVPZmZzZXQsIHZhbHVlIFsgLCBsaXR0bGVFbmRpYW4gXSApXHJcbiAgICAvLyAyNC4yLjQuMTcgRGF0YVZpZXcucHJvdG90eXBlLnNldEludDMyICggYnl0ZU9mZnNldCwgdmFsdWUgWyAsIGxpdHRsZUVuZGlhbiBdIClcclxuICAgIC8vIDI0LjIuNC4xOCBEYXRhVmlldy5wcm90b3R5cGUuc2V0VWludDggKCBieXRlT2Zmc2V0LCB2YWx1ZSApXHJcbiAgICAvLyAyNC4yLjQuMTkgRGF0YVZpZXcucHJvdG90eXBlLnNldFVpbnQxNiAoIGJ5dGVPZmZzZXQsIHZhbHVlIFsgLCBsaXR0bGVFbmRpYW4gXSApXHJcbiAgICAvLyAyNC4yLjQuMjAgRGF0YVZpZXcucHJvdG90eXBlLnNldFVpbnQzMiAoIGJ5dGVPZmZzZXQsIHZhbHVlIFsgLCBsaXR0bGVFbmRpYW4gXSApXHJcblxyXG4gICAgLy8gMjQuMi40LjIxIERhdGFWaWV3LnByb3RvdHlwZVsgQEB0b1N0cmluZ1RhZyBdXHJcbiAgICBkZWZpbmUoRGF0YVZpZXcucHJvdG90eXBlLCAkJHRvU3RyaW5nVGFnLCAnRGF0YVZpZXcnKTtcclxuXHJcbiAgICAvLyAyNC4yLjUgUHJvcGVydGllcyBvZiBEYXRhVmlldyBJbnN0YW5jZXNcclxuICB9KCkpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyNC4zIFRoZSBKU09OIE9iamVjdFxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyAyNC4zLjEgSlNPTi5wYXJzZSAoIHRleHQgWyAsIHJldml2ZXIgXSApXHJcbiAgLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5ICggdmFsdWUgWyAsIHJlcGxhY2VyIFsgLCBzcGFjZSBdIF0gKVxyXG4gIC8vIDI0LjMuMyBKU09OIFsgQEB0b1N0cmluZ1RhZyBdXHJcbiAgZGVmaW5lKEpTT04sICQkdG9TdHJpbmdUYWcsICdKU09OJyk7XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDI1LjEgSXRlcmF0aW9uXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIDI1LjEuMSBDb21tb24gSXRlcmF0aW9uIEludGVyZmFjZXNcclxuICAvLyAyNS4xLjEuMSBUaGUgSXRlcmFibGUgSW50ZXJmYWNlXHJcbiAgLy8gMjUuMS4xLjIgVGhlIEl0ZXJhdG9yIEludGVyZmFjZVxyXG4gIC8vIDI1LjEuMS4zIFRoZSBJdGVyYXRvclJlc3VsdCBJbnRlcmZhY2VcclxuXHJcbiAgLy8gMjUuMS4yIFRoZSAlSXRlcmF0b3JQcm90b3R5cGUlIE9iamVjdFxyXG4gIC8vIERlZmluZWQgZWFybGllciwgc28gb3RoZXIgcHJvdG90eXBlcyBjYW4gcmVmZXJlbmNlIGl0LlxyXG4gIC8vIDI1LjEuMi4xICVJdGVyYXRvclByb3RvdHlwZSUgWyBAQGl0ZXJhdG9yIF0gKCApXHJcbiAgZGVmaW5lKCRJdGVyYXRvclByb3RvdHlwZSQsICQkaXRlcmF0b3IsIGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfSk7XHJcblxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyNS40IFByb21pc2UgT2JqZWN0c1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyAyNS40IFByb21pc2UgT2JqZWN0c1xyXG5cclxuICAgIC8vIDI1LjQuMSBQcm9taXNlIEFic3RyYWN0IE9wZXJhdGlvbnNcclxuXHJcbiAgICAvLyAyNS40LjEuMSBQcm9taXNlQ2FwYWJpbGl0eSBSZWNvcmRzXHJcbiAgICAvLyAyNS40LjEuMS4xIElmQWJydXB0UmVqZWN0UHJvbWlzZSAoIHZhbHVlLCBjYXBhYmlsaXR5IClcclxuXHJcbiAgICBmdW5jdGlvbiBJZkFicnVwdFJlamVjdFByb21pc2UodmFsdWUsIGNhcGFiaWxpdHkpIHtcclxuICAgICAgdmFyIHJlamVjdFJlc3VsdCA9IGNhcGFiaWxpdHlbJ1tbUmVqZWN0XV0nXS5jYWxsKHVuZGVmaW5lZCwgdmFsdWUpO1xyXG4gICAgICByZXR1cm4gY2FwYWJpbGl0eVsnW1tQcm9taXNlXV0nXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAyNS40LjEuMiBQcm9taXNlUmVhY3Rpb24gUmVjb3Jkc1xyXG5cclxuICAgIC8vIDI1LjQuMS4zIENyZWF0ZVJlc29sdmluZ0Z1bmN0aW9ucyAoIHByb21pc2UgKVxyXG5cclxuICAgIGZ1bmN0aW9uIENyZWF0ZVJlc29sdmluZ0Z1bmN0aW9ucyhwcm9taXNlKSB7XHJcbiAgICAgIHZhciBhbHJlYWR5UmVzb2x2ZWQgPSB7J1tbdmFsdWVdXSc6IGZhbHNlfTtcclxuICAgICAgdmFyIHJlc29sdmUgPSBQcm9taXNlUmVzb2x2ZUZ1bmN0aW9uKCk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChyZXNvbHZlLCAnW1tQcm9taXNlXV0nLCAgcHJvbWlzZSk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChyZXNvbHZlLCAnW1tBbHJlYWR5UmVzb2x2ZWRdXScsIGFscmVhZHlSZXNvbHZlZCk7XHJcbiAgICAgIHZhciByZWplY3QgPSBQcm9taXNlUmVqZWN0RnVuY3Rpb24oKTtcclxuICAgICAgc2V0X2ludGVybmFsKHJlamVjdCwgJ1tbUHJvbWlzZV1dJywgcHJvbWlzZSk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChyZWplY3QsICdbW0FscmVhZHlSZXNvbHZlZF1dJywgYWxyZWFkeVJlc29sdmVkKTtcclxuICAgICAgcmV0dXJuIHsgJ1tbUmVzb2x2ZV1dJzogcmVzb2x2ZSwgJ1tbUmVqZWN0XV0nOiByZWplY3R9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDI1LjQuMS4zLjEgUHJvbWlzZSBSZWplY3QgRnVuY3Rpb25zXHJcblxyXG4gICAgZnVuY3Rpb24gUHJvbWlzZVJlamVjdEZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uKHJlYXNvbikge1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KFR5cGUoRlsnW1tQcm9taXNlXV0nXSkgPT09ICdvYmplY3QnKTtcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IEZbJ1tbUHJvbWlzZV1dJ107XHJcbiAgICAgICAgdmFyIGFscmVhZHlSZXNvbHZlZCA9IEZbJ1tbQWxyZWFkeVJlc29sdmVkXV0nXTtcclxuICAgICAgICBpZiAoYWxyZWFkeVJlc29sdmVkWydbW3ZhbHVlXV0nXSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICBzZXRfaW50ZXJuYWwoYWxyZWFkeVJlc29sdmVkLCAnW1t2YWx1ZV1dJywgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIFJlamVjdFByb21pc2UocHJvbWlzZSwgcmVhc29uKTtcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIEY7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMjUuNC4xLjMuMiBQcm9taXNlIFJlc29sdmUgRnVuY3Rpb25zXHJcblxyXG4gICAgZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVGdW5jdGlvbigpIHtcclxuICAgICAgdmFyIEYgPSBmdW5jdGlvbihyZXNvbHV0aW9uKSB7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQoVHlwZShGWydbW1Byb21pc2VdXSddKSA9PT0gJ29iamVjdCcpO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gRlsnW1tQcm9taXNlXV0nXTtcclxuICAgICAgICB2YXIgYWxyZWFkeVJlc29sdmVkID0gRlsnW1tBbHJlYWR5UmVzb2x2ZWRdXSddO1xyXG4gICAgICAgIGlmIChhbHJlYWR5UmVzb2x2ZWRbJ1tbdmFsdWVdXSddKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHNldF9pbnRlcm5hbChhbHJlYWR5UmVzb2x2ZWQsICdbW3ZhbHVlXV0nLCB0cnVlKTtcclxuXHJcbiAgICAgICAgaWYgKFNhbWVWYWx1ZShyZXNvbHV0aW9uLCBwcm9taXNlKSkgIHtcclxuICAgICAgICAgIHZhciBzZWxmUmVzb2x1dGlvbkVycm9yID0gVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICByZXR1cm4gUmVqZWN0UHJvbWlzZShwcm9taXNlLCBzZWxmUmVzb2x1dGlvbkVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFR5cGUocmVzb2x1dGlvbikgIT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgcmV0dXJuIEZ1bGZpbGxQcm9taXNlKHByb21pc2UsIHJlc29sdXRpb24pO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YXIgdGhlbiA9IHJlc29sdXRpb25bJ3RoZW4nXTtcclxuICAgICAgICB9IGNhdGNoKHRoZW4pIHtcclxuICAgICAgICAgIHJldHVybiBSZWplY3RQcm9taXNlKHByb21pc2UsIHRoZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIUlzQ2FsbGFibGUodGhlbikpXHJcbiAgICAgICAgICByZXR1cm4gRnVsZmlsbFByb21pc2UocHJvbWlzZSwgcmVzb2x1dGlvbik7XHJcbiAgICAgICAgRW5xdWV1ZUpvYignUHJvbWlzZUpvYnMnLCBQcm9taXNlUmVzb2x2ZVRoZW5hYmxlSm9iLCBbcHJvbWlzZSwgcmVzb2x1dGlvbiwgdGhlbl0pO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBGO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDI1LjQuMS40IEZ1bGZpbGxQcm9taXNlICggcHJvbWlzZSwgdmFsdWUgKVxyXG5cclxuICAgIGZ1bmN0aW9uIEZ1bGZpbGxQcm9taXNlKHByb21pc2UsIHZhbHVlKSB7XHJcbiAgICAgIGNvbnNvbGUuYXNzZXJ0KHByb21pc2VbJ1tbUHJvbWlzZVN0YXRlXV0nXSA9PT0gJ3BlbmRpbmcnKTtcclxuICAgICAgdmFyIHJlYWN0aW9ucyA9IHByb21pc2VbJ1tbUHJvbWlzZUZ1bGZpbGxSZWFjdGlvbnNdXSddO1xyXG4gICAgICBzZXRfaW50ZXJuYWwocHJvbWlzZSwgJ1tbUHJvbWlzZVJlc3VsdF1dJywgdmFsdWUpO1xyXG4gICAgICBzZXRfaW50ZXJuYWwocHJvbWlzZSwgJ1tbUHJvbWlzZUZ1bGZpbGxSZWFjdGlvbnNdXScsIHVuZGVmaW5lZCk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChwcm9taXNlLCAnW1tQcm9taXNlUmVqZWN0UmVhY3Rpb25zXV0nLCB1bmRlZmluZWQpO1xyXG4gICAgICBzZXRfaW50ZXJuYWwocHJvbWlzZSwgJ1tbUHJvbWlzZVN0YXRlXV0nLCAnZnVsZmlsbGVkJyk7XHJcbiAgICAgIHJldHVybiBUcmlnZ2VyUHJvbWlzZVJlYWN0aW9ucyhyZWFjdGlvbnMsIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eSAoIEMgKVxyXG5cclxuICAgIGZ1bmN0aW9uIE5ld1Byb21pc2VDYXBhYmlsaXR5KGMpIHtcclxuICAgICAgLy8gVG8ga2VlcCBQcm9taXNlIGhlcm1ldGljLCB0aGlzIGRvZXNuJ3QgbG9vayBtdWNoIGxpa2UgdGhlIHNwZWMuXHJcbiAgICAgIHJldHVybiBDcmVhdGVQcm9taXNlQ2FwYWJpbGl0eVJlY29yZCh1bmRlZmluZWQsIGMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDI1LjQuMS41LjEgQ3JlYXRlUHJvbWlzZUNhcGFiaWxpdHlSZWNvcmQgKCBwcm9taXNlLCBjb25zdHJ1Y3RvciApXHJcblxyXG4gICAgZnVuY3Rpb24gQ3JlYXRlUHJvbWlzZUNhcGFiaWxpdHlSZWNvcmQocHJvbWlzZSwgY29uc3RydWN0b3IpIHtcclxuICAgICAgLy8gVG8ga2VlcCBQcm9taXNlIGhlcm1ldGljLCB0aGlzIGRvZXNuJ3QgbG9vayBtdWNoIGxpa2UgdGhlIHNwZWMuXHJcbiAgICAgIGNvbnNvbGUuYXNzZXJ0KElzQ29uc3RydWN0b3IoY29uc3RydWN0b3IpKTtcclxuICAgICAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0ge307XHJcbiAgICAgIHNldF9pbnRlcm5hbChwcm9taXNlQ2FwYWJpbGl0eSwgJ1tbUHJvbWlzZV1dJywgcHJvbWlzZSk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChwcm9taXNlQ2FwYWJpbGl0eSwgJ1tbUmVzb2x2ZV1dJywgdW5kZWZpbmVkKTtcclxuICAgICAgc2V0X2ludGVybmFsKHByb21pc2VDYXBhYmlsaXR5LCAnW1tSZWplY3RdXScsIHVuZGVmaW5lZCk7XHJcbiAgICAgIHZhciBleGVjdXRvciA9IEdldENhcGFiaWxpdGllc0V4ZWN1dG9yKCk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChleGVjdXRvciwgJ1tbQ2FwYWJpbGl0eV1dJywgcHJvbWlzZUNhcGFiaWxpdHkpO1xyXG5cclxuICAgICAgLy8gTk9URTogRGlmZmVycyBmcm9tIHNwZWM7IG9iamVjdCBpcyBjb25zdHJ1Y3RlZCBoZXJlXHJcbiAgICAgIHZhciBjb25zdHJ1Y3RvclJlc3VsdCA9IHByb21pc2UgPSBuZXcgY29uc3RydWN0b3IoZXhlY3V0b3IpO1xyXG4gICAgICBzZXRfaW50ZXJuYWwocHJvbWlzZUNhcGFiaWxpdHksICdbW1Byb21pc2VdXScsIHByb21pc2UpO1xyXG5cclxuICAgICAgaWYgKCFJc0NhbGxhYmxlKHByb21pc2VDYXBhYmlsaXR5WydbW1Jlc29sdmVdXSddKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIGlmICghSXNDYWxsYWJsZShwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZWplY3RdXSddKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgIGlmIChUeXBlKGNvbnN0cnVjdG9yUmVzdWx0KSA9PT0gJ29iamVjdCcgJiYgIVNhbWVWYWx1ZShwcm9taXNlLCBjb25zdHJ1Y3RvclJlc3VsdCkpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMjUuNC4xLjUuMiBHZXRDYXBhYmlsaXRpZXNFeGVjdXRvciBGdW5jdGlvbnNcclxuXHJcbiAgICBmdW5jdGlvbiBHZXRDYXBhYmlsaXRpZXNFeGVjdXRvcigpIHtcclxuICAgICAgdmFyIEYgPSBmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChGWydbW0NhcGFiaWxpdHldXSddKTtcclxuICAgICAgICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBGWydbW0NhcGFiaWxpdHldXSddO1xyXG4gICAgICAgIGlmIChwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZXNvbHZlXV0nXSAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAocHJvbWlzZUNhcGFiaWxpdHlbJ1tbUmVqZWN0XV0nXSAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBzZXRfaW50ZXJuYWwocHJvbWlzZUNhcGFiaWxpdHksICdbW1Jlc29sdmVdXScsIHJlc29sdmUpO1xyXG4gICAgICAgIHNldF9pbnRlcm5hbChwcm9taXNlQ2FwYWJpbGl0eSwgJ1tbUmVqZWN0XV0nLCByZWplY3QpO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBGO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDI1LjQuMS42IElzUHJvbWlzZSAoIHggKVxyXG5cclxuICAgIGZ1bmN0aW9uIElzUHJvbWlzZSh4KSB7XHJcbiAgICAgIGlmIChUeXBlKHgpICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAoISgnW1tQcm9taXNlU3RhdGVdXScgaW4geCkpIHJldHVybiBmYWxzZTtcclxuICAgICAgaWYgKHhbJ1tbUHJvbWlzZVN0YXRlXV0nXSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDI1LjQuMS43IFJlamVjdFByb21pc2UgKCBwcm9taXNlLCByZWFzb24gKVxyXG5cclxuICAgIGZ1bmN0aW9uIFJlamVjdFByb21pc2UocHJvbWlzZSwgcmVhc29uKSB7XHJcbiAgICAgIGNvbnNvbGUuYXNzZXJ0KHByb21pc2VbJ1tbUHJvbWlzZVN0YXRlXV0nXSA9PT0gJ3BlbmRpbmcnKTtcclxuICAgICAgdmFyIHJlYWN0aW9ucyA9IHByb21pc2VbJ1tbUHJvbWlzZVJlamVjdFJlYWN0aW9uc11dJ107XHJcbiAgICAgIHNldF9pbnRlcm5hbChwcm9taXNlLCAnW1tQcm9taXNlUmVzdWx0XV0nLCByZWFzb24pO1xyXG4gICAgICBzZXRfaW50ZXJuYWwocHJvbWlzZSwgJ1tbUHJvbWlzZUZ1bGZpbGxSZWFjdGlvbnNdXScsIHVuZGVmaW5lZCk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChwcm9taXNlLCAnW1tQcm9taXNlUmVqZWN0UmVhY3Rpb25zXV0nLCB1bmRlZmluZWQpO1xyXG4gICAgICBzZXRfaW50ZXJuYWwocHJvbWlzZSwgJ1tbUHJvbWlzZVN0YXRlXV0nLCAncmVqZWN0ZWQnKTtcclxuICAgICAgcmV0dXJuIFRyaWdnZXJQcm9taXNlUmVhY3Rpb25zKHJlYWN0aW9ucywgcmVhc29uKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAyNS40LjEuOCBUcmlnZ2VyUHJvbWlzZVJlYWN0aW9ucyAoIHJlYWN0aW9ucywgYXJndW1lbnQgKVxyXG5cclxuICAgIGZ1bmN0aW9uIFRyaWdnZXJQcm9taXNlUmVhY3Rpb25zKHJlYWN0aW9ucywgYXJndW1lbnQpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJlYWN0aW9ucy5sZW5ndGg7IGkgPCBsZW47ICsraSlcclxuICAgICAgICBFbnF1ZXVlSm9iKCdQcm9taXNlSm9icycsIFByb21pc2VSZWFjdGlvbkpvYiwgW3JlYWN0aW9uc1tpXSwgYXJndW1lbnRdKTtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyAyNS40LjIgUHJvbWlzZSBKb2JzXHJcblxyXG4gICAgLy8gMjUuNC4yLjEgUHJvbWlzZVJlYWN0aW9uSm9iICggcmVhY3Rpb24sIGFyZ3VtZW50IClcclxuXHJcbiAgICBmdW5jdGlvbiBQcm9taXNlUmVhY3Rpb25Kb2IocmVhY3Rpb24sIGFyZ3VtZW50KSB7XHJcbiAgICAgIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IHJlYWN0aW9uWydbW0NhcGFiaWxpdGllc11dJ107XHJcbiAgICAgIHZhciBoYW5kbGVyID0gcmVhY3Rpb25bJ1tbSGFuZGxlcl1dJ107XHJcbiAgICAgIHZhciBoYW5kbGVyUmVzdWx0LCBzdGF0dXM7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKGhhbmRsZXIgPT09ICdJZGVudGl0eScpIGhhbmRsZXJSZXN1bHQgPSBhcmd1bWVudDtcclxuICAgICAgICBlbHNlIGlmIChoYW5kbGVyID09PSAnVGhyb3dlcicpIHRocm93IGFyZ3VtZW50O1xyXG4gICAgICAgIGVsc2UgaGFuZGxlclJlc3VsdCA9IGhhbmRsZXIuY2FsbCh1bmRlZmluZWQsIGFyZ3VtZW50KTtcclxuICAgICAgfSBjYXRjaCAoaGFuZGxlclJlc3VsdCkge1xyXG4gICAgICAgIHN0YXR1cyA9IHByb21pc2VDYXBhYmlsaXR5WydbW1JlamVjdF1dJ10uY2FsbCh1bmRlZmluZWQsIGhhbmRsZXJSZXN1bHQpO1xyXG4gICAgICAgIE5leHRKb2Ioc3RhdHVzKTsgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHN0YXR1cyA9IHByb21pc2VDYXBhYmlsaXR5WydbW1Jlc29sdmVdXSddLmNhbGwodW5kZWZpbmVkLCBoYW5kbGVyUmVzdWx0KTtcclxuICAgICAgTmV4dEpvYihzdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDI1LjQuMi4yIFByb21pc2VSZXNvbHZlVGhlbmFibGVKb2IgKCBwcm9taXNlVG9SZXNvbHZlLCB0aGVuYWJsZSwgdGhlbilcclxuXHJcbiAgICBmdW5jdGlvbiBQcm9taXNlUmVzb2x2ZVRoZW5hYmxlSm9iKHByb21pc2VUb1Jlc29sdmUsIHRoZW5hYmxlLCB0aGVuKSB7XHJcbiAgICAgIC8vIFNQRUMgQlVHOiBwcm9taXNlIHZzLiBwcm9taXNlVG9SZXNvbHZlXHJcbiAgICAgIHZhciByZXNvbHZpbmdGdW5jdGlvbnMgPSBDcmVhdGVSZXNvbHZpbmdGdW5jdGlvbnMocHJvbWlzZVRvUmVzb2x2ZSk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIHRoZW5DYWxsUmVzdWx0ID0gdGhlbi5jYWxsKHRoZW5hYmxlLCByZXNvbHZpbmdGdW5jdGlvbnNbJ1tbUmVzb2x2ZV1dJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmluZ0Z1bmN0aW9uc1snW1tSZWplY3RdXSddKTtcclxuICAgICAgfSBjYXRjaCAodGhlbkNhbGxSZXN1bHQpIHtcclxuICAgICAgICB2YXIgc3RhdHVzID0gcmVzb2x2aW5nRnVuY3Rpb25zWydbW1JlamVjdF1dJ10uY2FsbCh1bmRlZmluZWQsIHRoZW5DYWxsUmVzdWx0KTtcclxuICAgICAgICBOZXh0Sm9iKHN0YXR1cyk7IHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBOZXh0Sm9iKHRoZW5DYWxsUmVzdWx0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAyNS40LjMgVGhlIFByb21pc2UgQ29uc3RydWN0b3JcclxuXHJcbiAgICAvLyAyNS40LjMuMSBQcm9taXNlICggZXhlY3V0b3IgKVxyXG5cclxuICAgIGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcclxuICAgICAgdmFyIGNvbmZpZyA9IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnW1tQcm9taXNlU3RhdGVdXScsIGNvbmZpZyk7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnW1tQcm9taXNlQ29uc3RydWN0b3JdXScsIGNvbmZpZyk7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnW1tQcm9taXNlUmVzdWx0XV0nLCBjb25maWcpO1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ1tbUHJvbWlzZUZ1bGZpbGxSZWFjdGlvbnNdXScsIGNvbmZpZyk7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnW1tQcm9taXNlUmVqZWN0UmVhY3Rpb25zXV0nLCBjb25maWcpO1xyXG5cclxuICAgICAgdmFyIHByb21pc2UgPSB0aGlzO1xyXG4gICAgICBpZiAoVHlwZShwcm9taXNlKSAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgaWYgKCEoJ1tbUHJvbWlzZVN0YXRlXV0nIGluIHByb21pc2UpKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgaWYgKHByb21pc2VbJ1tbUHJvbWlzZVN0YXRlXV0nXSAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgaWYgKCFJc0NhbGxhYmxlKGV4ZWN1dG9yKSkgdGhyb3cgVHlwZUVycm9yKCk7XHJcblxyXG4gICAgICBzZXRfaW50ZXJuYWwocHJvbWlzZSwgJ1tbUHJvbWlzZUNvbnN0cnVjdG9yXV0nLCBQcm9taXNlKTtcclxuXHJcbiAgICAgIHJldHVybiBJbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCBleGVjdXRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMjUuNC4zLjEuMSBJbml0aWFsaXplUHJvbWlzZSAoIHByb21pc2UsIGV4ZWN1dG9yIClcclxuXHJcbiAgICBmdW5jdGlvbiBJbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCBleGVjdXRvcikge1xyXG4gICAgICBjb25zb2xlLmFzc2VydCgnW1tQcm9taXNlU3RhdGVdXScgaW4gcHJvbWlzZSk7XHJcbiAgICAgIGNvbnNvbGUuYXNzZXJ0KElzQ2FsbGFibGUoZXhlY3V0b3IpKTtcclxuICAgICAgc2V0X2ludGVybmFsKHByb21pc2UsICdbW1Byb21pc2VTdGF0ZV1dJywgJ3BlbmRpbmcnKTtcclxuICAgICAgc2V0X2ludGVybmFsKHByb21pc2UsICdbW1Byb21pc2VGdWxmaWxsUmVhY3Rpb25zXV0nLCBbXSk7XHJcbiAgICAgIHNldF9pbnRlcm5hbChwcm9taXNlLCAnW1tQcm9taXNlUmVqZWN0UmVhY3Rpb25zXV0nLCBbXSk7XHJcbiAgICAgIHZhciByZXNvbHZpbmdGdW5jdGlvbnMgPSBDcmVhdGVSZXNvbHZpbmdGdW5jdGlvbnMocHJvbWlzZSk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIGNvbXBsZXRpb24gPSBleGVjdXRvci5jYWxsKHVuZGVmaW5lZCwgcmVzb2x2aW5nRnVuY3Rpb25zWydbW1Jlc29sdmVdXSddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZpbmdGdW5jdGlvbnNbJ1tbUmVqZWN0XV0nXSk7XHJcbiAgICAgIH0gY2F0Y2ggKGNvbXBsZXRpb24pIHtcclxuICAgICAgICB2YXIgc3RhdHVzID0gcmVzb2x2aW5nRnVuY3Rpb25zWydbW1JlamVjdF1dJ10uY2FsbCh1bmRlZmluZWQsIGNvbXBsZXRpb24pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDI1LjQuNCBQcm9wZXJ0aWVzIG9mIHRoZSBQcm9taXNlIENvbnN0cnVjdG9yXHJcbiAgICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbCAoIGl0ZXJhYmxlIClcclxuXHJcbiAgICBkZWZpbmUoUHJvbWlzZSwgJ2FsbCcsIGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xyXG4gICAgICB2YXIgYyA9IHN0cmljdCh0aGlzKTtcclxuICAgICAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gTmV3UHJvbWlzZUNhcGFiaWxpdHkoYyk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gR2V0SXRlcmF0b3IoaXRlcmFibGUpO1xyXG4gICAgICB9IGNhdGNoICh2YWx1ZSkge1xyXG4gICAgICAgIHByb21pc2VDYXBhYmlsaXR5WydbW1JlamVjdF1dJ10uY2FsbCh1bmRlZmluZWQsIHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUHJvbWlzZV1dJ107XHJcbiAgICAgIH1cclxuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xyXG4gICAgICB2YXIgcmVtYWluaW5nRWxlbWVudHNDb3VudCA9IHsgdmFsdWU6IDEgfTtcclxuICAgICAgdmFyIGluZGV4ID0gMDtcclxuICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIG5leHQgPSBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpO1xyXG4gICAgICAgIH0gY2F0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICBwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZWplY3RdXSddLmNhbGwodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUHJvbWlzZV1dJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbmV4dCkge1xyXG4gICAgICAgICAgcmVtYWluaW5nRWxlbWVudHNDb3VudC52YWx1ZSAtPSAxO1xyXG4gICAgICAgICAgaWYgKHJlbWFpbmluZ0VsZW1lbnRzQ291bnQudmFsdWUgPT09IDApIHtcclxuICAgICAgICAgICAgdmFyIHJlc29sdmVSZXN1bHQgPSBwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZXNvbHZlXV0nXS5hcHBseSh1bmRlZmluZWQsIHZhbHVlcyk7XHJcblxyXG5cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eVsnW1tQcm9taXNlXV0nXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBJdGVyYXRvclZhbHVlKG5leHQpO1xyXG4gICAgICAgIH0gY2F0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICBwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZWplY3RdXSddLmNhbGwodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUHJvbWlzZV1dJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YXIgbmV4dFByb21pc2UgPSBjLnJlc29sdmUobmV4dFZhbHVlKTtcclxuICAgICAgICB9IGNhdGNoICh2YWx1ZSkge1xyXG4gICAgICAgICAgcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUmVqZWN0XV0nXS5jYWxsKHVuZGVmaW5lZCwgdmFsdWUpO1xyXG4gICAgICAgICAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5WydbW1Byb21pc2VdXSddO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzb2x2ZUVsZW1lbnQgPSBQcm9taXNlQWxsUmVzb2x2ZUVsZW1lbnRGdW5jdGlvbigpO1xyXG4gICAgICAgIHNldF9pbnRlcm5hbChyZXNvbHZlRWxlbWVudCwgJ1tbQWxyZWFkeUNhbGxlZF1dJywgeyB2YWx1ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgc2V0X2ludGVybmFsKHJlc29sdmVFbGVtZW50LCAnW1tJbmRleF1dJywgaW5kZXgpO1xyXG4gICAgICAgIHNldF9pbnRlcm5hbChyZXNvbHZlRWxlbWVudCwgJ1tbVmFsdWVzXV0nLCB2YWx1ZXMpO1xyXG4gICAgICAgIHNldF9pbnRlcm5hbChyZXNvbHZlRWxlbWVudCwgJ1tbQ2FwYWJpbGl0aWVzXV0nLCBwcm9taXNlQ2FwYWJpbGl0eSk7XHJcbiAgICAgICAgc2V0X2ludGVybmFsKHJlc29sdmVFbGVtZW50LCAnW1tSZW1haW5pbmdFbGVtZW50c11dJywgcmVtYWluaW5nRWxlbWVudHNDb3VudCk7XHJcbiAgICAgICAgcmVtYWluaW5nRWxlbWVudHNDb3VudC52YWx1ZSArPSAxO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dFByb21pc2UudGhlbihyZXNvbHZlRWxlbWVudCwgcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUmVqZWN0XV0nXSk7XHJcbiAgICAgICAgfSBjYXRjaCAodmFsdWUpIHtcclxuICAgICAgICAgIHByb21pc2VDYXBhYmlsaXR5WydbW1JlamVjdF1dJ10uY2FsbCh1bmRlZmluZWQsIHZhbHVlKTtcclxuICAgICAgICAgIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eVsnW1tQcm9taXNlXV0nXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5kZXggKz0gMTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gMjUuNC40LjEuMSBQcm9taXNlLmFsbCBSZXNvbHZlIEVsZW1lbnQgRnVuY3Rpb25zXHJcblxyXG4gICAgZnVuY3Rpb24gUHJvbWlzZUFsbFJlc29sdmVFbGVtZW50RnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBGID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gRlsnW1tBbHJlYWR5Q2FsbGVkXV0nXTtcclxuICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZC52YWx1ZSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICBhbHJlYWR5Q2FsbGVkLnZhbHVlID0gdHJ1ZTtcclxuICAgICAgICB2YXIgaW5kZXggPSBGWydbW0luZGV4XV0nXTtcclxuICAgICAgICB2YXIgdmFsdWVzID0gRlsnW1tWYWx1ZXNdXSddO1xyXG4gICAgICAgIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IEZbJ1tbQ2FwYWJpbGl0aWVzXV0nXTtcclxuICAgICAgICB2YXIgcmVtYWluaW5nRWxlbWVudHNDb3VudCA9IEZbJ1tbUmVtYWluaW5nRWxlbWVudHNdXSddO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geDtcclxuICAgICAgICB9IGNhdGNoIChyZXN1bHQpIHtcclxuICAgICAgICAgIHByb21pc2VDYXBhYmlsaXR5WydbW1JlamVjdF1dJ10uY2FsbCh1bmRlZmluZWQsIHJlc3VsdCk7XHJcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUHJvbWlzZV1dJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbWFpbmluZ0VsZW1lbnRzQ291bnQudmFsdWUgLT0gMTtcclxuICAgICAgICBpZiAocmVtYWluaW5nRWxlbWVudHNDb3VudC52YWx1ZSA9PT0gMClcclxuICAgICAgICAgIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZXNvbHZlXV0nXS5jYWxsKHVuZGVmaW5lZCwgdmFsdWVzKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gRjtcclxuICAgIH1cclxuXHJcbiAgICAvLyAyNS40LjQuMiBQcm9taXNlLnByb3RvdHlwZVxyXG5cclxuICAgIFByb21pc2UucHJvdG90eXBlID0ge307XHJcblxyXG4gICAgLy8gMjUuNC40LjMgUHJvbWlzZS5yYWNlICggaXRlcmFibGUgKVxyXG5cclxuICAgIGRlZmluZShQcm9taXNlLCAncmFjZScsIGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcclxuICAgICAgdmFyIGMgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IE5ld1Byb21pc2VDYXBhYmlsaXR5KGMpO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHZhciBpdGVyYXRvciA9IEdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcclxuICAgICAgfSBjYXRjaCAodmFsdWUpIHtcclxuICAgICAgICBwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZWplY3RdXSddLmNhbGwodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5WydbW1Byb21pc2VdXSddO1xyXG4gICAgICB9XHJcbiAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciBuZXh0ID0gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKTtcclxuICAgICAgICB9IGNhdGNoICh2YWx1ZSkge1xyXG4gICAgICAgICAgcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUmVqZWN0XV0nXS5jYWxsKHVuZGVmaW5lZCwgdmFsdWUpO1xyXG4gICAgICAgICAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5WydbW1Byb21pc2VdXSddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW5leHQpIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eVsnW1tQcm9taXNlXV0nXTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XHJcbiAgICAgICAgfSBjYXRjaCAodmFsdWUpIHtcclxuICAgICAgICAgIHByb21pc2VDYXBhYmlsaXR5WydbW1JlamVjdF1dJ10uY2FsbCh1bmRlZmluZWQsIHZhbHVlKTtcclxuICAgICAgICAgIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eVsnW1tQcm9taXNlXV0nXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciBuZXh0UHJvbWlzZSA9IGMucmVzb2x2ZShuZXh0VmFsdWUpO1xyXG4gICAgICAgIH0gY2F0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICBwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZWplY3RdXSddLmNhbGwodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUHJvbWlzZV1dJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBuZXh0UHJvbWlzZS50aGVuKHByb21pc2VDYXBhYmlsaXR5WydbW1Jlc29sdmVdXSddLCBwcm9taXNlQ2FwYWJpbGl0eVsnW1tSZWplY3RdXSddKTtcclxuICAgICAgICB9IGNhdGNoICh2YWx1ZSkge1xyXG4gICAgICAgICAgcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUmVqZWN0XV0nXS5jYWxsKHVuZGVmaW5lZCwgdmFsdWUpO1xyXG4gICAgICAgICAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5WydbW1Byb21pc2VdXSddO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gMjUuNC40LjQgUHJvbWlzZS5yZWplY3QgKCByIClcclxuXHJcbiAgICBkZWZpbmUoUHJvbWlzZSwgJ3JlamVjdCcsIGZ1bmN0aW9uIHJlamVjdChyKSB7XHJcbiAgICAgIHZhciBjID0gc3RyaWN0KHRoaXMpO1xyXG4gICAgICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBOZXdQcm9taXNlQ2FwYWJpbGl0eShjKTtcclxuICAgICAgdmFyIHJlamVjdFJlc3VsdCA9IHByb21pc2VDYXBhYmlsaXR5WydbW1JlamVjdF1dJ10uY2FsbCh1bmRlZmluZWQsIHIpO1xyXG4gICAgICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHlbJ1tbUHJvbWlzZV1dJ107XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyAyNS40LjQuNSBQcm9taXNlLnJlc29sdmUgKCB4IClcclxuXHJcbiAgICBkZWZpbmUoUHJvbWlzZSwgJ3Jlc29sdmUnLCBmdW5jdGlvbiByZXNvbHZlKHgpIHtcclxuICAgICAgdmFyIGMgPSBzdHJpY3QodGhpcyk7XHJcbiAgICAgIGlmIChJc1Byb21pc2UoeCkpIHtcclxuICAgICAgICB2YXIgY29uc3RydWN0b3IgPSB4WydbW1Byb21pc2VDb25zdHJ1Y3Rvcl1dJ107XHJcbiAgICAgICAgaWYgKFNhbWVWYWx1ZShjb25zdHJ1Y3RvciwgYykpIHJldHVybiB4O1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IE5ld1Byb21pc2VDYXBhYmlsaXR5KGMpO1xyXG4gICAgICB2YXIgcmVzb2x2ZVJlc3VsdCA9IHByb21pc2VDYXBhYmlsaXR5WydbW1Jlc29sdmVdXSddLmNhbGwodW5kZWZpbmVkLCB4KTtcclxuICAgICAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5WydbW1Byb21pc2VdXSddO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gMjUuNC40LjYgUHJvbWlzZSBbIEBAY3JlYXRlIF0gKCApXHJcbiAgICAvLyAyNS40LjQuNi4xIEFsbG9jYXRlUHJvbWlzZSAoIGNvbnN0cnVjdG9yIClcclxuICAgIC8vIDI1LjQuNSBQcm9wZXJ0aWVzIG9mIHRoZSBQcm9taXNlIFByb3RvdHlwZSBPYmplY3RcclxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoICggb25SZWplY3RlZCApXHJcblxyXG4gICAgZGVmaW5lKFByb21pc2UucHJvdG90eXBlLCAnY2F0Y2gnLCBmdW5jdGlvbiBjYXRjaF8ob25SZWplY3RlZCkge1xyXG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XHJcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIDI1LjQuNS4yIFByb21pc2UucHJvdG90eXBlLmNvbnN0cnVjdG9yXHJcblxyXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQcm9taXNlO1xyXG5cclxuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4gKCBvbkZ1bGZpbGxlZCAsIG9uUmVqZWN0ZWQgKVxyXG5cclxuICAgIGRlZmluZShQcm9taXNlLnByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XHJcbiAgICAgIHZhciBwcm9taXNlID0gdGhpcztcclxuICAgICAgaWYgKCFJc1Byb21pc2UocHJvbWlzZSkpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICBpZiAoIUlzQ2FsbGFibGUob25GdWxmaWxsZWQpKSBvbkZ1bGZpbGxlZCA9ICdJZGVudGl0eSc7XHJcbiAgICAgIGlmICghSXNDYWxsYWJsZShvblJlamVjdGVkKSkgb25SZWplY3RlZCA9ICdUaHJvd2VyJztcclxuICAgICAgdmFyIGMgPSBwcm9taXNlLmNvbnN0cnVjdG9yO1xyXG4gICAgICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBOZXdQcm9taXNlQ2FwYWJpbGl0eShjKTtcclxuICAgICAgdmFyIGZ1bGZpbGxSZWFjdGlvbiA9IHsgJ1tbQ2FwYWJpbGl0aWVzXV0nOiBwcm9taXNlQ2FwYWJpbGl0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tbSGFuZGxlcl1dJzogb25GdWxmaWxsZWQgfTtcclxuICAgICAgdmFyIHJlamVjdFJlYWN0aW9uID0geyAnW1tDYXBhYmlsaXRpZXNdXSc6IHByb21pc2VDYXBhYmlsaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbW0hhbmRsZXJdXSc6IG9uUmVqZWN0ZWQgfTtcclxuICAgICAgaWYgKHByb21pc2VbJ1tbUHJvbWlzZVN0YXRlXV0nXSA9PT0gJ3BlbmRpbmcnKSB7XHJcbiAgICAgICAgcHJvbWlzZVsnW1tQcm9taXNlRnVsZmlsbFJlYWN0aW9uc11dJ10ucHVzaChmdWxmaWxsUmVhY3Rpb24pO1xyXG4gICAgICAgIHByb21pc2VbJ1tbUHJvbWlzZVJlamVjdFJlYWN0aW9uc11dJ10ucHVzaChyZWplY3RSZWFjdGlvbik7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJvbWlzZVsnW1tQcm9taXNlU3RhdGVdXSddID09PSAnZnVsZmlsbGVkJykge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHByb21pc2VbJ1tbUHJvbWlzZVJlc3VsdF1dJ107XHJcbiAgICAgICAgRW5xdWV1ZUpvYignUHJvbWlzZUpvYnMnLCBQcm9taXNlUmVhY3Rpb25Kb2IsIFtmdWxmaWxsUmVhY3Rpb24sIHZhbHVlXSk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJvbWlzZVsnW1tQcm9taXNlU3RhdGVdXSddID09PSAncmVqZWN0ZWQnKSB7XHJcbiAgICAgICAgdmFyIHJlYXNvbiA9IHByb21pc2VbJ1tbUHJvbWlzZVJlc3VsdF1dJ107XHJcbiAgICAgICAgRW5xdWV1ZUpvYignUHJvbWlzZUpvYnMnLCBQcm9taXNlUmVhY3Rpb25Kb2IsIFtyZWplY3RSZWFjdGlvbiwgcmVhc29uXSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5WydbW1Byb21pc2VdXSddO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gMjUuNC42IFByb3BlcnRpZXMgb2YgUHJvbWlzZSBJbnN0YW5jZXNcclxuXHJcbiAgICBpZiAoISgnUHJvbWlzZScgaW4gZ2xvYmFsKSB8fCBPVkVSUklERV9OQVRJVkVfRk9SX1RFU1RJTkcpXHJcbiAgICAgIGdsb2JhbC5Qcm9taXNlID0gUHJvbWlzZTtcclxuXHJcbiAgICAvLyBQYXRjaCBlYXJseSBQcm9taXNlLmNhc3QgdnMuIFByb21pc2UucmVzb2x2ZSBpbXBsZW1lbnRhdGlvbnNcclxuICAgIGlmICgnY2FzdCcgaW4gZ2xvYmFsLlByb21pc2UpIGdsb2JhbC5Qcm9taXNlLnJlc29sdmUgPSBnbG9iYWwuUHJvbWlzZS5jYXN0O1xyXG4gIH0oKSk7XHJcblxyXG4gIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlIFsgQEB0b1N0cmluZ1RhZyBdXHJcbiAgZGVmaW5lKFByb21pc2UucHJvdG90eXBlLCAkJHRvU3RyaW5nVGFnLCAnUHJvbWlzZScpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyNiBSZWZsZWN0aW9uXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIChmdW5jdGlvbigpIHtcclxuICAgIC8vIDI2LjEgVGhlIFJlZmxlY3QgT2JqZWN0XHJcbiAgICBpZiAoISgnUmVmbGVjdCcgaW4gZ2xvYmFsKSB8fCBPVkVSUklERV9OQVRJVkVfRk9SX1RFU1RJTkcpXHJcbiAgICAgIGdsb2JhbC5SZWZsZWN0ID0ge307XHJcblxyXG4gICAgLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkgKCB0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIFJlZmxlY3QsICdhcHBseScsXHJcbiAgICAgIGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XHJcbiAgICAgICAgaWYgKCFJc0NhbGxhYmxlKHRhcmdldCkpIHRocm93IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCAoIHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdIClcclxuICAgIGRlZmluZShcclxuICAgICAgUmVmbGVjdCwgJ2NvbnN0cnVjdCcsXHJcbiAgICAgIGZ1bmN0aW9uIGNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QpIHtcclxuICAgICAgICByZXR1cm4gX19jb25zKHRhcmdldCwgYXJndW1lbnRzTGlzdCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5ICggdGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIFJlZmxlY3QsICdkZWZpbmVQcm9wZXJ0eScsXHJcbiAgICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCAoXykge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkgKCB0YXJnZXQsIHByb3BlcnR5S2V5IClcclxuICAgIGRlZmluZShcclxuICAgICAgUmVmbGVjdCwgJ2RlbGV0ZVByb3BlcnR5JyxcclxuICAgICAgZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LG5hbWUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZGVsZXRlIHRhcmdldFtuYW1lXTtcclxuICAgICAgICAgIHJldHVybiAhSGFzT3duUHJvcGVydHkodGFyZ2V0LCBuYW1lKTtcclxuICAgICAgICB9IGNhdGNoIChfKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUgKCB0YXJnZXQgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBSZWZsZWN0LCAnZW51bWVyYXRlJyxcclxuICAgICAgZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xyXG4gICAgICAgIHRhcmdldCA9IFRvT2JqZWN0KHRhcmdldCk7XHJcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gRW51bWVyYXRlKHRhcmdldCk7XHJcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyNi4xLjYgUmVmbGVjdC5nZXQgKCB0YXJnZXQsIHByb3BlcnR5S2V5IFsgLCByZWNlaXZlciBdKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBSZWZsZWN0LCAnZ2V0JyxcclxuICAgICAgZnVuY3Rpb24gZ2V0KHRhcmdldCwgbmFtZSwgcmVjZWl2ZXIpIHtcclxuICAgICAgICB0YXJnZXQgPSBUb09iamVjdCh0YXJnZXQpO1xyXG4gICAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XHJcbiAgICAgICAgcmVjZWl2ZXIgPSAocmVjZWl2ZXIgPT09IHVuZGVmaW5lZCkgPyB0YXJnZXQgOiBUb09iamVjdChyZWNlaXZlcik7XHJcbiAgICAgICAgdmFyIGRlc2MgPSBnZXRQcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBuYW1lKTtcclxuICAgICAgICBpZiAoZGVzYyAmJiAnZ2V0JyBpbiBkZXNjKVxyXG4gICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLmNhbGwoZGVzY1snZ2V0J10sIHJlY2VpdmVyKTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0W25hbWVdO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKCB0YXJnZXQsIHByb3BlcnR5S2V5IClcclxuICAgIGRlZmluZShcclxuICAgICAgUmVmbGVjdCwgJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsXHJcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xyXG5cclxuICAgIC8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mICggdGFyZ2V0IClcclxuICAgIGRlZmluZShcclxuICAgICAgUmVmbGVjdCwgJ2dldFByb3RvdHlwZU9mJyxcclxuICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKTtcclxuXHJcbiAgICAvLyAyNi4xLjkgUmVmbGVjdC5oYXMgKCB0YXJnZXQsIHByb3BlcnR5S2V5IClcclxuICAgIGRlZmluZShcclxuICAgICAgUmVmbGVjdCwgJ2hhcycsXHJcbiAgICAgIGZ1bmN0aW9uIGhhcyh0YXJnZXQsbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmcobmFtZSkgaW4gVG9PYmplY3QodGFyZ2V0KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSAodGFyZ2V0KVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBSZWZsZWN0LCAnaXNFeHRlbnNpYmxlJyxcclxuICAgICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSk7XHJcblxyXG4gICAgLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXMgKCB0YXJnZXQgKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBSZWZsZWN0LCAnb3duS2V5cycsXHJcbiAgICAgIGZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IFRvT2JqZWN0KHRhcmdldCk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyAoIHRhcmdldCApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIFJlZmxlY3QsICdwcmV2ZW50RXh0ZW5zaW9ucycsXHJcbiAgICAgIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xyXG4gICAgICAgIHRyeSB7IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoXykgeyByZXR1cm4gZmFsc2U7IH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjYuMS4xMyBSZWZsZWN0LnNldCAoIHRhcmdldCwgcHJvcGVydHlLZXksIFYgWyAsIHJlY2VpdmVyIF0gKVxyXG4gICAgZGVmaW5lKFxyXG4gICAgICBSZWZsZWN0LCAnc2V0JyxcclxuICAgICAgZnVuY3Rpb24gc2V0KHRhcmdldCwgbmFtZSwgdmFsdWUsIHJlY2VpdmVyKSB7XHJcbiAgICAgICAgdGFyZ2V0ID0gVG9PYmplY3QodGFyZ2V0KTtcclxuICAgICAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xyXG4gICAgICAgIHJlY2VpdmVyID0gKHJlY2VpdmVyID09PSB1bmRlZmluZWQpID8gdGFyZ2V0IDogVG9PYmplY3QocmVjZWl2ZXIpO1xyXG4gICAgICAgIHZhciBkZXNjID0gZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgbmFtZSk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGlmIChkZXNjICYmICdzZXQnIGluIGRlc2MpXHJcbiAgICAgICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLmNhbGwoZGVzY1snc2V0J10sIHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCAoXykge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mICggdGFyZ2V0LCBwcm90byApXHJcbiAgICBkZWZpbmUoXHJcbiAgICAgIFJlZmxlY3QsICdzZXRQcm90b3R5cGVPZicsXHJcbiAgICAgIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHByb3RvO1xyXG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSA9PT0gcHJvdG87XHJcbiAgICAgICAgfSBjYXRjaChfKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgfSgpKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMjYuMiBQcm94eSBPYmplY3RzXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8vIE5vdCBwb2x5ZmlsbGFibGUuXHJcblxyXG59KHNlbGYpKTtcclxuXHJcbi8vIFRoaXMgaGVscGVyIGlzIGRlZmluZWQgb3V0c2lkZSB0aGUgbWFpbiBzY29wZSBzbyB0aGF0IHRoZSB1c2Ugb2ZcclxuLy8gJ2V2YWwnIGRvZXMgbm90IHRhaW50IHRoZSBzY29wZSBmb3IgbWluaWZpZXJzLlxyXG5mdW5jdGlvbiBfX2NvbnModCwgYSkge1xyXG4gIHJldHVybiBldmFsKCduZXcgdCgnICsgYS5tYXAoZnVuY3Rpb24oXywgaSkgeyByZXR1cm4gJ2FbJyArIGkgKyAnXSc7IH0pLmpvaW4oJywnKSArICcpJyk7XHJcbn1cclxuIiwicmVxdWlyZShcIi4uL2xpYi9yaFwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvdXRpbHMvdXRpbHNcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2NvbW1vbi9xdWVyeVwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvdXRpbHMvdXJsX3V0aWxzXCIpXHJcbiIsImxldCByaCA9IHJlcXVpcmUoJy4uLy4uL2xpYi9yaCcpXHJcblxyXG5jbGFzcyBPbkxvYWQge1xyXG4gIGNvbnN0cnVjdG9yKHdpZGdldCwgbm9kZSwgcmF3RXhwcikge1xyXG4gICAgbGV0IHtjYWxsYmFja30gPSB3aWRnZXQucmVzb2x2ZVJhd0V4cHJXaXRoVmFsdWUocmF3RXhwcilcclxuICAgIG5vZGUub25sb2FkID0gKCkgPT4gY2FsbGJhY2suY2FsbCh3aWRnZXQpXHJcbiAgfVxyXG59XHJcblxyXG5yaC5yZWdpc3RlckRhdGFBdHRyKCdvbmxvYWQnLCBPbkxvYWQpXHJcbiIsInJlcXVpcmUoXCIuLi9saWIvcmhcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL3V0aWxzL3BhcnNlX3V0aWxzXCIpXHJcbnJlcXVpcmUoXCIuLi8uLi9sZW5pZW50X3NyYy91dGlscy9kZWJ1Z191dGlsc1wiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvdXRpbHMvZXZlbnRfdXRpbHNcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL3V0aWxzL21vZGVsX3V0aWxzXCIpXHJcbnJlcXVpcmUoXCIuLi8uLi9sZW5pZW50X3NyYy91dGlscy91bmljb2RlX3V0aWxzXCIpXHJcbnJlcXVpcmUoXCIuLi8uLi9sZW5pZW50X3NyYy9jb21tb24vZGVidWdcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2NvbW1vbi9jb25zdHNcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2NvbW1vbi9tb2RlbFwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvY29tbW9uL2RhdGFfdXRpbFwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvY29tbW9uL2d1YXJkXCIpXHJcbnJlcXVpcmUoXCIuLi8uLi9sZW5pZW50X3NyYy9jb21tb24vcGx1Z2luXCIpXHJcbnJlcXVpcmUoXCIuLi8uLi9sZW5pZW50X3NyYy9jb21tb24vd2lkZ2V0XCIpXHJcbnJlcXVpcmUoXCIuLi8uLi9sZW5pZW50X3NyYy9jb21tb24vaW5pdFwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvY29tbW9uL21lc3NhZ2VcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2NvbW1vbi9pZnJhbWVcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2NvbW1vbi9zdG9yYWdlXCIpXHJcbnJlcXVpcmUoXCIuLi8uLi9sZW5pZW50X3NyYy9jb21tb24vcmVzcG9uc2l2ZVwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvY29tbW9uL3NjcmVlblwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvY29tbW9uL25vZGVfaG9sZGVyXCIpXHJcbnJlcXVpcmUoXCIuLi8uLi9sZW5pZW50X3NyYy9jb21tb24vY29udHJvbGxlclwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvY29tbW9uL2h0dHBcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2RhdGFfYXR0cmlidXRlcy9kYXRhX2F0dHJcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2RhdGFfYXR0cmlidXRlcy9yZXNpemVcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2RhdGFfYXR0cmlidXRlcy90YWJsZVwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvZGF0YV9hdHRyaWJ1dGVzL3RhYmxlX3JlY3Vyc2l2ZVwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvd2lkZ2V0cy9nbG9iYWxcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL3dpZGdldHMvbGlzdFwiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvd2lkZ2V0cy9kYXRhX3dpZGdldHNcIilcclxucmVxdWlyZShcIi4vZGF0YV9hdHRyaWJ1dGVzL29ubG9hZFwiKVxyXG5yZXF1aXJlKFwiLi91dGlscy9vcGVyYXRvcl9zZWFyY2hcIilcclxucmVxdWlyZShcIi4vdXRpbHMvY29sbGVjdGlvbnNcIilcclxucmVxdWlyZShcIi4uLy4uL2xlbmllbnRfc3JjL2luZGlnby9oYW5kbGVyc1wiKVxyXG5yZXF1aXJlKFwiLi4vLi4vbGVuaWVudF9zcmMvY29tbW9uL3Joc1wiKVxyXG4iLCJyZXF1aXJlKFwiLi9zaGltL2FycmF5XCIpXHJcbnJlcXVpcmUoXCIuL3NoaW0vb2JqZWN0XCIpXHJcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5pbmNsdWRlcykge1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdpbmNsdWRlcycsIHtcclxuICAgIHZhbHVlOiBmdW5jdGlvbihzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpICE9PSAtMVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcbiIsIi8vaHR0cHM6Ly90YzM5LmVzL3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllcy9cclxuLy9odHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcclxuaWYgKCFPYmplY3QuZW50cmllcykge1xyXG4gIE9iamVjdC5lbnRyaWVzID0gZnVuY3Rpb24oIG9iaiApe1xyXG4gICAgdmFyIG93blByb3BzID0gT2JqZWN0LmtleXMoIG9iaiApLFxyXG4gICAgICBpID0gb3duUHJvcHMubGVuZ3RoLFxyXG4gICAgICByZXNBcnJheSA9IG5ldyBBcnJheShpKTsgLy8gcHJlYWxsb2NhdGUgdGhlIEFycmF5XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgIHJlc0FycmF5W2ldID0gW293blByb3BzW2ldLCBvYmpbb3duUHJvcHNbaV1dXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHJlc0FycmF5O1xyXG4gIH07XHJcbn1cclxuIiwibGV0IHJoID0gcmVxdWlyZSgnLi4vLi4vbGliL3JoJylcclxubGV0IF8gPSByaC5fXHJcblxyXG5fLm1heCA9IGFyciA9PiB7XHJcbiAgbGV0IG1heCA9IGFyciAmJiBhcnJbMF1cclxuICBfLmVhY2goYXJyLCBpdGVtID0+IHtcclxuICAgIGlmKGl0ZW0gPiBtYXgpIHtcclxuICAgICAgbWF4ID0gaXRlbVxyXG4gICAgfVxyXG4gIH0pXHJcbiAgcmV0dXJuIG1heFxyXG59XHJcblxyXG5fLm1pbiA9IGFyciA9PiB7XHJcbiAgbGV0IG1pbiA9IGFyciAmJiBhcnJbMF1cclxuICBfLmVhY2goYXJyLCBpdGVtID0+IHtcclxuICAgIGlmKGl0ZW0gPCBtaW4pIHtcclxuICAgICAgbWluID0gaXRlbVxyXG4gICAgfVxyXG4gIH0pXHJcbiAgcmV0dXJuIG1pblxyXG59XHJcbiIsImxldCByaCA9IHJlcXVpcmUoJy4uLy4uL2xpYi9yaCcpXHJcbmxldCBfID0gcmguX1xyXG5fLmlzQU5EID0gKCBhX3N0ck9wLCBlbmFibGVPcGVyYXRvclNlYXJjaCApID0+e1xyXG4gIHJldHVybiAoZW5hYmxlT3BlcmF0b3JTZWFyY2ggJiZcclxuICAgICAgICAgICAgKGFfc3RyT3AgPT09IFwiYW5kXCIgfHwgYV9zdHJPcCA9PT0gXCImXCJ8fCBhX3N0ck9wID09PSBcIkFORFwiKSl8fFxyXG4gICAgICAgICAgICBhX3N0ck9wID09PSBcIlxcdTAwQUNhbmRcXHUwMEFDXCIgO1xyXG59XHJcblxyXG5fLmlzT1IgPSAoIGFfc3RyT3AsIGVuYWJsZU9wZXJhdG9yU2VhcmNoICkgPT57XHJcbiAgcmV0dXJuICggZW5hYmxlT3BlcmF0b3JTZWFyY2ggJiZcclxuXHRcdFx0XHQoYV9zdHJPcCA9PT1cIm9yXCIgfHwgYV9zdHJPcCA9PT0gXCJ8XCIgfHwgYV9zdHJPcCA9PT0gXCJPUlwiKSk7XHJcbn1cclxuXHJcbl8uaXNOT1QgPSAoIGFfc3RyT3AsIGVuYWJsZU9wZXJhdG9yU2VhcmNoKSA9PntcclxuICByZXR1cm4gIGVuYWJsZU9wZXJhdG9yU2VhcmNoICYmXHJcblx0XHRcdFx0XHRcdChhX3N0ck9wID09PSBcIm5vdFwiIHx8IGFfc3RyT3AgPT09IFwiflwiIHx8IGFfc3RyT3AgPT09IFwiTk9UXCIpXHJcbn1cclxuXHJcbl8uaXNPcGVyYXRvciA9ICggc3RyT3AsIGVuYWJsZU9wZXJhdG9yU2VhcmNoICkgPT57XHJcbiAgaWYgKCBzdHJPcCA9PT0gXCJcXHUwMEFDYW5kXFx1MDBBQ1wifHxcclxuICAgICAgICAoZW5hYmxlT3BlcmF0b3JTZWFyY2ggJiZcclxuXHRcdFx0XHQoc3RyT3AgPT09IFwiYW5kXCIgfHwgc3RyT3AgPT09IFwib3JcIiB8fCBzdHJPcCA9PT0gXCJub3RcIiApKSl7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2UgICAgICBcclxufVxyXG4iLCJyZXF1aXJlKCcuLi9mcmFtZXdvcmtzL3NoaW0nKVxyXG5yZXF1aXJlKCdqcy1wb2x5ZmlsbHMvZXM1JylcclxucmVxdWlyZSgnanMtcG9seWZpbGxzL2VzNicpXHJcblxyXG5pZiAoZ2xvYmFsLnJoID09PSB1bmRlZmluZWQpIHtcclxuICBnbG9iYWwucmggPSB7fTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwucmhcclxuIl19
