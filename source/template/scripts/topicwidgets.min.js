/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2018 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/

var PAGENODE = "item";
var BOOKNODE = "book";
var URLNODE = "remoteitem";
var PROJNODE = "project";
var INDEXNODE = "index";
var DATANODE = "data";
var CHUNKINFONODE = "chunkinfo";
var KEYNODE = "key";
var TOPICNODE = "topic";
var SCREENSNODE = "screens";
var GLOSSARYNODE = "glossary";
var ENTRYNODE = "entry";
var REMOTENODE = "remote";
var BREADCRUMBSNODE = "breadcrumbs";
var ITEMNODE = "item";
var CSHINFONODE = "csh-info";
var WINDOWLISTNODE = "windowlist";
var WINDOWNODE = "window";
var XCOORD = "x";
var YCOORD = "y";
var WIDTH = "width";
var HEIGHT = "height";
var OPTIONS = "options";
var RHHIGHLIGHT = "rhhl";

var REF = "ref";
var MASTERPROJECT = "MasterProject";
var CHILDID = "mergedchildid";

var LOADCOMPLETE = "rhloadcomplete";
var COOKIESPAGE = "access_cookies.htm";
var COOKIESPAGEID = "rhcookiereadwrite";

var DEFAULTURL = "defaulturl";
var MINWIDTH = "minwidth";
var MAXWIDTH = "maxwidth";
var MINHEIGHT = "minheight";
var MAXHEIGHT = "maxheight";
var BROWSERAGENT = "browseragent";
var FOLDER = "folder";
var VALUE = "value";
var DEFAULT = "default";
var RHMSWINNAME = "RHMSWINNAME";
var MAPNUM = "mapnum";
var MAPID = "mapid";
var TOPICURL = "topicurl";
var BCID = "#bc-";
var TOCCHILDIDPREFIX = "@";
var IDXLOADINGDIVID = "rhidxloadingdivid";
var GLOLOADINGDIVID = "rhgloloadingdivid";

var CSHMODE = "1";
var NONCSHMODE = "0";
var SHOWINCSHMODE = "CSH";
var SHOWINNONCSHMODE = "NONCSH";

var TRUESTR = "1";
var FALSESTR = "0";

var RHMAPID = "rhmapid";
var RHMAPNO = "rhmapno";
var RHWINDOW = "rhwnd";
var RHCSHMODE = "rhcsh";
var RHNEWWINDOW = "rhnewwnd";
var RHANDSEARCH = "rhandsearch";
var RHSEARCHCOUNT = "rhsearchcount";
var RHHIGHLIGHTTEXTCOLOR = "rhhltxtcol";
var RHHIGHLIGHTBGCOLOR = "rhhlbgcol";

var DEFAULTXTHIGHLIGHTCOLOR = "#000000";
var DEFAULTBGHIGHLIGHTCOLOR = "#b2b4bf";

var WINLOCATION=0x01;		/*need location bar?*/
var WINMENUBAR=0x02;		/*need menubar?*/		
var WINRESIZABLE=0x04;	/*resizable window?*/
var WINTOOLBAR=0x08;		/*need toolbar?*/
var WINSTATUS=0x10;		/*need statusbar?*/
var WINSCROLLBARS=0x20;	/*need scrollbars?*/

var NAME = "name";
var URL = "url";
var SRC = "src";
var TARGET = "target";
var CHILDNAME = "childname";
var DATA_RHTAGS = "data-rhtags";


var TREEITEMCLASS = "treeitem";
var LISTITEMCLASS = "listitem";
var UNCLICKABLECLASS = "unclickable";
var UNSELECTABLECLASS = "unselectable";
var NOLINKANCHORCLASS = "nolink";
var HLISTCLASS = "hlist";
var HANDCURSORCLASS = "handcursor";


var DATASRC = "data-src";
var DATAURL = "data-url";
var DATAPATH = "data-path";
var DATAROOTPATH = "data-rootpath";
var DATAITEMTYPE = "data-type";
var DATAHOVERIMGSRC = "data-hoverimgsrc";
var DATAIMGSRC = "data-imgsrc";
var DATASELIMGSRC = "data-selimgsrc";
var DATATERM = "data-term";
var DATAPANEID = "data-contentid";
var DATATABBUTTONID = "data-tabid";
var DATACLASS = "data-class";
var DATACLASSHOVER = "data-classhover";
var DATACLASSSEL = "data-classsel";
var DATASHOWIN = "data-showin";
var DATAPH = "data-placeholder";

var BOOKDELIM = ".";
var PAGEDELIM = "_";
var TABBUTTONID = "rhtabbuttonid";

var ITEMTYPEBOOKCLOSED	= 0;
var ITEMTYPEBOOKOPEN	= 1;
var ITEMTYPEPAGE		= 2;
var ITEMTYPEURL			= 3;
var ITEMTYPELOADING		= 4;
var ITEMTYPEBOOKCHILDS	= 5;
var ITEMTYPEICON		= 6;
var ITEMTYPEKW			= 7;
var ITEMTYPELINK		= 8;
var ITEMTYPESUBKW		= 9;
var ITEMTYPECATEGORY	= 10;
var ITEMTYPETERM		= 11;
var ITEMTYPEDEF			= 12;
var ITEMTYPEMAPNO		= 13;
var ITEMTYPEMAPID		= 14;

var SCR_NONE		= -1;
var SCR_INIT		= 0;
var SCR_CHILD_TOC	= 1;
var SCR_PARENT_TOC	= 2;
var SCR_CHILD_IDX	= 3;
var SCR_PARENT_IDX	= 4;
var SCR_CHILD_GLO	= 5;
var SCR_PARENT_GLO	= 6;
var SCR_PARENT_BC	= 7;
var SCR_PARENT_FTS	= 8;
var SCR_CHILD_FTS	= 9;
var SCR_PARENT_TOCSYNC = 10;
var SCR_CHILD_CSH	= 11;

var SEARCHPAGEWIDTHRATIO = 70;
var ECS_NONE			= 0;
var ECS_FTSREADY		= 1;
var ECS_SEARCHING		= 2;
var ECS_FATALERROR		= 3;
var ECS_CANCELED		= 4;
var ECS_SEARCHFAILED	= 5;
var ECS_FOUND			= 6;

var READ_REQ			= 1;
var SAVE_REQ			= 2;

var JS_TAGTOKEN			= 1;
var JS_TEXTTOKEN		= 3;

var LINK_NAME_MACRO = "{%LINK_NAME%}";
var LINK_URL_MACRO = "{%LINK_URL%}";
var SEARCH_SUMMARY_MACRO = "{%SEARCH_SUMMARY%}";
var SEARCH_URL_MACRO = "{%SEARCH_URL%}";
var ICON_MACRO = "{%ICON%}";

// Keys used in URL
var TOPIC_KEY			= "t";
var UIMODE_KEY			= "ux";
var RHSEARCHSTR 		= "rhsearch";
var RHSYNSTR			= "rhsyns";
var RHHIGHLIGHTTERM		= "rhhlterm";
var TOCID 				= "rhtocid";

;

var gbBlockIOSScaling = 1;
var gbPreviewMode = 0;
var gRhEvtFuncsList = new Array;
var gHost = null;
var gHostPath = "/";
var gbRHLoadComplete = false;

addRhLoadCompleteEvent(initInputTextBoxes);

function blockIOSScaling() {
	var metaTagsList = document.getElementsByTagName('meta');
	var i;
	if (navigator.userAgent.indexOf('iPad') != -1 || navigator.userAgent.indexOf('iPhone') != -1) {
		var contentString = "user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0";
		for (i = 0; i < metaTagsList.length; i++) {
			if (metaTagsList[i].name == "viewport")
				metaTagsList[i].content = contentString;
		}
		if (i == metaTagsList.length) {
			var metaTag = document.createElement('meta');
			metaTag.setAttribute("name", "viewport");
			metaTag.setAttribute("content", contentString);
			var headTags = document.getElementsByTagName('head');
			headTags[0].appendChild(metaTag);
		}
	}
}
function getUrlParamString(url) {
	var paramstr = "";
	if (url == null || url == 'undefined')
		url = document.location.href;
	if (url.indexOf("?") != -1)
		paramstr = getUrlWithoutBookmark(url.substring(url.indexOf("?")));
	return paramstr;
}
function getUrlParameter(paramName, url) {
	if (url == null || url == 'undefined')
		url = document.location.href;
	paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
	var regexS = "[\\?&#]" + paramName + "=([^&#]*)";
	var regex = new RegExp(regexS);
	var results = regex.exec(url);
	if (results == null)
		return "";
	else
		return results[1] && decodeURIComponent(results[1]);
}
function getUrlBookmark(url) {
	var bookmark = "";
	if (url == null || url == 'undefined')
		url = document.location.href;
	if (url.indexOf("#") != -1)
		bookmark = url.substring(url.indexOf("#"));
	return bookmark;
}
function getUrlWithoutBookmark(url) {
	if (url == null || url == 'undefined')
		url = document.location.href;

	var urlwithoutbookmark = url;

	if (url.indexOf("#") != -1)
		urlwithoutbookmark = url.substring(0, url.indexOf("#"));
	return urlwithoutbookmark;
}
function getUrlWithoutParameterAndBookMark(url) {
	if (url == null || url == 'undefined')
		url = document.location.href;

	var urlwithoutparameter = url;

	if (url.indexOf("?") != -1)
		urlwithoutparameter = url.substring(0, url.indexOf("?"));
	return getUrlWithoutBookmark(urlwithoutparameter);
}
function GetSearchTextFromURL(bRemoveSlash) {
	return getUrlParameter(RHSEARCHSTR);
}

function GetSynonymsFromURL() {
	var strQuery = getUrlParameter(RHSYNSTR);
	return strQuery.split(" ");
}

function GetHighlightTextFromURL() {
	var term = getUrlParameter(RHHIGHLIGHTTERM);
	if (term && term.startsWith('"') && term.substring(1) && term.substring(1).endsWith('"')){ 
		return [term]
	}
	return (term === "") ? [] : term.split(" ");
}

function lTrim(str) {
	return str.replace(/^\s+/, '');
}

function MhStack() {
	var container = new Array;

	this.getLength = function () {
		return (container.length - frontOffset);
	}
	this.isEmpty = function () {
		return (container.length == 0);
	}
	this.push = function (elem) {
		container.push(elem);
	}
	this.pop = function () {
		if (this.isEmpty()) return null;
		var elem = container[container.length - 1];
		container.splice(container.length - 1, 1);
		return elem;
	}
	this.peek = function () {
		if (this.isEmpty()) return null;
		var elem = container[container.length - 1];
		return elem;
	}
}

function MhQueue() {
	var container = new Array;
	var frontOffset = 0;
	this.getLength = function () {
		return (container.length - frontOffset);
	}
	this.isEmpty = function () {
		return (container.length == 0);
	}
	this.enqueue = function (elem) {
		container.push(elem);
	}
	this.dequeue = function () {
		if (this.isEmpty()) return undefined;
		var elem = container[frontOffset];
		frontOffset++;
		if (frontOffset * 2 >= container.length) {
			container = container.slice(frontOffset);
			frontOffset = 0;
		}
		return elem;
	}
	this.peek = function () {
		if (container.length > 0)
			return container[frontOffset];
		return undefined;
	}
}

function getChildElementsByTagName(parentNode, tagName) {
	if (parentNode == null || tagName == null || tagName == "" || parentNode.nodeType != JS_TAGTOKEN)
		return null;
	var childNodes = parentNode.childNodes;
	var childNodesArr = new Array;
	var len = childNodes.length;
	for (var i = 0; i < len; i++) {
		var childNode = childNodes[i];
		if (childNode.nodeType == JS_TAGTOKEN && childNode.nodeName.toLowerCase() == tagName.toLowerCase())
			childNodesArr[childNodesArr.length] = childNode;
	}
	return childNodesArr;
}

function trimString(str) {
	str = str.replace(/^\s+/, '');
	for (var i = str.length - 1; i >= 0; i--) {
		if (/\S/.test(str.charAt(i))) {
			str = str.substring(0, i + 1);
			break;
		}
	}
	return str;
}

function objCookie(value, bPersistent) {
	this.value = value;
	this.bPersistent = bPersistent;
}

function onTextBoxFocus() {
	var placeholderText = this.getAttribute(DATAPH);
	if (trimString(this.value) == placeholderText)
		this.value = "";
}
function onTextBoxBlur() {
	if (trimString(this.value).length == 0) {
		var placeholderText = this.getAttribute(DATAPH);
		if (placeholderText != null)
			this.value = placeholderText;
	}
}
function initInputTextBoxes() {
	var searchText = GetSearchTextFromURL(true);
	var inputs = document.getElementsByTagName('input');
	var len = inputs.length;
	var i=0;
	for(i=0; i<len; i++)
	{
		var searchAttr = inputs[i].getAttribute('data-search');
		if(searchAttr != null && searchAttr != 'undefined' && searchAttr == 'true' && searchText != "")
			inputs[i].value = searchText;


		placeholderText = inputs[i].getAttribute(DATAPH);
		if(placeholderText != null)
		{
			if(gbIE5 && !gbIE10)
			{
				if(inputs[i].value == 'undefined' || inputs[i].value == "")
					inputs[i].value = placeholderText;
			}
			else
				inputs[i].setAttribute("placeholder", placeholderText);
		}


		if(gbIE5 && !gbIE10)
		{
			if(inputs[i].addEventListener)
			{
				var input = inputs[i];
				input.addEventListener('focus', onTextBoxFocus, false);
				input.addEventListener('blur', onTextBoxBlur, false);
			}
		}
	window.rh.model.publish(window.rh.consts('KEY_SEARCH_TERM'), searchText);
	}
}

function isTouchDevice() {
	return "ontouchstart" in window;
}

////BreadCrumb functions Start
var gBreadCrumbInfo = new Array;
var gBCId = 0;
function BreadCrumbInfo(relHomePage, styleInfo, separator, strHome, strHomePath) {
	this.relHomePage = relHomePage;
	this.styleInfo = styleInfo;
	this.separator = separator;
	this.strHome = strHome;
	this.strHomePath = strHomePath;
	this.bcLinks = [];
}

function AddMasterBreadcrumbs(relHomePage, styleInfo, separator, strHome, strHomePath) {
	document.write("<span id=\"brseq" + gBCId + "\" ></span>");
	gBreadCrumbInfo[gBCId] = new BreadCrumbInfo(relHomePage, styleInfo, separator, strHome, strHomePath);
	gBCId++;
	addRhLoadCompleteEvent(UpdateBreadCrumbsMarker);
}

function UpdateBreadCrumbsMarker() {
	if (gBreadCrumbInfo.length > 0) {
		if (gbPreviewMode)
			writeBreadCrumbs();
		else
			loadParentDataForSyncing(gCommonRootRelPath, SCR_PARENT_BC);
	}
}

function writeBreadCrumbs() {
	for (var i = 0; i < gBCId; i++) {
		var bHomeFound = false;
		var strTrail = "";
		if (gBreadCrumbInfo[i].bcLinks.length == 0) {
			if (gBreadCrumbInfo[i].styleInfo == "breadcrumbs")
				strTrail = "<a class=\"" + gBreadCrumbInfo[i].styleInfo + "\"" + " href=\"" + gBreadCrumbInfo[i].strHomePath + "\">" + gBreadCrumbInfo[i].strHome + "</a> " + ((gBreadCrumbInfo[i].strHome == "") ? "" : gBreadCrumbInfo[i].separator) + " ";
			else
				strTrail = "<a style=\"" + gBreadCrumbInfo[i].styleInfo + "\"" + " href=\"" + gBreadCrumbInfo[i].strHomePath + "\">" + gBreadCrumbInfo[i].strHome + "</a> " + ((gBreadCrumbInfo[i].strHome == "") ? "" : gBreadCrumbInfo[i].separator) + " ";
		}
		else {
			var len = gBreadCrumbInfo[i].bcLinks.length;
			var bcName = "";
			for (var j = len - 1; j >= 0; j--) {
				if (gBreadCrumbInfo[i].bcLinks[j].firstEntry == true) {
					if (bHomeFound)
						continue;
					else
						bHomeFound = true;
				}

				bcName = gBreadCrumbInfo[i].bcLinks[j].name;

				if (gBreadCrumbInfo[i].bcLinks[j].strLink == "") {
					strTrail += bcName + " " + gBreadCrumbInfo[i].separator + " ";
				}
				else {
					if (gBreadCrumbInfo[i].styleInfo == "breadcrumbs")
						strTrail += "<a class=\"" + gBreadCrumbInfo[i].styleInfo + "\"" + " href=\"" + gBreadCrumbInfo[i].bcLinks[j].strLink + "\">" + bcName + "</a> " + gBreadCrumbInfo[i].separator + " ";
					else
						strTrail += "<a style=\"" + gBreadCrumbInfo[i].styleInfo + "\"" + " href=\"" + gBreadCrumbInfo[i].bcLinks[j].strLink + "\">" + bcName + "</a> " + gBreadCrumbInfo[i].separator + " ";
				}
			}
		}
		var brselem = document.getElementById("brseq" + i);
		brselem.innerHTML = strTrail;
	}
}

////BreadCrumb functions End

function addEvent(obj, type, func) {
	if (obj == null || obj == 'undefined')
		return;
	if (obj.addEventListener)
		obj.addEventListener(type, func, false);
}
function removeEvent(obj, type, func) {
	if (obj == null || obj == 'undefined')
		return;
	if (obj.removeEventListener)
		obj.removeEventListener(type, func, false);
}
function fireEvent(obj, type) {
	if (obj == null || obj == 'undefined')
		return;
	if (document.createEventObject && obj != window) {
		var evt = document.createEventObject();
		return obj.fireEvent('on' + type, evt)
	}
	else if (document.createEvent && obj.dispatchEvent) {
		var evt = document.createEvent("HTMLEvents");
		evt.initEvent(type, true, true); // event type,bubbling,cancelable
		return !obj.dispatchEvent(evt);
	}
}
function preventEvent(e) {
	if (e != null) {
		if (e.preventDefault)
			e.preventDefault();
		else
			e.returnValue = false;
	}
}
function addRhLoadCompleteEvent(func) {
	if (gbRHLoadComplete)
		func();
	else
		gRhEvtFuncsList.push(func);
}
function fireRhLoadCompleteEvent() {
	gbRHLoadComplete = true;
	var len = gRhEvtFuncsList.length;
	for (var i = 0; i < len; i++)
		gRhEvtFuncsList[i]();
	gRhEvtFuncsList.splice(0, gRhEvtFuncsList.length);
	window.rh.model.publish(window.rh.consts('EVT_PROJECT_LOADED'), true);
}
function patchInputForSubmit(input, func) {
	var formElem = document.createElement('form');
	formElem.setAttribute('method', 'POST');
	if (formElem.addEventListener)
		formElem.addEventListener('submit', func, false);
	else if (formElem.attachEvent)
		formElem.attachEvent('onsubmit', func, false);
	var parent = input.parentNode;
	parent.insertBefore(formElem, input);
	if (input.onkeydown)
		input.onkeydown = null;
	parent.removeChild(input);
	formElem.appendChild(input);
}
;

//	MultiscreenHelp Help 1.0.0
var gsFileName="";
var gsDivName="";
var xmlDoc=null;
var sdocPath=null;
var gsInsertBeforeEndHTML="";
var sReplaceStringsSrc=new Array();
var gsDivName="dataDiv";
var gnLoadDivNum=0;
var xmlHttp=null;
sReplaceStringsSrc[0]="&amp;";
sReplaceStringsSrc[1]="&gt;";
sReplaceStringsSrc[2]="&lt;";
sReplaceStringsSrc[3]="&quot;";
sReplaceStringsSrc[4]=String.fromCharCode(8364);
sReplaceStringsSrc[5]="&nbsp;";

var sReplaceStringsDst=new Array();
sReplaceStringsDst[0]="&";
sReplaceStringsDst[1]=">";
sReplaceStringsDst[2]="<";
sReplaceStringsDst[3]="\"";
sReplaceStringsDst[4]=String.fromCharCode(128);
sReplaceStringsDst[5]=" ";
var goHighLighted=null;

function _getRelativePath(strParentPath,strCurrentPath)
{
	if(_isAbsPath(strCurrentPath)) return _getPath(strCurrentPath);
	strParentPath=_replaceSlash(strParentPath);
	strParentPath=_getPath(strParentPath);
	strCurrentPath=_replaceSlash(strCurrentPath);
	strCurrentPath=_getPath(strCurrentPath);
	for(var i=0;i<strParentPath.length&&i<strCurrentPath.length;i++)
	{
		if(strParentPath.charAt(i)!=strCurrentPath.charAt(i))
			break;
	}

	strParentPath=strParentPath.substring(i);
	strCurrentPath=strCurrentPath.substring(i);

	var nPathPos=0;
	while(nPathPos!=-1)
	{
		nPathPos=strParentPath.indexOf("/");
		if(nPathPos!=-1)
		{
			strParentPath=strParentPath.substring(nPathPos+1);
			strCurrentPath="../"+strCurrentPath;
		}
	}
	return strCurrentPath;
}

function _getRelativeFileName(strParentPath,strCurrentPath)
{
	strParentPath=_replaceSlash(strParentPath);
	strParentPath=_getPath(strParentPath);
	strCurrentPath = _replaceSlash(strCurrentPath);
	var lastSlashIdx = 0;
	for(var i=0;i<strParentPath.length&&i<strCurrentPath.length;i++) {
	    if (strParentPath.charAt(i) != strCurrentPath.charAt(i)) {
	        break;
	    }
	    else {
	        if (strParentPath.charAt(i) == '/')
	            lastSlashIdx = i;
	    }
	}

	strParentPath = strParentPath.substring(lastSlashIdx+1);
	strCurrentPath = strCurrentPath.substring(lastSlashIdx+1);

	var nPathPos=0;
	while(nPathPos!=-1)
	{
		nPathPos=strParentPath.indexOf("/");
		if(nPathPos!=-1)
		{
			strParentPath=strParentPath.substring(nPathPos+1);
			strCurrentPath="../"+strCurrentPath;
		}
	}
	return strCurrentPath;
}

function _getFileNameFromPath(strFilePath)
{
	var nPathPos = strFilePath.indexOf("/");
	if(nPathPos != -1)
		return strFilePath.substring(nPathPos+1, strFilePath.length);
	else
		return strFilePath;
}

function _isAbsPathToHost(sPath)
{
	return (sPath.indexOf("/")==0);
}

function _getHost(sPath)
{
	var nPos=sPath.indexOf("//");
	if(nPos>0)
	{
		var nPosx=sPath.indexOf("/",nPos+2);
		if(nPosx>0)
			return sPath.substring(0,nPosx);
		else
			return sPath;
	}
	return sPath;
}

function _getHostNameFromURL(sURL)
{
	var nPos=sURL.indexOf("//");
	if(nPos>0)
	{
		var nPosx=sURL.indexOf("/",nPos+2);
		if(nPosx>0)
			return sURL.substring(nPos+2,nPosx);
		else
			return sURL.substring(nPos, sURL.length);
	}

}

function _getPathFromURL(sURL, aHostName, aPath)
{
	var nPos=sURL.indexOf("//");
	if(nPos>0)
	{
		var nPosx=sURL.indexOf("/",nPos+2);
		if(nPosx>0)
			return sURL.substring(nPosx, sURL.length);
		else
			return "";
	}

}

function _getFullPath(sPath,sRelPath)
{
	if(_isAbsPath(sRelPath))
		return sRelPath;
	else if(_isAbsPathToHost(sRelPath))
		return _getHost(sPath)+sRelPath;
	else if(sRelPath == "./")
		return sPath;
	else
	{
		var nPos=sRelPath.indexOf("./");
		if(nPos==0)
			sRelPath=sRelPath.substring(2, sRelPath.length);
		var sFullPath=sPath;
		var nPathPos=0;
		while(nPathPos!=-1)
		{
			var nPathPos=sRelPath.indexOf("../");
			if(nPathPos!=-1)
			{
				sRelPath=sRelPath.substring(nPathPos+3);
				sFullPath=sFullPath.substring(0,sFullPath.length-1);
				var nPos2=sFullPath.lastIndexOf("/");
				if(nPos2!=-1)
					sFullPath=sFullPath.substring(0,nPos2+1);
				else
					break;
			}
		}
		sFullPath+=sRelPath;
		return sFullPath;
	}
}

function _getFullPathInAIR( sSwfPath, sRelPath)
{
	var retPath = _getFullPath(_getPath(sSwfPath) , sRelPath);
	var retFile = new window.runtime.flash.filesystem.File(retPath);
	return retFile.nativePath;
}

function _isAbsPath(strPath)
{
	var strUpper=strPath.toUpperCase();
	return (strUpper.indexOf(":")!=-1||strUpper.indexOf("\\\\")==0);
}

function _replaceSlash(strURL)
{
	var re=new RegExp("\\\\","g");
	var strReplacedURL=strURL.replace(re,"/");
	return strReplacedURL;
}

function _getPath(strURL)
{
	// remove the search and hash string
	var n=0;
	var n1=strURL.indexOf('#');
	var n2=strURL.indexOf('?');
	if( n1>=0 )
	{
		if( n2>=0 )
				n=(n1>n2)?n2:n1;
		else	n=n1;
	}else
	{
		if( n2>=0 )
				n=n2;
		else	n=strURL.length;
	};
	strURL=strURL.substring(0, n);

	pathpos=strURL.lastIndexOf("/");
	if(pathpos>0)
		return strURL.substring(0,pathpos+1);
	else
		return "";
}

function _isHTTPUrl(strUrl)
{
    strUrl = strUrl.toUpperCase();
    str1 = strUrl.substring(0, 7);
    str2 = strUrl.substring(0, 8);
    if(str1 == "HTTP://" || str1 == "HTTP:\\\\" ||
    str2 == "HTTPS://" || str2 == "HTTPS:\\\\")
        return true;
	else
	{
	    str3 = strUrl.substring(0, 4);
	    if(str3 == "WWW.")
	        return true;
	}
	return false;
}

function _isRemoteUrl(strUrl)
{
    strUrl = strUrl.toUpperCase();
    if(_isHTTPUrl(strUrl))
	{
		var hostName = document.location.hostname;
		if(hostName != "")
		{
			hostName = hostName.toUpperCase();
			if(strUrl.indexOf(hostName) != -1)
				return false;
			else
				return true;
		}
		return true;
	}

    str1 = strUrl.substring(0, 7);
    if (str1 == "MAILTO:")	return true;
    if (str1 == "TELNET:")	return true;
    if (str1 == "GOPHER:")	return true;
    str1 = strUrl.substring(0, 5);
    if (str1 == "FTP://")	return true;
    if (str1 == "NEWS:")	return true;
    //if (str1 == "FILE:")	return true;
    if (str1 == "FTP:\\\\") return true;

    return false;
}

function removeItemFromArray(oArray,i)
{
	if(oArray.length&&i>=0&&i<oArray.length)
	{
		var len=oArray.length;
		for(var s=i;s<len-1;s++)
			oArray[s]=oArray[s+1];
		oArray.length=len-1;
	}
}

function insertItemIntoArray(oArray,i,obj)
{
	if(oArray.length&&i>=0&&i<=oArray.length)
	{
		var len=oArray.length;
		for(var s=len;s>i;s--)
			oArray[s]=oArray[s-1];
		oArray[i]=obj;
	}
}

function loadData(sFileName)
{
	var i=gnLoadDivNum;
	var sName=gsDivName+gnLoadDivNum++;
	loadData_2(sFileName,sName);
}

function loadData_2(sFileName,sDivName)
{
	if(!getElement(sDivName))
	{
		if(!insertDataDiv(sDivName))
		{
			gsFileName=sFileName;
			gsDivName=sDivName;
			return;
		}
	}
	var sHTML="";
	if(gbMac)
		sHTML+="<iframe src=\""+sFileName+"\"></iframe>";
	else
		sHTML+="<iframe style=\"visibility:hidden;width:0;height:0\" src=\""+sFileName+"\"></iframe>";

	var oDivCon=getElement(sDivName);
	if(oDivCon)
	{
		if(gbNav6)
		{
			if(oDivCon.getElementsByTagName&&oDivCon.getElementsByTagName("iFrame").length>0)
			{
				oDivCon.getElementsByTagName("iFrame")[0].src=sFileName;
			}
			else
				oDivCon.innerHTML=sHTML;
		}
		else
			oDivCon.innerHTML=sHTML;
	}
}

function IsHTTPURL(sdocPath)
{
    var bRetVal = true;
    switch(window.location.protocol)
    {
        case "file:":
            bRetVal = false;
            break;
    }
    return bRetVal;
}

function loadDataXML(sFileName,bAsync)
{
try
{
    var bAsyncReq = true;
    if (bAsync != 'undefined')
        bAsyncReq = bAsync;

    var sCurrentDocPath = _getPath(document.location.href);
    sdocPath = _getFullPath(sCurrentDocPath, sFileName);

    var fileName = _getRelativeFileName(sCurrentDocPath, sdocPath);
    xmlJsReader.loadFile(fileName, function (a_xmlDoc, args) {
        if (a_xmlDoc != null)
            putDataXML(a_xmlDoc, sdocPath);
        else
            onLoadXMLError();
    });
}catch(e)
{
    //Do nothing
}
}

function onXMLResponse()
{
    if(xmlHttp)
    {
      if(xmlHttp.readyState == 4)
      {
        xmlDoc = xmlHttp.responseXML;
        if(xmlDoc!=null)
        {
	        putDataXML(xmlDoc,sdocPath);
	    }
	    else
	    {
	        onLoadXMLError();
	    }
      }
    }
}

function initializeData()
{
	if(xmlDoc!=null)
		putDataXML(xmlDoc,sdocPath);
}

function checkState()
{
	if(xmlDoc!=null)
	{
		var state=xmlDoc.readyState;
		if(state==4)
		{
			// engine version uses xmlhttp, xml data in the responseXML
			if( xmlDoc.responseXML!=null )
				xmlDoc=xmlDoc.responseXML;

			var err=xmlDoc.parseError;
			if(err.errorCode==0)
				putDataXML(xmlDoc,sdocPath);
			else
				onLoadXMLError();
		}
	}
}

function insertDataDiv(sName)
{
	var sHTML="";
	if(gbMac)
		sHTML+="<div id="+sName+" style=\"display:none;\"></div>";
	else
		sHTML+="<div id="+sName+" style=\"visibility:hidden\"></div>";
	if((gbIE5||gbNav6||gbSafari3)&&document.body)
		document.body.insertAdjacentHTML("beforeEnd",sHTML);
	else
	{
		gsInsertBeforeEndHTML=sHTML;
		setTimeout("insertWhenBodyReady();",100);
		return false;
	}
	return true;
}

function insertWhenBodyReady()
{
	if(gsInsertBeforeEndHTML=="") return;
	if(document.body)
	{
		document.body.insertAdjacentHTML("beforeEnd",gsInsertBeforeEndHTML);
		gsInsertBeforeEndHTML="";
		loadData_2(gsFileName,gsDivName);
	}
	else
	{
		setTimeout("insertWhenBodyReady();",100);
	}
}

function window_BUnload()
{
	for(var i=0;i<gnLoadDivNum;i++)
	{
		var oDivCon=getElement(gsDivName+i);
		if(oDivCon)
			oDivCon.innerHTML="";
	}
}

function removeThis(obj)
{
	if(obj.parentNode)
		obj.parentNode.removeChild(obj);
	else
		obj.outerHTML="";
}

function getParentNode(obj)
{
	if(obj.parentNode)
		return obj.parentNode;
	else if(obj.parentElement)
		return obj.parentElement;
	return null;
}

function getElement(sID)
{
	if(document.getElementById)
		return document.getElementById(sID);
	else if(document.all)
		return document.all(sID);
	return null;
}

function getChildrenByTag(obj,sTagName)
{
	if(obj.getElementsByTagName)
	{
		var aChildren=new Array();
		var aElements=getElementsByTag(obj,sTagName);
		if(aElements!=null)
		{
			for(var i=0;i<aElements.length;i++)
			{
				if(aElements[i].parentNode==obj)
					aChildren[aChildren.length]=aElements[i];
			}
			return aChildren;
		}
		else
			return new Array();
	}
	else if(obj.children)
		return obj.children.tags(sTagName);
}

function getElementsByTag(obj,sTagName)
{
	if(obj.getElementsByTagName)
		return obj.getElementsByTagName(sTagName);
	else if(obj.all)
		return obj.all.tags(sTagName);
	return null;
}

function _htmlToText(sHTML)
{
	if(sHTML==null) return null;
	var sText=sHTML;
	for(var i=0;i<sReplaceStringsSrc.length;i++)
	{
		var re=new RegExp(sReplaceStringsSrc[i],"g");
		sText=sText.replace(re,sReplaceStringsDst[i]);
	}
	return sText;
}

function _textToHtml_nonbsp(sText)
{
	if(sText==null) return null;
	var sHTML=sText;
	for(var i=0;i<sReplaceStringsSrc.length-1;i++)
	{
		var re=new RegExp(sReplaceStringsDst[i],"g");
		sHTML=sHTML.replace(re,sReplaceStringsSrc[i]);
	}
	return sHTML;
}

function _textToHtml(sText)
{
	if(sText==null) return null;
	var sHTML=sText;
	for(var i=0;i<sReplaceStringsSrc.length;i++)
	{
		var re=new RegExp(sReplaceStringsDst[i],"g");
		sHTML=sHTML.replace(re,sReplaceStringsSrc[i]);
	}
	return sHTML;
}


function getInnerText(obj)
{
	var renbsp2sp=new RegExp("\xa0","g");
	if(obj.innerText)
	{
		var sText=obj.innerText;
		sText=sText.replace(renbsp2sp," ");
		return sText;
	}
	else
	{
		if(obj.nodeValue)
		{
			var sValue=obj.nodeValue;
			sValue=sValue.replace(renbsp2sp," ");
			return sValue;
		}
		else
		{
			var sText="";
			var oChild=obj.firstChild;
			while(oChild!=null)
			{
				sText+=getInnerText(oChild);
				oChild=oChild.nextSibling;
			}
			return sText;
		}
	}

}

function HighLightElement(obj,sHighLightColor,sNormalColor)
{
	if(obj!=null)
	{
		resetHighLight(sNormalColor);
		if (obj.style)
			obj.style.backgroundColor=sHighLightColor;
		goHighLighted=obj;
	}
}

function resetHighLight(sNormalColor)
{
	if(goHighLighted!=null)
	{
		if (goHighLighted.style)
			goHighLighted.style.backgroundColor=sNormalColor;
		goHighLighted=null;
	}
}

function whFont(sName,sSize,sColor,sStyle,sWeight,sDecoration)
{
	this.sName=sName;
	this.sSize=sSize;
	this.sColor=sColor;
	this.sStyle=sStyle;
	this.sWeight=sWeight;
	this.sDecoration=sDecoration;
}

function getFontStyle(oFont)
{
	var sStyle="";
	if(oFont)
	{
		sStyle+="font-family:"+oFont.sName+";";
		sStyle+="font-size:"+oFont.sSize+";";

		sStyle+="font-style:"+oFont.sStyle+";";
		sStyle+="font-weight:"+oFont.sWeight+";";
		sStyle+="text-decoration:"+oFont.sDecoration+";";
		sStyle+="color:"+oFont.sColor+";";
	}
	return sStyle;
}

function _browserStringToText(sBStr)
{
	var sText="";
	// change %xxx back to the real char.
	var nPos=sBStr.indexOf('%');
	while(nPos!=-1)
	{
		sText+=sBStr.substring(0,nPos);
		sBStr=sBStr.substring(nPos+1);
		var sNum="";
		var i=0;
		while(sBStr.charAt(i)>='0'&&sBStr.charAt(i)<='9')
		{
			sNum+=sBStr.charAt(i++);
		}
		if(sNum!=""){
			var nNum=parseInt(sNum,16);
			sText+=String.fromCharCode(nNum);
			sBStr=sBStr.substring(i);
		}
		nPos=sBStr.indexOf('%');
	}
	sText+=sBStr;
	return sText;
}

function IsInternal(urlName)
{
	if(urlName.indexOf(":") == -1 && urlName.indexOf("&#58;")== -1 && urlName.indexOf("//") != 0 &&
			urlName.indexOf("/&#47;") != 0 && urlName.indexOf("&#47;/") != 0 && urlName.indexOf("&#47;&#47;") != 0)
		return true;
	else
		return false;
}

function IsNonAscii(szWord)
{
    var temp;
    for(var iCount=0; iCount<szWord.length;iCount++)
    {
        temp = szWord.charCodeAt(iCount);
        if(temp>128)
            return true;
    }
    return false;

}

function excapeSingleQuotandSlash(str)
{
	if(str==null) return null;
	var nPos=0;
	var sRes="";
	var nPosNew=str.indexOf("\\",nPos);
	while(nPosNew!=-1){
		sRes+=str.substring(nPos,nPosNew+1)+"\\";
		nPos=nPosNew+1;
		nPosNew=str.indexOf("\\",nPos);
	}
	if(nPos<str.length)
		sRes+=str.substring(nPos);
	var re=new RegExp("'","g");
	sRes=sRes.replace(re,"\\'");
	return sRes;
}


function    getClientHeight()
{
    if(gbSafari3)
    {
        return innerHeight;   //this is for safari
    }
    return document.body.clientHeight;

}

function PatchParametersForEscapeChar(sParam)
{
	var sresult = sParam;
	if(gbSafari)
	{
		sresult = sresult.replace(/%3c/gi,"<");
		sresult = sresult.replace(/%3e/gi,">");
	}
	return sresult;
}

var gbWhUtil=true;
;

var S=new Array();
var A=new Array();
var gaFtsStop=["a", "about", "after", "against", "all", "also", "among", "an", "and", "are", "as", "at", "be", "became", "because", "been", "between", "but", "by", "can", "come", "do", "during", "each", "early", "for", "form", "found", "from", "had", "has", "have", "he", "her", "his", "however", "in", "include", "into", "is", "it", "its", "late", "later", "made", "many", "may", "me", "med", "more", "most", "near", "no", "non", "not", "of", "on", "only", "or", "other", "over", "several", "she", "some", "such", "than", "that", "the", "their", "then", "there", "these", "they", "this", "through", "to", "under", "until", "use", "was", "we", "were", "when", "where", "which", "who", "with", "you"];
var gaFtsStem=new Array();
var gbWhLang=false;
var gsSubstrSrch = 0;

S[0]=0
S[1]=0
S[2]=0
S[3]=0
S[4]=0
S[5]=0
S[6]=0
S[7]=0
S[8]=0
S[137]=0
S[131]=0
S[145]=0
S[132]=0
S[146]=0
S[14]=0
S[15]=0
S[16]=0
S[17]=0
S[18]=0
S[19]=0
S[20]=0
S[21]=0
S[22]=0
S[23]=0
S[24]=0
S[25]=0
S[26]=0
S[27]=0
S[28]=0
S[29]=0
S[30]=0
S[31]=0
S[147]=0
S[138]=0
S[127]=0
S[128]=0
S[129]=0
S[130]=0
S[139]=0
S[159]=0
S[148]=0
S[158]=0
S[149]=0
S[140]=0
S[150]=0
S[141]=0
S[136]=0
S[135]=0
S[144]=0
S[157]=0
S[153]=0
S[134]=0
S[156]=0
S[155]=0
S[154]=0
S[152]=0
S[143]=0
S[151]=0
S[142]=0
S[9]=59
S[10]=60
S[11]=61
S[12]=62
S[13]=63
S[133]=64
S[160]=65
S[32]=65
S[96]=67
S[180]=68
S[94]=69
S[175]=70
S[168]=71
S[184]=72
S[95]=73
S[173]=74
S[45]=75
S[44]=76
S[59]=77
S[58]=78
S[33]=79
S[161]=80
S[63]=81
S[191]=82
S[46]=83
S[183]=84
S[39]=85
S[34]=86
S[171]=87
S[187]=88
S[40]=89
S[41]=90
S[91]=91
S[93]=92
S[123]=93
S[125]=94
S[167]=95
S[182]=96
S[169]=97
S[174]=98
S[64]=99
S[42]=100
S[47]=101
S[92]=102
S[38]=103
S[35]=104
S[37]=105
S[176]=106
S[43]=107
S[177]=108
S[247]=109
S[215]=110
S[60]=111
S[61]=112
S[62]=113
S[172]=114
S[124]=115
S[166]=116
S[126]=117
S[164]=118
S[162]=119
S[36]=120
S[163]=121
S[165]=122
S[48]=123
S[185]=124
S[49]=124
S[189]=126
S[188]=127
S[178]=128
S[50]=128
S[179]=130
S[51]=130
S[190]=132
S[52]=133
S[53]=134
S[54]=135
S[55]=136
S[56]=137
S[57]=138
S[97]=139
S[65]=139
S[170]=139
S[193]=139
S[225]=139
S[192]=139
S[224]=139
S[259]=139
S[258]=139
S[194]=139
S[226]=139
S[461]=139
S[462]=139
S[197]=139
S[229]=139
S[228]=139
S[196]=139
S[479]=139
S[478]=139
S[227]=139
S[195]=139
S[481]=139
S[480]=139
S[260]=139
S[261]=139
S[257]=139
S[256]=139
S[198]=166
S[230]=166
S[482]=166
S[483]=166
S[66]=170
S[98]=170
S[384]=172
S[385]=173
S[387]=174
S[386]=174
S[99]=176
S[67]=176
S[263]=176
S[262]=176
S[264]=176
S[265]=176
S[269]=176
S[268]=176
S[267]=176
S[266]=176
S[199]=176
S[231]=176
S[392]=188
S[391]=188
S[100]=190
S[68]=190
S[270]=190
S[271]=190
S[273]=190
S[272]=190
S[240]=190
S[208]=190
S[499]=198
S[497]=198
S[498]=198
S[454]=198
S[452]=198
S[453]=198
S[393]=204
S[394]=205
S[396]=206
S[395]=206
S[101]=208
S[69]=208
S[233]=208
S[201]=208
S[232]=208
S[200]=208
S[277]=208
S[276]=208
S[234]=208
S[202]=208
S[282]=208
S[283]=208
S[203]=208
S[235]=208
S[279]=208
S[278]=208
S[280]=208
S[281]=208
S[274]=208
S[275]=208
S[477]=228
S[398]=228
S[399]=230
S[400]=231
S[70]=232
S[102]=232
S[401]=234
S[402]=234
S[103]=236
S[71]=236
S[287]=236
S[286]=236
S[285]=236
S[284]=236
S[487]=236
S[486]=236
S[288]=236
S[289]=236
S[291]=236
S[290]=236
S[485]=248
S[484]=248
S[403]=250
S[404]=251
S[418]=252
S[419]=252
S[104]=254
S[72]=254
S[292]=254
S[293]=254
S[294]=254
S[295]=254
S[405]=260
S[73]=261
S[105]=261
S[205]=261
S[237]=261
S[236]=261
S[204]=261
S[300]=261
S[301]=261
S[206]=261
S[238]=261
S[464]=261
S[463]=261
S[239]=261
S[207]=261
S[296]=261
S[297]=261
S[304]=261
S[303]=261
S[302]=261
S[299]=261
S[298]=261
S[306]=282
S[307]=282
S[305]=284
S[407]=285
S[406]=286
S[106]=287
S[74]=287
S[309]=287
S[308]=287
S[496]=287
S[75]=292
S[107]=292
S[488]=292
S[489]=292
S[311]=292
S[310]=292
S[408]=298
S[409]=298
S[108]=300
S[76]=300
S[313]=300
S[314]=300
S[318]=300
S[317]=300
S[315]=300
S[316]=300
S[321]=300
S[322]=300
S[320]=310
S[319]=310
S[457]=312
S[455]=312
S[456]=312
S[410]=315
S[411]=316
S[77]=317
S[109]=317
S[110]=319
S[78]=319
S[323]=319
S[324]=319
S[327]=319
S[328]=319
S[209]=319
S[241]=319
S[325]=319
S[326]=319
S[458]=329
S[459]=329
S[460]=329
S[413]=332
S[414]=333
S[331]=334
S[330]=334
S[111]=336
S[186]=336
S[79]=336
S[211]=336
S[243]=336
S[242]=336
S[210]=336
S[335]=336
S[334]=336
S[212]=336
S[244]=336
S[465]=336
S[466]=336
S[214]=336
S[246]=336
S[337]=336
S[336]=336
S[213]=336
S[245]=336
S[216]=336
S[248]=336
S[490]=336
S[491]=336
S[492]=336
S[493]=336
S[333]=336
S[332]=336
S[417]=336
S[416]=336
S[339]=365
S[338]=365
S[390]=367
S[415]=368
S[112]=369
S[80]=369
S[420]=371
S[421]=371
S[81]=373
S[113]=373
S[312]=375
S[114]=376
S[82]=376
S[340]=376
S[341]=376
S[344]=376
S[345]=376
S[342]=376
S[343]=376
S[422]=384
S[83]=385
S[115]=385
S[346]=385
S[347]=385
S[348]=385
S[349]=385
S[352]=385
S[353]=385
S[350]=385
S[351]=385
S[383]=385
S[223]=396
S[425]=397
S[426]=398
S[84]=399
S[116]=399
S[356]=399
S[357]=399
S[354]=399
S[355]=399
S[446]=405
S[359]=406
S[358]=406
S[427]=408
S[429]=409
S[428]=409
S[430]=411
S[85]=412
S[117]=412
S[218]=412
S[250]=412
S[249]=412
S[217]=412
S[365]=412
S[364]=412
S[251]=412
S[219]=412
S[467]=412
S[468]=412
S[367]=412
S[366]=412
S[220]=412
S[252]=412
S[471]=412
S[472]=412
S[475]=412
S[476]=412
S[473]=412
S[474]=412
S[470]=412
S[469]=412
S[368]=412
S[369]=412
S[361]=412
S[360]=412
S[370]=412
S[371]=412
S[362]=412
S[363]=412
S[431]=412
S[432]=412
S[412]=446
S[433]=447
S[86]=448
S[118]=448
S[434]=450
S[119]=451
S[87]=451
S[372]=451
S[373]=451
S[120]=455
S[88]=455
S[121]=457
S[89]=457
S[253]=457
S[221]=457
S[374]=457
S[375]=457
S[376]=457
S[255]=457
S[436]=465
S[435]=465
S[90]=467
S[122]=467
S[377]=467
S[378]=467
S[381]=467
S[382]=467
S[379]=467
S[380]=467
S[397]=475
S[438]=476
S[437]=476
S[439]=478
S[495]=478
S[494]=478
S[441]=481
S[440]=481
S[442]=483
S[254]=484
S[222]=484
S[447]=486
S[443]=487
S[423]=488
S[424]=488
S[444]=490
S[445]=490
S[388]=492
S[389]=492
S[329]=494
S[448]=495
S[449]=496
S[450]=497
S[451]=498
S[181]=499

gaFtsStem[0] = "ed";
gaFtsStem[1] = "es";
gaFtsStem[2] = "er";
gaFtsStem[3] = "e";
gaFtsStem[4] = "s";
gaFtsStem[5] = "ingly";
gaFtsStem[6] = "ing";
gaFtsStem[7] = "ly";


var gsBiggestChar="䶮";
function getBiggestChar()
{
	return gsBiggestChar;
}

function getCharCode(code)
{
	var charCode = S[code];
	if ((typeof(charCode) != 'undefined')&&(charCode != null))
	{
		return charCode ;
	}
	return code;
}

function getAccentCharOrder(str, i)
{
	var code=str.charCodeAt(i);
	if ((typeof(A[code]) != 'undefined')&&(A[code] != null))
	{
		return A[code] ;
	}
	else if ((typeof(S[code]) != 'undefined')&&(S[code] != null))
	{
		return S[code] ;
	}
	return code;
}

function compare(strText1,strText2)
{
	for(var i=0;i<strText1.length && i<strText2.length;i++)
	{
		var code1 = strText1.charCodeAt(i);
		var code2 = strText2.charCodeAt(i);
		if(code1 == code2)
			continue;
		var charCode1 = getCharCode(code1);
		var charCode2 = getCharCode(code2);

		if(charCode1<charCode2) return -1;
		if(charCode1>charCode2) return 1;
	}
	if(strText1.length<strText2.length) return -1;
	if(strText1.length>strText2.length) return 1;

	//compare accent
	/*for(var i=0;i<strText1.length ;i++)
	{
		var charCode1 = getAccentCharOrder(strText1,i);
		var charCode2 = getAccentCharOrder(strText2,i);

		if(charCode1<charCode2) return -1;
		if(charCode1>charCode2) return 1;
	}*/
	return 0;
}

gbWhLang=true;
;

//	Mobile Help 1.0.0
var gbNav=false;
var gbNav6=false;
var gbNav61=false;
var gbNav7=false;
var gbNav4=false;
var gbIE4=false;
var gbIE=false;
var gbIE5=false;
var gbIE55=false;
var gbIE9=false;
var gbIE10=false;
var gbOpera6=false;
var gbOpera7=false;
var gbKonqueror3=false;
var gbSafari3=false;

var gAgent=navigator.userAgent.toLowerCase();
var gbMac=(gAgent.indexOf("mac")!=-1);
var gbSunOS=(gAgent.indexOf("sunos")!=-1);
var gbUnixOS=(gAgent.indexOf("linux")!=-1) || (gAgent.indexOf("unix")!=-1);
var gbOpera=(gAgent.indexOf("opera")!=-1);
var gbKonqueror=(gAgent.indexOf("konqueror")!= -1);
var gbSafari=(gAgent.indexOf("safari")!= -1);
var gbWindows=((gAgent.indexOf('win')!= -1)||(gAgent.indexOf('16bit')!= -1));
var gbMozilla=((gAgent.indexOf('gecko')!=-1) && (gAgent.indexOf('netscape')==-1));
var gbAIR=(gAgent.indexOf('adobeair')!=-1);
var gbChrome = (gAgent.indexOf('chrome')!=-1);
var gbAIRSSL= true ;

var gVersion=navigator.appVersion.toLowerCase();

var gnVerMajor=parseInt(gVersion);
var gnVerMinor=parseFloat(gVersion);

if(!gbOpera&&!gbKonqueror&&!gbSafari) // opera can mimic IE or Netscape by settings.
{
	gbIE=(navigator.appName.indexOf("Microsoft")!=-1);
	gbNav=(gAgent.indexOf('mozilla')!=-1) && ((gAgent.indexOf('spoofer')==-1) && (gAgent.indexOf('compatible')==-1));
	if(gnVerMajor>=4)
	{
		if(navigator.appName=="Netscape")
		{
			gbNav4=true;
			if(gnVerMajor>=5)
				gbNav6=true;
		}
		gbIE4=(navigator.appName.indexOf("Microsoft")!=-1);
	}
	if(gbNav6)
	{
		var nPos=gAgent.indexOf("gecko");
		if(nPos!=-1)
		{
			var nPos2=gAgent.indexOf("/", nPos);
			if(nPos2!=-1)
			{
				var nVersion=parseFloat(gAgent.substring(nPos2+1));
				if(nVersion>=20010726)
				{
					gbNav61=true;
					if (nVersion>=20020823)
						gbNav7=true;
				}
			}
		}
	}else if(gbIE4)
	{
		var nPos=gAgent.indexOf("msie");
		if(nPos!=-1)
		{
			var nVersion=parseFloat(gAgent.substring(nPos+5));
			if(nVersion>=5)
			{
				gbIE5=true;
				if(nVersion>=5.5)
				{
					gbIE55=true;
					if(nVersion>=9)
					{
						gbIE9 = true;
						if(nVersion>=10)
							gbIE10=true;
					}
				}
			}
		}
	}
}
else if (gbOpera)
{
	var nPos = gAgent.indexOf("opera");
	if(nPos!=-1)
	{
		var nVersion=parseFloat(gAgent.substring(nPos+6));
		if(nVersion>=6)
		{
			gbOpera6=true;
			if(nVersion>=7)
				gbOpera7=true;
		}
	}
}
else if (gbKonqueror)
{
	var nPos = gAgent.indexOf("konqueror");
	if(nPos!=-1)
	{
		var nVersion = parseFloat(gAgent.substring(nPos+10));
		if (nVersion >= 3)
		{
			gbKonqueror3=true;
		}
	}
}
if(gbSafari)
{
	var nPos = gAgent.indexOf("version/");
	if(nPos!=-1)
	{
		var nVersion = parseFloat(gAgent.substring(nPos+8,nPos+9));
		if (nVersion >= 3)
		{
			gbSafari3=true;
		}
	}
}
if(gbChrome)
{
	//for the time being use same tests as safari
	gbSafari = true ;
	gbSafari3=true;
}
var gbWhVer=true;
;

var gXMLBuffer = null;
var gFileNameToXMLMap = new Object();
var xmlJsReader = new XmlJsReader();

function XmlInfo(xmlPath, oFunCallback, args) {
    this.sXmlPath = xmlPath;
    this.callback = oFunCallback;
    this.cbargs = args;
}

function XmlJsReader() {
    this.queue = new MhQueue();
    this.bLoading = false;

    this.getJsNameFromXmlName = function (xmlPath) {
        var indx = xmlPath.lastIndexOf(".xml");
        if (indx != -1) {
            var jsPath = xmlPath.substring(0, indx);
            jsPath += "_xml.js";
            return jsPath;
        }
		return xmlPath;
    }
    /*use relative path for xmlPath*/
    this.loadFile = function (xmlPath, oFunCallback, args) {
        this.queue.enqueue(new XmlInfo(xmlPath, oFunCallback, args));
        this.loadFromQueue();
    }

    this.loadFromQueue = function () {
        if (this.queue.isEmpty() || this.bLoading) {
            return;
        }
        else {
            var xmlInfo = this.queue.peek();
            if (typeof (gFileNameToXMLMap[xmlInfo.sXmlPath]) == 'undefined') {
                var jsPath = this.getJsNameFromXmlName(xmlInfo.sXmlPath);
                this.loadScript(jsPath, this.onScriptLoaded);
            }
            else {
                this.onScriptLoaded();
            }
        }
    }

    this.onScriptLoaded = function () {
        var xmlInfo = xmlJsReader.queue.dequeue();
        if (typeof(gFileNameToXMLMap[xmlInfo.sXmlPath]) == 'undefined' && gXMLBuffer != null) {
            gFileNameToXMLMap[xmlInfo.sXmlPath] = gXMLBuffer;
        }
        var xmlDoc = null;
        if (typeof (gFileNameToXMLMap[xmlInfo.sXmlPath]) != 'undefined') {
            if (window.DOMParser) {
                var parser = new DOMParser();
                xmlDoc = parser.parseFromString(gFileNameToXMLMap[xmlInfo.sXmlPath], "text/xml");
            }
            else {
                xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = false;
                var indx = gFileNameToXMLMap[xmlInfo.sXmlPath].indexOf("<?xml");
                if (indx != -1) {
                    indx = gFileNameToXMLMap[xmlInfo.sXmlPath].indexOf("?>", indx);
                    if (indx != -1) {
                        var strXML = gFileNameToXMLMap[xmlInfo.sXmlPath].substr(indx + 2);
                        xmlDoc.loadXML(strXML);
                    }
                }
                else {
                    xmlDoc.loadXML(gFileNameToXMLMap[xmlInfo.sXmlPath]);
                }
            }
        }
        gXMLBuffer = null;
        xmlJsReader.bLoading = false;

        if (xmlInfo.callback)
            xmlInfo.callback(xmlDoc, xmlInfo.cbargs);

        xmlJsReader.loadFromQueue();
    }

    this.loadScript = function (sScriptSrc, onScriptLoadedCB) {
        this.bLoading = true;
        var oHead = document.getElementsByTagName('head')[0];
        var oScript = document.createElement('script');
        oScript.type = 'text/javascript';
        oScript.charset = "utf-8";
		oScript.src = sScriptSrc;

        // IE 6 & 7
        if (oScript.readyState) {
            oScript.onreadystatechange = function () {
                if (oScript.readyState == 'loaded' ||
                    oScript.readyState == 'complete') {
                    onScriptLoadedCB();
                }
            }
        }
        else {
            oScript.onload = onScriptLoadedCB;
            oScript.onerror = onScriptLoadedCB;
        }

        oHead.appendChild(oScript);
    }
}
;

var gParentDataFile = "parentdata.js";
gFinalScrFolder = "";
gbLoadingParentData = false;
gbParentDataLoaded = false;
gTocChildPrefixStr = "";
gTocChildOrder = "";
gFlowTypeArrParentData = new Array;

function parentDataCallbackObj()
{
	this.path = null;
	this.flowType = SCR_NONE;
}

function initAndLoadParentData(path, flowType)
{
	if(gbLoadingParentData == true)
	{
		gFlowTypeArrParentData[gFlowTypeArrParentData.length] = flowType;
		return;
	}
	else if(gbParentDataLoaded == true)
	{
		doReturnParentDataCallAction(flowType);
		return;
	}
	gbLoadingParentData = true;
	gFlowTypeArrParentData[0] = flowType;
	gFinalRootRelPath = "";
	gFinalCommonRootRelPath = "";
	loadParentData(path, flowType);

}
function loadParentData(path, flowType)
{
	var parentDataCBObj = new parentDataCallbackObj();
	parentDataCBObj.path = path;
	parentDataCBObj.flowType = flowType;

	if(path == null)
		parentDataFile = gCommonRootRelPath + "/" + gParentDataFile;
	else
		parentDataFile = path + "/" + gParentDataFile;

	xmlJsReader.loadFile(parentDataFile, callbackParentDataLoaded, parentDataCBObj);
}
function callbackParentDataLoaded(xmlDoc, parentDataCBObj)
{
	var path = parentDataCBObj.path;
	var flowType = parentDataCBObj.flowType;
	var mpXmlTags = null;
	var mpXmlTag = null;
	var parentName = null;
	var parentUrl = null;

	if (xmlDoc != undefined && xmlDoc != null)
	{
		mpXmlTags = xmlDoc.getElementsByTagName(MASTERPROJECT);
		mpXmlTag = mpXmlTags[0];
		if (mpXmlTag != null)
		{
			parentName = mpXmlTag.getAttribute(NAME);
			parentUrl = mpXmlTag.getAttribute(URL);
		}
	}

	if(parentUrl == null)
	{
		if(path == null)
		{
			gFinalRootRelPath = gRootRelPath;
			gFinalCommonRootRelPath = gCommonRootRelPath;
		}
		returnParentDataCall();
	}
	else
	{
		if(path == null)
			path = gCommonRootRelPath;
		var parentPath = path + "/" + parentUrl;
		loadScreenData(parentPath, flowType);
		parentDataCBObj.path = parentPath;
	}
}

function returnParentDataCall()
{
	gbLoadingParentData = false;
	gbParentDataLoaded = true;
	gLastScreenObj = null;
	initSettings(gFinalCommonRootRelPath)
	fireRhLoadCompleteEvent();
	for(var i=0; i<gFlowTypeArrParentData.length; i++)
		doReturnParentDataCallAction(gFlowTypeArrParentData[i]);

}

function doReturnParentDataCallAction(flowType)
{
	if(flowType == SCR_PARENT_TOC)
		displayToc(gFinalRootRelPath, gFinalCommonRootRelPath);
	else if(flowType == SCR_PARENT_IDX)
		initAndCollectAllChildPaths(gFinalRootRelPath, gFinalCommonRootRelPath, SCR_CHILD_IDX);
	else if(flowType == SCR_PARENT_GLO)
		initAndCollectAllChildPaths(gFinalRootRelPath, gFinalCommonRootRelPath, SCR_CHILD_GLO);
	else if(flowType == SCR_PARENT_FTS)
		initAndCollectAllChildPaths(gFinalRootRelPath, gFinalCommonRootRelPath, SCR_CHILD_FTS);
}

function loadParentDataForSyncing(commonRootRelPath, flowType)
{
	if(gbPreviewMode)
	{
		returnParentDataCallForSyncing(flowType, null);
		return;
	}
	var parentDataCBObj = new parentDataCallbackObj();
	parentDataCBObj.path = commonRootRelPath;
	parentDataCBObj.flowType = flowType;

	var parentDataFile = commonRootRelPath + "/" + gParentDataFile;
	xmlJsReader.loadFile(parentDataFile, callbackParentDataLoadedForSyncing, parentDataCBObj);
}

function callbackParentDataLoadedForSyncing(xmlDoc, parentDataCBObj)
{
	var mpXmlTags = null;
	var mpXmlTag = null;
	var parentName = null;
	var parentUrl = null;

	if (xmlDoc != undefined && xmlDoc != null)
	{
		mpXmlTags = xmlDoc.getElementsByTagName(MASTERPROJECT);
		mpXmlTag = mpXmlTags[0];

		if (mpXmlTag != undefined && mpXmlTag != null)
		{
			parentName = mpXmlTag.getAttribute(NAME);
			parentUrl = mpXmlTag.getAttribute(URL);
		}
	}

	if(parentUrl != null)
	{
		var childName = mpXmlTag.getAttribute(CHILDNAME);
		loadScreenData(parentDataCBObj.path + "/" + parentUrl, parentDataCBObj.flowType, childName);
	}
	else
		returnParentDataCallForSyncing(parentDataCBObj.flowType, null);
}

function returnParentDataCallForSyncing(flowType, childName, finalRootRelPath, finalCommonRootRelPath)
{
	if(childName != null && childName != "")
		loadProjDataForSyncing(flowType, finalRootRelPath, finalCommonRootRelPath, childName);
	else
	{
		if(flowType == SCR_PARENT_TOCSYNC)
			syncToc(gTocChildPrefixStr, gTocChildOrder);
		else if(flowType == SCR_PARENT_BC)
			returnProjDataCallForSyncing(flowType, null, null);
	}
}
;

gScreenDataFile = "screendata.js";
gScreenFolder = "";

var gScreenRelPathMap = new Object();
function redirectToScreenURL()
{
	loadScreens(SCR_INIT, ".");
}
function loadScreenData(relPath, flowType, data)
{
	var scrFolder = undefined

	if (gScreenRelPathMap[relPath])
	{
		scrFolder = gScreenRelPathMap[relPath].folder;
	}

	if(scrFolder != undefined)
	{
		returnScreenDataCall(flowType, relPath, scrFolder, data);
		return;
	}
	loadScreens(flowType, relPath, data);
}
function screenDataCallBackObj()
{
	this.flowType = SCR_NONE;
	this.relPath = null;
	this.data = null;
	this.curScrFolder = null;
}
function screenObject()
{
	this.minWdith = -1;
	this.maxWidth = -1;
	this.minHeight = -1;
	this.maxHeight = -1;
	this.browserAgent = null;
	this.folder = null;
	this.defaultURL = null;
	this.isDefault = false;
	this.isDeviceMatching = null;
}
function loadScreens(flowType, relPath, data)
{
	var callBackObj = new screenDataCallBackObj();
	callBackObj.flowType = flowType;
	callBackObj.relPath = relPath;
	callBackObj.data = data;
	xmlJsReader.loadFile(relPath + "/" + gScreenDataFile, callbackScreenDataLoaded, callBackObj);
}

function callbackScreenDataLoaded(xmlDoc, callBackObj)
{
	var screenObj = getDeviceMatchingScreen(xmlDoc);

	if(screenObj != null)
		gScreenRelPathMap[callBackObj.relPath] = { folder: screenObj.folder, defaultURL: screenObj.defaultURL };
	else
		gScreenRelPathMap[callBackObj.relPath] = { folder: null, defaultURL: null };

	returnScreenDataCall(callBackObj.flowType, callBackObj.relPath, gScreenRelPathMap[callBackObj.relPath].folder, callBackObj.data);
}

function returnScreenDataCall(flowType, relPath, scrFolder, data)
{
	if(flowType == SCR_CHILD_TOC)
	{
		if(scrFolder != null)
			loadProjData(relPath + "/" + scrFolder, relPath, data);
		else
			loadProjData("", "", data);
	}
	else if(flowType == SCR_CHILD_IDX || flowType == SCR_CHILD_GLO || flowType == SCR_CHILD_FTS || flowType == SCR_CHILD_CSH)
	{
		if(scrFolder != null)
			collectAllChildPaths(relPath + "/" + scrFolder, relPath, flowType);
		else
		{
			var childProjUrlQueue = data;
			if(childProjUrlQueue.isEmpty())
				returnProjDataCall();
			else
			{
				var path = childProjUrlQueue.dequeue();
				loadScreenData(path, flowType, childProjUrlQueue);
			}
		}
	}
	else if(flowType == SCR_PARENT_TOC || flowType == SCR_PARENT_IDX ||
			flowType == SCR_PARENT_GLO || flowType == SCR_PARENT_FTS || flowType == SCR_NONE)
	{
		if(scrFolder != null)
		{
			gFinalRootRelPath = relPath + "/" + scrFolder;
			gFinalCommonRootRelPath = relPath;
			gFinalScrFolder = scrFolder;
			loadParentData(relPath, flowType);
		}
		else
			returnParentDataCall();
	}
	else if(flowType == SCR_PARENT_BC || flowType == SCR_PARENT_TOCSYNC)
	{
		if(scrFolder != null)
		{
			var finalRootRelPath = relPath + "/" + scrFolder;
			var finalCommonRootRelPath = relPath;
			returnParentDataCallForSyncing(flowType, data, finalRootRelPath, finalCommonRootRelPath);
		}
		else
			returnParentDataCallForSyncing(flowType, null);

	}
}

function getScreenObj(screenNode)
{
	var screenObj = new screenObject();
	screenObj.minWidth=parseInt(screenNode.getAttribute(MINWIDTH));
	screenObj.maxWidth=parseInt(screenNode.getAttribute(MAXWIDTH));
	screenObj.minHeight=parseInt(screenNode.getAttribute(MINHEIGHT));
	screenObj.maxHeight=parseInt(screenNode.getAttribute(MAXHEIGHT));
	screenObj.browserAgent=screenNode.getAttribute(BROWSERAGENT);
	screenObj.folder=screenNode.getAttribute(FOLDER);
	screenObj.defaultURL=screenNode.getAttribute(DEFAULTURL);
	var defaultFlag = screenNode.getAttribute(DEFAULT);
	if(defaultFlag == TRUESTR)
		screenObj.isDefault=true;
	return screenObj;
}

function getDeviceMatchingScreen(xmlDoc, isDefault)
{
	var currentWidth = screen.width;
	var currentHeight = screen.height;
	var szCurrentBrowserAgentString = ""+navigator.userAgent;

	var screensXmlNode = xmlDoc.getElementsByTagName(SCREENSNODE)[0];
	var len = screensXmlNode.childNodes.length;
	var screenArray = new Array();
	var screenObj = null;
	var defaultScreenObj = null;
	for(var i=0; i<len; i++)
	{
		var screenNode = screensXmlNode.childNodes[i];
		screenObj = getScreenObj(screenNode);
		var bMinWidth=true;
		if(screenObj.minWidth>0)
		{
			bMinWidth = currentWidth>=screenObj.minWidth;
		}

		var bMaxWidth=true;
		if(screenObj.maxWidth>0)
		{
			bMaxWidth = currentWidth<=screenObj.maxWidth;
		}

		var bMinHeight=true;
		if(screenObj.minHeight>0)
		{
			bMinHeight = currentHeight>=screenObj.minHeight;
		}

		var bMaxHeight=true;
		if(screenObj.maxHeight>0)
		{
			bMaxHeight = currentHeight<=screenObj.maxHeight;
		}

		var bBrowserAgent = true;


		if (screenObj.browserAgent != null && screenObj.browserAgent.length > 0) {

			var szBrowserAgent = screenObj.browserAgent;

			szBrowserAgent = trimString(szBrowserAgent);
			if (szBrowserAgent.length > 0) {
				bBrowserAgent = false;
				//we need to see if the browser agent is same or not
				//split it on the bases of |
				var screenAgentArray = szBrowserAgent.split("|");
				for (var stringIndex = 0; stringIndex < screenAgentArray.length; stringIndex++) {
					var szTemp = screenAgentArray[stringIndex];
					//check if the browser agent has this
					if (szCurrentBrowserAgentString.indexOf(szTemp) != -1) {
						bBrowserAgent = true;
						break;
					}
				}
			}
		}

		//if all conditions met then we need to redirect to that URL now
		if (bMinHeight && bMinWidth && bMaxWidth && bMaxHeight && bBrowserAgent)
		{
			screenObj.isDeviceMatching = true;
			return screenObj;
		}
		else if(screenObj.isDefault)
		{
			defaultScreenObj = screenObj;
			defaultScreenObj.isDeviceMatching = true;
		}
	}

	return defaultScreenObj;
}
;

function initSettings(commonRootRelPath)
{
	if(commonRootRelPath == null || commonRootRelPath == "" || !rh._.isRelativeUrl(commonRootRelPath))
		return;
	var data = rh._.getHostData(commonRootRelPath);
	window.gHost = data.gHost;
	window.gHostPath = data.gHostPath;
}

(function() {
	var projList = [];
	var layout_features;
	var layout_version = 0.0;
	rh.model.subscribe(rh.consts('KEY_FEATURE'), function (features) {
		layout_features = features;
	});
	rh.model.subscribe(rh.consts('KEY_LAYOUT_VERSION'), function (version) {
		layout_version = parseFloat(version);
	});


	//Adding some global variables
	window.gProjDataFile = "projectdata.js";
	window.gbLoadingProjData = false;
	window.gbProjDataLoaded = false;
	window.initAndCollectAllChildPaths = function (rootRelPath, commonRootRelPath, flowType) {
	if(gbLoadingProjData == true)
	{
		gFlowTypeArrProjData[gFlowTypeArrProjData.length] = flowType;
		return;
	}
	else if(gbProjDataLoaded == true)
	{
		doReturnProjDataCallAction(flowType);
		return;
	}

	gbLoadingProjData = true;
	gFlowTypeArrProjData = new Array;
	gFlowTypeArrProjData[0] = flowType;
	gChildProjUrlQueue = new MhQueue();
	gChildRootRelPathArr = new Array;
	collectAllChildPaths(rootRelPath, commonRootRelPath, flowType);
		projList.push(commonRootRelPath);
}

	function projDataCallBackObj(flowType, commonRootRelPath, rootRelPath, data)
	{
		this.flowType = flowType;
		this.commonRootRelPath = commonRootRelPath;
		this.rootRelPath = rootRelPath;
		this.data = data;
	}


	window.collectAllChildPaths = function(rootRelPath, commonRootRelPath, flowType)
	{
		var projDataCBObj = new projDataCallBackObj(flowType, commonRootRelPath, rootRelPath, null);
		gChildRootRelPathArr[gChildRootRelPathArr.length] = rootRelPath;
		var projDataFile = rootRelPath + "/" + gProjDataFile;
		xmlJsReader.loadFile(projDataFile, callbackProjDataLoaded, projDataCBObj);
	}

	function callbackProjDataLoaded(xmlDoc, projDataCBObj)
	{
		var projXmlNode = null;
		var remoteNodes = null;
		var len = 0;

		if (xmlDoc != undefined && xmlDoc != null)
		{
			projXmlNode = xmlDoc.getElementsByTagName(PROJNODE)[0];
			remoteNodes = projXmlNode.getElementsByTagName(REMOTENODE);
			len = remoteNodes.length;
		}
		rh._.each(remoteNodes, function(remoteNode){
			var url = remoteNode.getAttribute(URL);
			var path = projDataCBObj.commonRootRelPath + "/" + url;
			gChildProjUrlQueue.enqueue(path);
				projList.push(path);
		});

		if(gChildProjUrlQueue.isEmpty())
			returnProjDataCall();
		else
		{
			var path = gChildProjUrlQueue.dequeue();
			loadScreenData(path, projDataCBObj.flowType, gChildProjUrlQueue);
		}
	}

		window.returnProjDataCall = function()
	{
		gbLoadingProjData = false;
		gbProjDataLoaded = true;
		for(var i=0; i<gFlowTypeArrProjData.length; i++)
			doReturnProjDataCallAction(gFlowTypeArrProjData[i]);
	}
	function doReturnProjDataCallAction(flowType)
	{
		rh.model.subscribe(rh.consts('KEY_PROJECT_LIST'), function(prjList) {
			if (flowType == SCR_CHILD_IDX)
			{
				if (layout_version >= 2.0 && layout_features && layout_features.delay_load_idx !== false)
				{
					var idxLoaded = false;
					rh.model.subscribe(rh.consts("EVT_LOAD_IDX"), function() {
						if (!idxLoaded)
						{
							idxLoaded = true;
							displayIdx(prjList);
						}
					});
				}
				else {
					displayIdx(prjList);
				}
			}
			else if(flowType == SCR_CHILD_GLO)
			{
				if (layout_version >= 2.0 && layout_features && layout_features.delay_load_glo !== false)
				{
					var gloLoaded = false;
					rh.model.subscribe(rh.consts("EVT_LOAD_GLO"), function() {
						if (!gloLoaded)
						{
							gloLoaded = true;
							displayGlo(prjList);
						}
					});
				}
				else {
					displayGlo(prjList);
				}
			}
			else if(flowType == SCR_CHILD_FTS)
				ftsContextLoaded(prjList);
			else if(flowType == SCR_CHILD_CSH)
				loadCSH(prjList);
		});
	}

	window.loadProjDataForSyncing = function (flowType, rootRelPath, commonRootRelPath, childName)
	{
		var projDataFile = rootRelPath + "/" + gProjDataFile;
		var projDataCBObj = new projDataCallBackObj(flowType, commonRootRelPath, rootRelPath, childName);
		xmlJsReader.loadFile(projDataFile, callbackProjDataLoadedForSyncing, projDataCBObj);
	}
	function callbackProjDataLoadedForSyncing(xmlDoc, projDataCBObj)
	{
		returnProjDataCallForSyncing(projDataCBObj.flowType, xmlDoc, projDataCBObj);
	}
	window.returnProjDataCallForSyncing = function (flowType, data, projDataCBObj)
	{
		var rootRelPath = null;
		var commonRootRelPath = null;
		var childName = null;
		if(projDataCBObj != null)
		{
			rootRelPath = projDataCBObj.rootRelPath;
			commonRootRelPath = projDataCBObj.commonRootRelPath;
			childName = projDataCBObj.data;
		}
		extractParentProjInfo(flowType, data, rootRelPath, commonRootRelPath, childName);
	}

	function extractParentProjInfo(flowType, projXmlDoc, rootRelPath, commonRootRelPath, childName)
	{

		if(projXmlDoc == null || commonRootRelPath == null || rootRelPath == null)
		{
			if(flowType == SCR_PARENT_BC)
				writeBreadCrumbs();
			else if(flowType == SCR_PARENT_TOCSYNC)
				syncToc(gTocChildPrefixStr, gTocChildOrder);
			return;
		}
		var projXmlNode = projXmlDoc.getElementsByTagName(PROJNODE)[0];
		var remoteNodes = projXmlNode.getElementsByTagName(REMOTENODE);
		var len = remoteNodes.length;
		for(var i=0; i<len; i++)
		{
			var remoteNode = remoteNodes[i];
			var remoteChildName = remoteNode.getAttribute(CHILDNAME);
			if(remoteChildName == childName)
			{
				if(flowType == SCR_PARENT_BC)
					extractParentProjBCInfo(remoteNode, rootRelPath);
				else if(flowType == SCR_PARENT_TOCSYNC)
					extractParentProjTocSyncInfo(remoteNode, rootRelPath);
				break;
			}
		}
		loadParentDataForSyncing(commonRootRelPath, flowType);
	}
	function extractParentProjBCInfo(remoteNode, rootRelPath)
	{
		var breadCrumbsNodes = remoteNode.getElementsByTagName(BREADCRUMBSNODE);
		if(breadCrumbsNodes.length == 1)
		{
			var bcNode = breadCrumbsNodes[0];
			var itemNodes = bcNode.getElementsByTagName(ITEMNODE);
			var itemsCount = itemNodes.length;
			var strTrail = "";

			for(var j=itemsCount-1; j>=0; j--)
			{
				var itemNode = itemNodes[j];
				var bcName= itemNode.getAttribute(NAME);
				var url = itemNode.getAttribute(URL);

				bcName = bcName.replace(/\\\\/g, '\\');

				var strLink = "";
				if(url != "")
				{
				   strLink = _getFullPath(rootRelPath + "/", url);
				}
				for(var k=0;k<gBCId;k++)
				{
					var bclink = new Object();
					bclink.name = bcName;
					bclink.strLink = strLink;
					bclink.firstEntry = (j==0?true:false);
					gBreadCrumbInfo[k].bcLinks.push(bclink);
				}
			}
		}
	}

	function extractParentProjTocSyncInfo(remoteNode)
	{
		var childId = remoteNode.getAttribute(CHILDID);
		var pos = childId.indexOf("#");
		var childOrder = "";
		var prefix = "";
		if(pos != -1)
			childOrder = childId.substring(pos+1, childId.length);
		pos = childId.lastIndexOf(".");
		if(pos != -1)
			prefix = childId.substring(0, pos);

		if(gTocChildPrefixStr == "")
			gTocChildPrefixStr = prefix;
		else
		{
			var splitArr = gTocChildPrefixStr.split(BOOKDELIM);
			for(var i=0; i<splitArr.length; i++)
			{
				pos = splitArr[i].indexOf(TOCCHILDIDPREFIX);
				if(pos == -1)
					splitArr[i] += TOCCHILDIDPREFIX + childOrder;
				else
					splitArr[i] = splitArr[i].substring(0,pos) + TOCCHILDIDPREFIX + childOrder + splitArr[i].substring(pos);
			}
			gTocChildPrefixStr = splitArr.join(BOOKDELIM);
			if(prefix != "")
				prefix += BOOKDELIM;
			gTocChildPrefixStr = prefix + gTocChildPrefixStr;
		}
		rh.model.subscribe(rh.consts('KEY_TOC_ORDER'), function(orderData) {
			var url = rh._.parentPath(rh._.filePath().substring(rh._.getHostFolder().length))
			url = (url.length && url[url.length-1] === '/')? url.substring(0, url.length-1) : url
			while(orderData[url] === undefined) {
				url =  url.substring(0, url.lastIndexOf('/'))
			}
			gTocChildOrder = url && orderData[url].order
		});

	}
}
)();
;

var gTopicElemId = "";
var gsPPath = "";
var gaPaths = new Array();
var gaAvenues = new Array();
var gaSearchTerms = new Array();
var gaSearchTermType = new Array();
var gbPhraseTerm = false;
var gChildPathInMain = "";

var goFrame = null;
var gsStartPage = "";
var gsRelCurPagePath = "";
var gsSearchFormHref = "";
var gnTopicOnly = -1;
var gnOutmostTopic = -1;
var gsFtsBreakChars = "\t\r\n\"\\ .,!@#$%^&*()~'`:;<>?/{}[]|+-=\x85\x92\x93\x94\x95\x96\x97\x99\xA9\xAE\xB7";
var gsQuote = '\x22';
var gsBkgndColor = "";
var gsTextColor = "";
var BTN_TEXT = 1;
var BTN_IMG = 2;

var goSync = null;

var goShow = null;
var goHide = null;

var goPrev = null;
var goNext = null;
var gnForm = 0;
var goShowNav = null;
var goHideNav = null;

var goWebSearch = null;

var gsBtnStyle = "";
var gaButtons = new Array();
var gaTypes = new Array();
var whtopic_foldUnload = null;
var gbWhTopic = false;
var gbCheckSync = false;
var gbSyncEnabled = false;
var gaBreadcrumbsTrail = new Array();
var gnYPos = -1;
var gbBadUriError = false;
var gEnableOperatorSearch = true;

var EST_TERM = 1;
var EST_PHRASE = 2;
var EST_STEM = 3;


//Code for breadcrumb variable check for bookmark
(function () {
	gbBreadCrumb = 0;
	var strDocumentUrl = decodeURIComponent(document.location.hash);
	var n = strDocumentUrl.toLowerCase().indexOf("bc-");
	if (n != -1) {
		document.location.hash = encodeURIComponent(strDocumentUrl.substring(0, n));
		var bc = strDocumentUrl.substring(n + 3);
		gbBreadCrumb = bc;
	}
})();

// Initialize
rh.util.addEventListener(document, 'DOMContentLoaded', verifyEnvironment);

function verifyEnvironment() {
	if (window.self === window.top) {
		// Loaded without a parent.
		//addRhLoadCompleteEvent(rh._.redirectToLayout);
		rh.model.subscribe(rh.consts('EVT_PROJECT_LOADED'), function () {
			rh._.onTopicLoad();
		});
	}
	else {
		addRhLoadCompleteEvent(initializeTopic);
	}
	loadScreens(SCR_NONE, gCommonRootRelPath);
}

function initializeTopic() {
	publishTopicData();
	rh.model.subscribe(rh.consts('KEY_TOPIC_ORIGIN'), function () {
		setTimeout(applyHighlight, 500);
	});
	loadParentDataForSyncing(gCommonRootRelPath, SCR_PARENT_TOCSYNC);
}

function publishTopicData() {
	// Active topic URL
	rh.model.publish(rh.consts('KEY_TOPIC_URL'), decodeURI(document.location.href));

	// Active topic title
	rh.model.publish(rh.consts('KEY_TOPIC_TITLE'), document.title);

	// Active topic's browse sequence map
	var brsPrevNodes = document.querySelectorAll('meta[name=brsprev]');
	var brsNextNodes = document.querySelectorAll('meta[name=brsnext]');
	var brsPrevLinks = new Array();
	var brsNextLinks = new Array();
	var hostFolder = _isHTTPUrl(document.location.href) ? document.location.protocol + '//' + gHost + gHostPath : gHostPath;

	if (brsPrevNodes != undefined) {
		for (i = 0; i < brsPrevNodes.length; i++)
			brsPrevLinks[brsPrevLinks.length] = rh.util.traverseByPath(document.location.href, gCommonRootRelPath) + brsPrevNodes[i].getAttribute('value');
	}
	if (brsNextNodes != undefined) {
		for (i = 0; i < brsNextNodes.length; i++)
			brsNextLinks[brsNextLinks.length] = rh.util.traverseByPath(document.location.href, gCommonRootRelPath) + brsNextNodes[i].getAttribute('value');
	}

	rh.model.publish(rh.consts('KEY_TOPIC_BRSMAP'), { p: brsPrevLinks, n: brsNextLinks });
}

function syncToc(tocChildPrefixStr, tocChildOrder) {
	rh.model.subscribeOnce(rh.consts('KEY_TOC_ORDER'), function () {
		rh._.defer(function () {
			rh.model.publish(rh.consts('KEY_TOPIC_ID'), { topicID: gTopicId, childPrefix: gTocChildPrefixStr, childOrder: gTocChildOrder });
		})
	})
}

/////////highlight Search Routines /////////
function ClosedRange(a_nStart, a_nEnd) {
	this.nStart = a_nStart;
	this.nEnd = a_nEnd;
}

////////generic functions //////////

var g_RunesWordBreaks = gsFtsBreakChars;
var g_RunesWhiteSpaces = "\x20\x09\x0D\x0A\xA0";

function _isWordBreak(a_ch) {
	return (g_RunesWordBreaks.indexOf(a_ch) >= 0);
}

function _isWhiteSpace(a_ch) {
	return (g_RunesWhiteSpaces.indexOf(a_ch) >= 0);
}

function _getLengthOfWordBreak(a_str, a_nFrom) {
	var i = a_nFrom, nLen = a_str.length;
	while (i < nLen && _isWordBreak(a_str.charAt(i)))
		++i;
	return i - a_nFrom;
}

function _getLengthOfWord(a_str, a_nFrom) {
	var i = a_nFrom, nLen = a_str.length;
	while (i < nLen && !_isWordBreak(a_str.charAt(i)))
		++i;
	return i - a_nFrom;
}

function _getWord(a_str, a_nFrom) {
	var nLen = _getLengthOfWord(a_str, a_nFrom);
	return a_str.substr(a_nFrom, nLen);
}

function _getPositionInc(a_str, a_nFrom) {
	var i = a_nFrom, nLen = a_str.length, nInc = 1;
	while (i < nLen && _isWordBreak(a_str.charAt(i))) {
		if (!_isWhiteSpace(a_str.charAt(i)))
			nInc++;

		i++;
	}
	return nInc;
}

function _getNormalizedWord(a_strWord) {
	var strLower = a_strWord.toLowerCase();

	return strLower;
}

function DolWord(a_strWord, a_nPosition, a_nCharLocation) {
	this.strWord = a_strWord;
	this.nPosition = a_nPosition;
	this.nCharLocation = a_nCharLocation;
}

function dolSegment(a_strSrc) {
	var nLen = a_strSrc.length;
	var nCur = 0;
	var nPosition = 1;
	var strWord = "";
	var aRslt = new Array();

	nCur += _getLengthOfWordBreak(a_strSrc, nCur);
	while (nCur < nLen) {
		strWord = _getNormalizedWord(_getWord(a_strSrc, nCur));
		aRslt[aRslt.length] = new DolWord(strWord, nPosition, nCur);

		nCur += strWord.length;
		nPosition += _getPositionInc(a_strSrc, nCur);
		nCur += _getLengthOfWordBreak(a_strSrc, nCur);
	}
	return aRslt;
}

/////////// Dom Text node ///////////////
var s_strHlStart = null;
var s_strHlEnd = null;

function DomTextNode(a_Node, a_nFrom) {
	this.node = a_Node;
	this.nFrom = a_nFrom;

	this.aClosedRanges = new Array();

	this.getClosedRanges = function (a_aRanges, a_nStart) {
		var nTo = this.nFrom + a_Node.data.length;
		for (var i = a_nStart; i < a_aRanges.length; i++) {
			if (a_aRanges[i].nStart <= nTo &&
				a_aRanges[i].nEnd >= this.nFrom) {
				this.aClosedRanges[this.aClosedRanges.length] = new ClosedRange(a_aRanges[i].nStart > this.nFrom ? a_aRanges[i].nStart : this.nFrom,
					a_aRanges[i].nEnd < nTo ? a_aRanges[i].nEnd : nTo);
			}
			if (a_aRanges[i].nEnd > nTo) {
				return i;
			}
		}
		return i;
	}

	this.doHighlight = function (a_aRanges, a_nStart) {
		rh.model.cpublish('TOPIC_HIGHLIGHTED', true)
		s_strHlStart = "<span data-highlight=\"true\"  style='color:" + gsTextColor + "; background-color:" + gsBkgndColor + "'>";
		s_strHlEnd = "</span>";

		if (a_nStart >= a_aRanges.length)
			return a_nStart;

		var nEnd = this.getClosedRanges(a_aRanges, a_nStart);
		if (this.aClosedRanges.length == 0)
			return nEnd;

		// Check if node.parentNode is a valid parent for a span tag.
		if (!isValidParentForSpan(this.node.parentNode))
			return nEnd;

		var strText = this.node.data;
		//replace newline, carriage return, tab characters with space
		strText = strText.replace(/[\n\r\t]/g, " ");

		var strHTML = "";
		var nLastStart = 0;
		for (var i = 0; i < this.aClosedRanges.length; i++) {
			strHTML += _textToHtml_nonbsp(strText.substring(nLastStart, this.aClosedRanges[i].nStart - this.nFrom));
			strHTML += s_strHlStart;
			strHTML += _textToHtml_nonbsp(strText.substring(this.aClosedRanges[i].nStart - this.nFrom,
				this.aClosedRanges[i].nEnd - this.nFrom));
			strHTML += s_strHlEnd;

			nLastStart = this.aClosedRanges[i].nEnd - this.nFrom;
		}
		strHTML += _textToHtml_nonbsp(strText.substr(nLastStart));

		var spanElement = document.createElement("span");
		spanElement.setAttribute('data-highlight-container', true)
		spanElement.innerHTML = strHTML;
		if (gbIE) {
			//for IE, when assigning string to innerHTML, leading whitespaces are dropped
			if ((strHTML.length > 0) && (strHTML.charAt(0) == " "))
				spanElement.innerHTML = "&nbsp;" + spanElement.innerHTML;
		}

		this.node.parentNode.replaceChild(spanElement, this.node);
		if (gnYPos == -1) {
			var elemObj = spanElement;
			var curtop = 0;
			if (elemObj.offsetParent) {
				while (elemObj.offsetParent) {
					curtop += elemObj.offsetTop
					elemObj = elemObj.offsetParent;
				}
			}
			else if (elemObj.y)
				curtop += elemObj.y;

			gnYPos = curtop;
		}
		showHighlightedElement(spanElement);
		return nEnd;
	};
}

function eventFire(el, etype) {
	if (el.fireEvent) {
		el.fireEvent('on' + etype);
	} else {
		var evObj = document.createEvent('Events')
		evObj.initEvent(etype, true, true)
		el.dispatchEvent(evObj)
	}
}

function showHighlightedElement(highlightElement) {
	//display a dropdown/expand text if highlighted element is inside it
	var parent = highlightElement.parentNode
	while ((typeof parent != 'undefined') && parent != null) {
		var tagname = rh._.get(parent, 'tagName').toLowerCase()
		if (tagname == 'body')
			break;
		var targetName = rh.$.getAttribute(parent, 'data-targetname')
		if (targetName) {
			var node = document.querySelector('[data-target="' + targetName + '"]')
			rh._.defer(function () { eventFire(node, 'open') })
		}
		parent = parent.parentNode
	}
}

function DomTexts() {
	this.strText = "";
	this.aNodes = new Array();
	this.aRanges = new Array();
	this.addElementNode = function (a_Node) {
		if (a_Node == null || a_Node.childNodes == null)
			return;

		var nLen = a_Node.childNodes.length;
		for (var i = 0; i < nLen; i++) {
			var node = a_Node.childNodes.item(i);
			if (node != null) {
				if (node.nodeType == 3) {
					this.addTextNode(node);
				}
				else if (node.nodeType == 1) {
					this.addElementNode(node);
				}
			}
		}
	}

	this.addTextNode = function (a_Node) {
		if (a_Node == null)
			return;

		var strInnerText = a_Node.data;

		//replace newline, carriage return, tab characters with space
		strInnerText = strInnerText.replace(/[\n\r\t]/g, " ");
		if (strInnerText.length != 0) {
			var nFrom = this.strText.length;
			this.strText += strInnerText;
			this.aNodes[this.aNodes.length] = new DomTextNode(a_Node, nFrom);
		}
	}

	this.isWordMatch = function (a_strHlWord, a_strTextWord) {
		return a_strTextWord.indexOf(a_strHlWord.toLowerCase()) != -1;
	}
	this.calculateMatchLength = function (countTerms) {
		var nMatch = 0;
		for (key in countTerms) {
			nMatch += countTerms[key];
		}
		this.nMatch = nMatch;
	}

	this.makeHighlightRanges = function () {
		if (typeof (gaSearchTerms[0]) == "undefined")
			return;
		var count = 0;
		var str = gaSearchTerms.reduce(function (result, value, index) {
			var term = value.toLowerCase()
			if (!(isSubstrSearchEnabled() || rh.util.hasNonAsciiChar(term) || gbPhraseTerm)) {
				term = '\\b' + term + '\\b';
			}
			result += (result != '' ? '|' : '') + term;
			return result;
		}, '');

		var countTerms = {};
		gaSearchTerms.forEach(function (value) {
			var term = value.toLowerCase()
			if (!(isSubstrSearchEnabled() || rh.util.hasNonAsciiChar(term) || gbPhraseTerm)) {
				term = '\\b' + term + '\\b';
			}

			countTerms[term] = 0;
		});
		var str = gaSearchTerms.reduce(function (result, value, index) {
			var term = value.toLowerCase()
			if (!(isSubstrSearchEnabled() || rh.util.hasNonAsciiChar(term) || gbPhraseTerm)) {
				term = '\\b' + term + '\\b';
			}
			result += (result != '' ? '|' : '') + term;
			return result;
		}, '');
		var regexp = new RegExp(str, "i");

		var aWords;
		if (!gbPhraseTerm)
			aWords = dolSegment(this.strText);
		else {
			aWords = new Array();
			aWords[0] = new DolWord(this.strText, 1, 0);
		}

		for (var i = 0; i < aWords.length; i++) {
			var n = new Object;
			n.index = 0;
			var prevLen = 0;
			var tmpStr1 = aWords[i].strWord.toLowerCase();

			while (n != null && n.index > -1) {
				n = regexp.exec(tmpStr1);

				if (n != null && n.index > -1) {


					var strWord = n[0];
					for (var key in countTerms) {
						var regexp_term = new RegExp(key, "i");
						if (regexp_term.test(strWord)) {
							countTerms[key] = 1;
						}
					}
					this.aRanges[this.aRanges.length] = new ClosedRange(aWords[i].nCharLocation + prevLen + n.index,
						aWords[i].nCharLocation + prevLen + n.index + strWord.length);
					prevLen = prevLen + n.index + strWord.length;
					tmpStr1 = tmpStr1.substring(n.index + strWord.length, tmpStr1.length);
				}
			}
			this.calculateMatchLength(countTerms);
		}
	}

	this.highlightNodes = function () {
		var nFrom = 0;
		for (var i = 0; i < this.aNodes.length; i++)
			nFrom = this.aNodes[i].doHighlight(this.aRanges, nFrom);
	}

	this.jump2FirstHighlightedWord = function () {
		if (gnYPos > 51)
			window.scrollTo(0, gnYPos - 50);
	}
}

function processSuspendNodes(a_aNodes) {
	if (a_aNodes.length == 0)
		return false;

	var dt = new DomTexts();

	//build dom texts...
	for (var i = 0; i < a_aNodes.length; i++) {
		var node = a_aNodes[i];
		if (node.nodeType == 1) {
			dt.addElementNode(node);
		}
		else if (node.nodeType == 3) {
			dt.addTextNode(node);
		}
	}

	dt.makeHighlightRanges();
	if (dt.nMatch > aLongestlength) {
		aLongestlength = dt.nMatch;
		aLongestNodes.length = 0;
		gnYPos = -1;
		for (var i = 0, len = dt.aRanges.length; i < len; ++i)
			aLongestNodes.push(dt.aNodes[i]);
	}
	dt.highlightNodes();

	dt.jump2FirstHighlightedWord();
}

var s_strRecursiveTags = "sub sup img applet object br iframe embed noembed param area input " +
	"select textarea button option hr frame noframes marquee label p dl " +
	"div center noscript blockquote form isindex table fieldset address layer " +
	"dt dd caption thead tfoot tbody tr th td legend h1 h2 h3 h4 h5 h6 " +
	"ul ol dir menu li pre xmp listing plaintext ins del";

var s_strSpanInvalidParents = "applet object iframe embed table thead tfoot tbody tr ul ol script";

function doesTagRecursiveProcess(a_Node) {
	if (a_Node == null)
		return false;

	var strTagName = a_Node.tagName.toLowerCase();
	var rg = "\\b" + strTagName + "\\b";
	var ss = s_strRecursiveTags.match(rg);
	return ss != null;
}

function isValidParentForSpan(a_Node) {
	if (a_Node == null)
		return false;

	var strTagName = a_Node.tagName.toLowerCase();
	var rg = "\\b" + strTagName + "\\b";
	var ss = s_strSpanInvalidParents.match(rg);

	return ss == null;
}

function isFormElement(node) {
	switch (node.tagName) {
		case 'INPUT':
		case 'SELECT':
		case 'OPTION':
		case 'TEXTAREA':
		case 'BUTTON':
		case 'DATALIST':
		case 'KEYGEN':
		case 'OUTPUT': return true
		default: return false
	}
	return false;
}

function doHighLightDomElement(a_aSuspendedNodes, a_Node) {
	var childNodes = a_Node.childNodes;

	if (childNodes == null || childNodes.length == 0)
		return;

	var nLen = childNodes.length;
	for (var i = 0; i < nLen; i++) {
		var node = childNodes.item(i);
		if (node == null || isFormElement(node))
			continue;

		if (node.nodeType == 1) {	//element
			if (doesTagRecursiveProcess(node)) {
				if (a_aSuspendedNodes.length > 0) {
					processSuspendNodes(a_aSuspendedNodes);
					a_aSuspendedNodes.length = 0;
				}
			}
			doHighLightDomElement(a_aSuspendedNodes, node);
		}
		else if (node.nodeType == 3) {	//text
			a_aSuspendedNodes[a_aSuspendedNodes.length] = node;
		}
	}
}

function highlightDocument() {
	if (!document.body || document.body == null)
		return;

	var aSuspendedNodes = new Array();
	aLongestNodes = new Array();
	aLongestlength = 0;
	var topicNode = document.getElementById(gTopicElemId);
	if (!topicNode)
		topicNode = document.body;
	doHighLightDomElement(aSuspendedNodes, topicNode);
	processSuspendNodes(aSuspendedNodes);
}

/////// start routine /////////
function applyHighlight() {
	gsTextColor = rh.model.cget('KEY_SEARCH_HIGHLIGHT_COLOR') || ''
	gsBkgndColor = rh.model.cget('KEY_SEARCH_BG_COLOR') || ''
	StartHighLightSearch()
}

function StartHighLightSearch() {
	var strTerms = GetHighlightTextFromURL();
	if (strTerms.length > 0) {
		var arrSyns = GetSynonymsFromURL();
		rh._.each(strTerms, function (term) {
			if (term[0] === "\"" && term[term.length - 1] === "\"") {
				gbPhraseTerm = true
				term = term.substring(1, term.length - 1)
			}
			findSearchTerms(term, false);
		})
		highlightDocument();
	}
}

//////// common with FTS routines to identify stop word etc. ////////////

function findSearchTerms(searchTerm) {
	if (searchTerm.length > 0) {
		gaSearchTerms[gaSearchTerms.length] = searchTerm;
		gaSearchTermType[gaSearchTermType.length] = EST_TERM;
	}
}


function getLengthOfPhrase(a_str) {
	var i = 0;
	var nLen = a_str.length;
	while (i < nLen) {
		if (isQuote(a_str.charAt(i)))
			return i;
		++i;
	}
	return -1;
}

function GetStem(szWord) {
	if (gaFtsStem == null || gaFtsStem.length == 0) return szWord;
	if (IsNonAscii(szWord)) return szWord;
	var aStems = gaFtsStem;

	var nStemPos = 0;
	var csStem = "";
	for (var iStem = 0; iStem < aStems.length; iStem++) {

		if (aStems[iStem].length >= szWord.length - 1) continue;
		nStemPos = szWord.lastIndexOf(aStems[iStem]);
		if (nStemPos > 0) {
			var cssub = szWord.substring(nStemPos);
			if (cssub == aStems[iStem]) {
				csStem = szWord;
				if (szWord.charAt(nStemPos - 2) == szWord.charAt(nStemPos - 1)) {
					csStem = csStem.substring(0, nStemPos - 1);
				} else {
					csStem = csStem.substring(0, nStemPos);
				}
				return csStem;
			}
		}
	}
	return szWord;
}

function IsStopWord(sCW, aFtsStopArray) {
	var nStopArrayLen = aFtsStopArray.length;
	var nB = 0;
	var nE = nStopArrayLen - 1;
	var nM = 0;
	var bFound = false;
	var sStopWord = "";
	while (nB <= nE) {
		nM = (nB + nE);
		nM >>= 1;
		sStopWord = aFtsStopArray[nM];
		if (compare(sCW, sStopWord) > 0) {
			nB = (nB == nM) ? nM + 1 : nM;
		} else {
			if (compare(sCW, sStopWord) < 0) {
				nE = (nE == nM) ? nM - 1 : nM;
			} else {
				bFound = true;
				break;
			}
		}
	}
	return bFound;
}

/////// end highlight search rountines /////////////

function setButtonFont(sType, sFontName, sFontSize, sFontColor, sFontStyle, sFontWeight, sFontDecoration) {
	var vFont = new whFont(sFontName, sFontSize, sFontColor, sFontStyle, sFontWeight, sFontDecoration);
	gsBtnStyle += ".whtbtn" + sType + "{" + getFontStyle(vFont) + "}";
}

function writeBtnStyle() {
	if (gaButtons.length > 0) {
		if (gsBtnStyle.length > 0) {
			var sStyle = "<style type='text/css'>";
			sStyle += gsBtnStyle + "</style>";
			document.write(sStyle);
		}
	}
}

function button(sText, nWidth, nHeight) {
	this.sText = sText;
	this.nWidth = nWidth;
	this.nHeight = nHeight;

	this.aImgs = new Array();
	var i = 0;
	while (button.arguments.length > i + 3) {
		this.aImgs[i] = button.arguments[3 + i];
		i++;
	}
}


//recursively finds the parent project StartPage path if exists
//also computes the child toc path in the parent toc recursively until
//main proj

function getPPStartPagePath(sPath) {
	if (sPath.length != 0) {
		var sXmlFolderPath = _getPath(sPath);
		if (sXmlFolderPath.indexOf("/mergedProjects/") == -1 &&
			sXmlFolderPath.indexOf("\\mergedProjects\\") == -1)
			return sPath;

		var sdocPath = _getFullPath(sXmlFolderPath, "MasterData.xml");
		try {
			if (gbIE5) //Internet Explorer
			{
				xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
				xmlDoc.async = false;
				xmlDoc.load(sdocPath);
			}
			else if (gbNav6) //Firefox, Mozilla, Opera etc.
			{
				var req = new XMLHttpRequest();
				req.open("GET", sdocPath, false);
				req.send(null);
				xmlDoc = req.responseXML;
			}
			else if (gbSafari3) //Safari
			{
				if (window.XMLHttpRequest)
					xmlhttp = new XMLHttpRequest();
				if (xmlhttp) {
					xmlhttp.onreadystatechange = processReqChange;
					xmlhttp.open("GET", sdocPath, false);
					xmlhttp.send("");
				}
			}
		}
		catch (e) {
			gbBadUriError = true;
			return sPath;
		}

		if (xmlDoc == null) return sPath;
		var root = xmlDoc.documentElement;
		if (root == null) return sPath;
		var masterProj = null;
		try {
			masterProj = xmlDoc.getElementsByTagName("syncinfo");
			var childTocPosInParent = null;
			if (masterProj) {
				var startpage = xmlDoc.getElementsByTagName("startpage");
				masterStartPageName = startpage[0].getAttribute("name");
				masterStartPageRelPath = startpage[0].getAttribute("url");
				var tocpos = xmlDoc.getElementsByTagName("tocpos");
				childTocPosInParent = tocpos[0].getAttribute("path");

			}
		}
		catch (e) { return sPath; }
		if (childTocPosInParent) {
			childTocPosInParent = childTocPosInParent.replace(/\\n/g, "\n");
			gChildPathInMain = childTocPosInParent + gChildPathInMain;
		}
		sXmlFolderPath = _getFullPath(sXmlFolderPath, masterStartPageRelPath + masterStartPageName);
		sXmlFolderPath = getPPStartPagePath(sXmlFolderPath);
		return sXmlFolderPath;
	}
}

//project info
function setRelStartPage(sPath) {
	if (gsPPath.length == 0) {
		gsPPath = _getFullPath(_getPath(document.location.href), _getPath(sPath));
		gsStartPage = _getFullPath(_getPath(document.location.href), sPath);
		try {
			gsStartPage = getPPStartPagePath(gsStartPage);
		}
		catch (e) {
			alert("Error reading masterData.xml");
		}
		gsRelCurPagePath = _getRelativeFileName(gsStartPage, document.location.href);
		for (var i = 0; i < gaPaths.length; i++)
			gaPaths[i] = gChildPathInMain + gaPaths[i];
	}
}

function getImage(oImage, sType) {
	var sImg = "";
	if (oImage && oImage.aImgs && (oImage.aImgs.length > 0)) {
		sImg += "<img alt=\"" + sType + "\" src=\"" + oImage.aImgs[0] + "\"";
		if (oImage.nWidth > 0)
			sImg += " width=" + oImage.nWidth;
		if (oImage.nHeight > 0)
			sImg += " height=" + oImage.nHeight;
		sImg += " border=0>";
	}
	return sImg;
}

function addTocInfo(sTocPath) {
	gaPaths[gaPaths.length] = sTocPath;
}


var flex_nextLocation;
var flex_previousLocation;

function addAvenueInfo(sName, sPrev, sNext) {
	gaAvenues[gaAvenues.length] = new avenueInfo(sName, sPrev, sNext);
	flex_previousLocation = sPrev;
	flex_nextLocation = sNext;
}

function addButton(sType, nStyle, sText, sHref, sOnClick, sOnMouseOver, sOnLoad, nWidth, nHeight, sImg1, sImg2, sImg3) {
	var sButton = "";
	var nBtn = gaButtons.length;
	if (sType == "prev") {
		if (canGo(false)) {
			var sTitle = "Previous Topic";
			goPrev = new button(sText, nWidth, nHeight, sImg1, sImg2, sImg3);
			sButton = "<a title=\"" + sTitle + "\" class=\"whtbtnprev\" href=\"javascript:void(0);\" onclick=\"goAvenue(false);return false;\">";
			if (nStyle == BTN_TEXT)
				sButton += goPrev.sText;
			else
				sButton += getImage(goPrev, sTitle);
			sButton += "</a>";
		}
	}
	else if (sType == "next") {
		if (canGo(true)) {
			var sTitle = "Next Topic";
			goNext = new button(sText, nWidth, nHeight, sImg1, sImg2, sImg3);
			sButton = "<a title=\"" + sTitle + "\" class=\"whtbtnnext\" href=\"javascript:void(0);\" onclick=\"goAvenue(true);return false;\">";
			if (nStyle == BTN_TEXT)
				sButton += goNext.sText;
			else
				sButton += getImage(goNext, sTitle);
			sButton += "</a>";
		}
	}
	else if (sType == "show") {
		if (isTopicOnly() && (!gbOpera6 || gbOpera7)) {
			var sTitle = "Show Navigation Component";
			goShow = new button(sText, nWidth, nHeight, sImg1, sImg2, sImg3);
			sButton = "<a title=\"" + sTitle + "\" class=\"whtbtnshow\" href=\"javascript:void(0);\" onclick=\"show();return false;\">";
			if (nStyle == BTN_TEXT)
				sButton += goShow.sText;
			else
				sButton += getImage(goShow, sTitle);
			sButton += "</a>";
		}
	}
	else if (sType == "hide") {
		if (!isTopicOnly() && !gbOpera6) {
			var sTitle = "Hide Navigation Component";
			goHide = new button(sText, nWidth, nHeight, sImg1, sImg2, sImg3);
			sButton = "<a title=\"" + sTitle + "\" class=\"whtbtnhide\" href=\"javascript:void(0);\" onclick=\"hide();return false;\">";
			if (nStyle == BTN_TEXT)
				sButton += goHide.sText;
			else
				sButton += getImage(goHide, sTitle);
			sButton += "</a>";
		}
	}
	else if (sType == "shownav") {
		if (isShowHideEnable()) {
			var sTitle = "Show Navigation Component";
			goShowNav = new button(sText, nWidth, nHeight, sImg1, sImg2, sImg3);
			sButton = "<a title=\"" + sTitle + "\" class=\"whtbtnshownav\" href=\"javascript:void(0);\" onclick=\"showHidePane(true);return false;\">";
			if (nStyle == BTN_TEXT)
				sButton += goShowNav.sText;
			else
				sButton += getImage(goShowNav, sTitle);
			sButton += "</a>";
		}
	}
	else if (sType == "hidenav") {
		if (isShowHideEnable()) {
			var sTitle = "Hide Navigation Component";
			goHideNav = new button(sText, nWidth, nHeight, sImg1, sImg2, sImg3);
			sButton = "<a title=\"" + sTitle + "\" class=\"whtbtnhidenav\" href=\"javascript:void(0);\" onclick=\"showHidePane(false);return false;\">";
			if (nStyle == BTN_TEXT)
				sButton += goHideNav.sText;
			else
				sButton += getImage(goHideNav, sTitle);
			sButton += "</a>";
		}
	}
	else if (sType == "synctoc") {
		if (gaPaths.length > 0) {
			var sTitle = "Sync TOC";
			goSync = new button(sText, nWidth, nHeight, sImg1, sImg2, sImg3);
			sButton = "<a title=\"" + sTitle + "\" class=\"whtbtnsynctoc\" href=\"javascript:void(0);\" onclick=\"syncWithShow();return false;\">";
			if (nStyle == BTN_TEXT)
				sButton += goSync.sText;
			else
				sButton += getImage(goSync, sTitle);
			sButton += "</a>";
		}
	}
	else if (sType == "websearch") {
		if (gsSearchFormHref.length > 0) {
			var sTitle = "WebSearch";
			goWebSearch = new button(sText, nWidth, nHeight, sImg1, sImg2, sImg3);
			sButton = "<a title=\"" + sTitle + "\" class=\"whtbtnwebsearch\" href=\"" + gsSearchFormHref + "\">";
			if (nStyle == BTN_TEXT)
				sButton += goWebSearch.sText;
			else
				sButton += getImage(goWebSearch, sTitle);
			sButton += "</a>";
		}
	}
	else if (sType == "searchform") {
		gaButtons[nBtn] = "NeedSearchForm";
		gaTypes[nBtn] = sType;
	}
	if (sButton.length != 0) {
		if (nStyle == BTN_TEXT)
			sButton += "&nbsp;";
		gaButtons[nBtn] = "<td>" + sButton + "</td>";
		gaTypes[nBtn] = sType;
	}
}

function isSyncEnabled() {
	if (!gbCheckSync) {
		var oMsg = new whMessage(WH_MSG_ISSYNCSSUPPORT, this, 1, null);
		if (SendMessage(oMsg)) {
			gbSyncEnabled = oMsg.oParam;
		}
		gbCheckSync = true;
	}
	return gbSyncEnabled;
}

function isInPopup() {
	return (window.name.indexOf("BSSCPopup") != -1);
}

function getIntopicBar(sAlign) {
	var sHTML = "";
	if (gaButtons.length > 0) {
		sHTML += "<div align=" + sAlign + ">";

		sHTML += "<table cellpadding=\"2\" cellspacing=\"0\" border=\"0\"><tr>";
		for (var i = 0; i < gaButtons.length; i++) {
			if (gaTypes[i] != "synctoc" || isSyncEnabled()) {
				if (gaButtons[i] == "NeedSearchForm")
					sHTML += getSearchFormHTML();
				else
					sHTML += gaButtons[i];
			}
		}
		sHTML += "</tr></table>";

		sHTML += "</div>";
	}
	return sHTML;
}


function writeIntopicBar(nAligns) {
	if (isInPopup()) return;
	if (gaButtons.length > 0) {
		var sHTML = "";
		if (nAligns != 0) {
			sHTML += "<table width=100%><tr>"
			if (nAligns & 1)
				sHTML += "<td width=33%>" + getIntopicBar("left") + "</td>";
			if (nAligns & 2)
				sHTML += "<td width=34%>" + getIntopicBar("center") + "</td>";
			if (nAligns & 4)
				sHTML += "<td width=33%>" + getIntopicBar("right") + "</td>";
			sHTML += "</tr></table>";
			document.write(sHTML);
		}
	}
}

function sendAveInfoOut() {
	if (!isInPopup())
		setTimeout("sendAveInfo();", 100);
}

function sendAveInfo() {
	var oMsg = new whMessage(WH_MSG_AVENUEINFO, this, 1, gaAvenues);
	SendMessage(oMsg);
}


function onNext() {
	var oMsg = new whMessage(WH_MSG_NEXT, this, 1, null);
	SendMessage(oMsg);
}

function onPrev() {
	var oMsg = new whMessage(WH_MSG_PREV, this, 1, null);
	SendMessage(oMsg);
}

function createSyncInfo() {
	var oParam = new Object();
	var sPath = null;
	if (gsStartPage.length != 0)
		sPath = _getPath(gsStartPage);
	else if (gsPPath.length == 0)
		sPath = _getPath(document.location.href);
	else
		sPath = gsPPath;
	oParam.sPPath = sPath;
	oParam.sTPath = document.location.href;
	oParam.aPaths = gaPaths;
	return oParam;
}

function syncWithShow() {
	if (isTopicOnly())
		show();
	else {
		sync();
		showTocPane();
	}
}

function showTocPane() {
	var oMsg = new whMessage(WH_MSG_SHOWTOC, this, 1, null);
	SendMessage(oMsg);
}

function sendSyncInfo() {
	if (!isInPopup()) {
		var oParam = null;
		if (gaPaths.length > 0) {
			oParam = createSyncInfo();
		}
		var oMsg = new whMessage(WH_MSG_SYNCINFO, this, 1, oParam);
		SendMessage(oMsg);
	}
}

function sendInvalidSyncInfo() {
	if (!isInPopup()) {
		var oMsg = new whMessage(WH_MSG_SYNCINFO, this, 1, null);
		SendMessage(oMsg);
	}
}

function enableWebSearch(bEnable) {
	if (!isInPopup()) {
		var oMsg = new whMessage(WH_MSG_ENABLEWEBSEARCH, this, 1, bEnable);
		SendMessage(oMsg);
	}
}

function autoSync(nSync) {
	if (nSync == 0) return;
	if (isInPopup()) return;
	if (isOutMostTopic())
		sync();
}

function isOutMostTopic() {
	if (gnOutmostTopic == -1) {
		var oMessage = new whMessage(WH_MSG_ISINFRAMESET, this, 1, null);
		if (SendMessage(oMessage))
			gnOutmostTopic = 0;
		else
			gnOutmostTopic = 1;
	}
	return (gnOutmostTopic == 1);
}

function sync() {
	if (gaPaths.length > 0) {
		var oParam = createSyncInfo();
		var oMessage = new whMessage(WH_MSG_SYNCTOC, this, 1, oParam);
		SendMessage(oMessage);
	}
}


function avenueInfo(sName, sPrev, sNext) {
	this.sName = sName;
	this.sPrev = sPrev;
	this.sNext = sNext;
}

function getCurrentAvenue() {
	var oParam = new Object();
	oParam.sAvenue = null;
	var oMessage = new whMessage(WH_MSG_GETCURRENTAVENUE, this, 1, oParam);
	SendMessage(oMessage);
	return oParam.sAvenue;
}

function unRegisterListener() {
	if (gbAIRSSL)
		return;
	sendInvalidSyncInfo();
	enableWebSearch(false);
	if (whtopic_foldUnload)
		whtopic_foldUnload();
}

function onSendMessage(oMsg) {
	var nMsgId = oMsg.nMessageId;
	if (nMsgId == WH_MSG_GETAVIAVENUES) {
		oMsg.oParam.aAvenues = gaAvenues;
		return false;
	}
	else if (nMsgId == WH_MSG_GETTOCPATHS) {
		if (isOutMostTopic()) {
			oMsg.oParam.oTocInfo = createSyncInfo();
			return false;
		}
		else
			return true;
	}
	else if (nMsgId == WH_MSG_NEXT) {
		goAvenue(true);
	}
	else if (nMsgId == WH_MSG_PREV) {
		goAvenue(false);
	}
	else if (nMsgId == WH_MSG_WEBSEARCH) {
		websearch();
	}
	return true;
}

function goAvenue(bNext) {
	var sTopic = null;
	var sAvenue = getCurrentAvenue();
	var nAvenue = -1;
	if (sAvenue != null && sAvenue != "") {
		for (var i = 0; i < gaAvenues.length; i++) {
			if (gaAvenues[i].sName == sAvenue) {
				nAvenue = i;
				break;
			}
		}
		if (nAvenue != -1) {
			if (bNext)
				sTopic = gaAvenues[nAvenue].sNext;
			else
				sTopic = gaAvenues[nAvenue].sPrev;
		}
	}
	else {
		for (var i = 0; i < gaAvenues.length; i++) {
			if (gaAvenues[i].sNext != null && gaAvenues[i].sNext.length > 0 && bNext) {
				sTopic = gaAvenues[i].sNext;
				break;
			}
			else if (gaAvenues[i].sPrev != null && gaAvenues[i].sPrev.length > 0 && !bNext) {
				sTopic = gaAvenues[i].sPrev;
				break;
			}
		}
	}

	if (sTopic != null && sTopic != "") {
		if (gsPPath != null && gsPPath != "") {
			sFullTopicPath = _getFullPath(gsPPath, sTopic);
			document.location = sFullTopicPath;
		}
	}
}

function canGo(bNext) {
	for (var i = 0; i < gaAvenues.length; i++) {
		if ((gaAvenues[i].sNext != null && gaAvenues[i].sNext.length > 0 && bNext) ||
			(gaAvenues[i].sPrev != null && gaAvenues[i].sPrev.length > 0 && !bNext))
			return true;
	}
	return false;
}

function show() {
	var url = null;
	if (gbBadUriError) {
		var strMainPage = decodeURI(document.location.href);
		var indx = strMainPage.toLowerCase().indexOf("/mergedprojects/");
		if (indx != -1)
			url = strMainPage.substring(0, indx + 1) + "whcsh_home.htm#topicurl=" + strMainPage.substring(indx + 1);
		else if (gsStartPage != "")
			url = gsStartPage + "#" + gsRelCurPagePath;
	}
	else if (gsStartPage != "")
		url = gsStartPage + "#" + gsRelCurPagePath;

	if (url) {
		window.location = encodeURI(url);
	}
}

function hide() {
	if (goFrame != null) {
		goFrame.location = window.location;
	}
}

function isTopicOnly() {
	if (gnTopicOnly == -1) {
		var oParam = new Object();
		oParam.oFrame = null;
		var oMsg = new whMessage(WH_MSG_GETSTARTFRAME, this, 1, oParam);
		if (SendMessage(oMsg)) {
			goFrame = oParam.oFrame;
			gnTopicOnly = 0;
		}
		else
			gnTopicOnly = 1;
	}
	if (gnTopicOnly == 1)
		return true;
	else
		return false;
}

function websearch() {
	if (gbNav4) {
		if (document.ehelpform)
			document.ehelpform.submit();
	}
	else {
		if (window.ehelpform)
			window.ehelpform.submit();
	}
}

function addSearchFormHref(sHref) {
	gsSearchFormHref = sHref;
	enableWebSearch(true);
}

function searchB(nForm) {
	var searchFormName = 'searchForm' + nForm;
	var searchForm = document[searchFormName];
	var sValue = searchForm && searchForm.searchString && searchForm.searchString.value;
	var oMsg = new whMessage(WH_MSG_SEARCHTHIS, this, 1, sValue);
	SendMessage(oMsg);
}


function getSearchFormHTML() {
	var sHTML = "";
	gnForm++;
	var sFormName = "searchForm" + gnForm;
	var sButton = "<form name=\"" + sFormName + "\" method=\"POST\" action=\"javascript:searchB(" + gnForm + ")\">"
	sButton += "<input type=\"text\" name=\"searchString\" value=\"- Full Text search -\" size=\"20\"/>";
	if ("dummy" == "text") {
		sButton += "<a class=\"searchbtn\" href=\"javascript:void(0);\" onclick=\"" + sFormName + ".submit();return false;\">dummy</a>";
	}
	else if ("dummy" == "image") {
		sButton += "<a class=\"searchbtn\" href=\"javascript:void(0);\" onclick=\"" + sFormName + ".submit();return false;\">"
		sButton += "<img src=\"dummy\" border=0></a>";
	}
	sButton += "</form>";
	sHTML = "<td align=\"center\">" + sButton + "</td>";
	return sHTML;
}




function showHidePane(bShow) {
	var oMsg = null;
	if (bShow)
		oMsg = new whMessage(WH_MSG_SHOWPANE, this, 1, null);
	else
		oMsg = new whMessage(WH_MSG_HIDEPANE, this, 1, null);
	SendMessage(oMsg);
}

function isShowHideEnable() {
	if (gbIE4)
		return true;
	else
		return false;
}


function PickupDialog_Invoke() {
	if (!gbIE4 || gbMac || gbAIRSSL) {
		if (typeof (_PopupMenu_Invoke) == "function")
			return _PopupMenu_Invoke(PickupDialog_Invoke.arguments);
	}
	else {
		if (PickupDialog_Invoke.arguments.length > 2) {
			var sPickup = "dummy";
			var sPickupPath = gsPPath + sPickup;
			if (gbIE4) {
				var sFrame = PickupDialog_Invoke.arguments[1];
				var aTopics = new Array();
				for (var i = 2; i < PickupDialog_Invoke.arguments.length; i += 2) {
					var j = aTopics.length;
					aTopics[j] = new Object();
					aTopics[j].m_sName = PickupDialog_Invoke.arguments[i];
					aTopics[j].m_sURL = PickupDialog_Invoke.arguments[i + 1];
				}

				if (aTopics.length > 1) {
					var nWidth = 300;
					var nHeight = 180;
					var nScreenWidth = screen.width;
					var nScreenHeight = screen.height;
					var nLeft = (nScreenWidth - nWidth) / 2;
					var nTop = (nScreenHeight - nHeight) / 2;
					if (gbIE4) {
						var vRet = window.showModalDialog(sPickupPath, aTopics, "dialogHeight:" + nHeight + "px;dialogWidth:" + nWidth + "px;resizable:yes;status:no;scroll:no;help:no;center:yes;");
						if (vRet) {
							var sURL = vRet.m_url;
							if (sFrame)
								window.open(sURL, sFrame);
							else
								window.open(sURL, "_self");
						}
					}
				}
				else if (aTopics.length == 1) {
					var sURL = aTopics[0].m_sURL
					if (sFrame)
						window.open(sURL, sFrame);
					else
						window.open(sURL, "_self");
				}
			}
		}
	}
}

function isQuote(a_ch) {
	return (a_ch == gsQuote);
}

isSubstrSearchEnabled = function () {
	return gsSubstrSrch || rh.model.get(rh.consts('KEY_SUBSTR_SEARCH')) || false
}

function escapeRegExp(str) {
	var specials = new RegExp("[.*+?|()\\^\\$\\[\\]{}\\\\]", "g"); // .*+?|()^$[]{}\
	return str.replace(specials, "\\$&");
}
